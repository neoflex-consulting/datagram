import "jrutils.etl";
pre {
    var dataset = S!jitdataset::Dataset.all.first();
    var deployment = S!jitdataset::DeploymentDescriptor.all.first();
    var trName = prefix + dataset.name.toLowerCase();
    trName.println("Create transformation: ");
    deployment.name.println("DeploymentDescriptor: ");
}
post {
    "Done".println;
}

@greedy
rule Dataset2TransformationBuild
    transform dataset: S!Dataset
    to transformation: T!Transformation {
    "Dataset2Transformation".println();
    transformation.name = trName;
    transformation.project = dataset.project;
    for (field in dataset.paramFields()) {
        transformation.addParameter(field.name.toLowerCase(), "null", true);
    }

// HiveSource
    var hiveSource = transformation.createSource(new T!etl::HiveSource, dataset.name + "Source");
    hiveSource.statement = dataset.createSQLFromFull();
    transformation.createOutputPort(hiveSource);
    for (field in dataset.allFields()) {
        hiveSource.outputPort.addField(new T!dataset::Field, field.name.toLowerCase(), field.dataType.getDomain());        
    }

// CSVTarget
    var fullTarget = transformation.createTarget(new T!etl::CSVTarget, "CSVTarget");
    transformation.createInputPort(fullTarget, hiveSource.outputPort);
    fullTarget.hdfs = true;
    fullTarget.path = deployment.hdfsBaseDirectory + "/" + deployment.hdfsUser + "/export/" + dataset.name.toLowerCase();
    fullTarget.header = true;
    fullTarget.createFieldMappings();
}

@greedy
rule Dataset2TransformationDeployment
    transform dataset: S!Dataset
    to transformationDeployment: T!TransformationDeployment {
    transformationDeployment.name = "autogenerated_tr_" + trName;
    transformationDeployment.project = dataset.project;
    var transformation: T!Transformation ::= dataset;
    transformationDeployment.transformation = transformation;
    transformationDeployment.jobServer = deployment.sparkJobServer;
    transformationDeployment.debug = false; 
    transformationDeployment.slideSize = 400;
    transformationDeployment.rejectSize = 1000;
    transformationDeployment.fetchSize = 1000;
    transformationDeployment.partitionNum = 1;
    transformationDeployment.persistOnDisk = true;
    transformationDeployment.deployments.addAll(deployment.deployments);
}
