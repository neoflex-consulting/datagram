@namespace(uri="http://www.neoflex.ru/meta/etlevs", prefix="evs")
package evs;

import "http://www.neoflex.ru/meta/etl";
import "http://www.neoflex.ru/meta/dataset";

class EventFunction {
	ref FunctionsLibrary library;
	attr String userTextPattern;
	attr String name;
	val dataset.Structure input;
	val dataset.Structure output;
	
	@mspace.ui(multiline="true")
	@teneo.jpa(value="@Column(length=10485760)")
	attr String sourceCode;
	@teneo.jpa(value="@Column(length=10485760)")
    attr String description;
}

class FunctionParamsMapping {
	ref FunctionAction#paramsMapping action;
	@mspace.ui(filter="dataSet.e_id", ds="action.function.input.e_id", entityType="dataset.Field")
	ref dataset.Field param;
	@mspace.ui(listeval="[...(props.entity.__parent.__parent.__parent.input || {fields: []}).fields.map(f=>{f.displayField = 'input.'+f.name;return f;}), ...(props.entity.__parent.__parent.__parent.output || {fields: []}).fields.map(f=>{f.displayField = 'output.'+f.name;return f;}), ...(props.entity.__parent.__parent.__parent.state || {fields: []}).fields.map(f=>{f.displayField = 'state.'+f.name;return f;}), ...(props.entity.__parent.__parent.__parent.local || {fields: []}).fields.map(f=>{f.displayField = 'local.'+f.name;return f;})]")
	ref dataset.Field value;
}

class FunctionOutputMapping {
	ref FunctionAction#resultsMapping action;
	@mspace.ui(filter="dataSet.e_id", ds="action.function.output.e_id", entityType="dataset.Field")
	ref dataset.Field param;
	@mspace.ui(listeval="[...(props.entity.__parent.__parent.__parent.output || {fields: []}).fields.map(f=>{f.displayField = 'output.'+f.name;return f;}), ...(props.entity.__parent.__parent.__parent.state || {fields: []}).fields.map(f=>{f.displayField = 'state.'+f.name;return f;}), ...(props.entity.__parent.__parent.__parent.local || {fields: []}).fields.map(f=>{f.displayField = 'local.'+f.name;return f;})]")
	ref dataset.Field value;
}

abstract class Condition {
}

abstract class LogicCondition extends Condition {
    val Condition[*] conditions;
}

class AndCondition extends LogicCondition {
}

class OrCondition extends LogicCondition {
}

class WhenTimeoutCondition {
}

enum ConditionOperand {
	equal = 1;
	notEqual = 2;
	more = 3;
	less = 4;
	moreOrEqals = 5;
	lessOrEqals = 6;
}

class EvalCondition extends Condition {
	attr String expression;
}

class ParamsCompareCondition extends Condition {
	attr ConditionOperand operand;
	@mspace.ui(listeval="(props.entity.__parent.__parent.output || {fields: []}).fields.map(f=>{f.displayField = 'output.'+f.name; return f;}).concat(props.entity.__parent.__parent.input.fields.map(f=>{f.displayField = 'input.'+f.name; return f;})).concat((props.entity.__parent.__parent.state || {fields: []}).fields.map(f=>{f.displayField = 'state.'+f.name;return f;})).concat((props.entity.__parent.__parent.local || {fields: []}).fields.map(f=>{f.displayField = 'local.'+f.name;return f;}))")
	ref dataset.Field leftParam;
	@mspace.ui(listeval="(props.entity.__parent.__parent.output || {fields: []}).fields.map(f=>{f.displayField = 'output.'+f.name; return f;}).concat(props.entity.__parent.__parent.input.fields.map(f=>{f.displayField = 'input.'+f.name; return f;})).concat((props.entity.__parent.__parent.state || {fields: []}).fields.map(f=>{f.displayField = 'state.'+f.name;return f;})).concat((props.entity.__parent.__parent.local || {fields: []}).fields.map(f=>{f.displayField = 'local.'+f.name;return f;}))")
	ref dataset.Field rightParam;
}

class ParamsToExpressionCondition extends Condition {
    attr ConditionOperand operand;
    @mspace.ui(listeval="(props.entity.__parent.__parent.output || {fields: []}).fields.map(f=>{f.displayField = 'output.'+f.name; return f;}).concat(props.entity.__parent.__parent.input.fields.map(f=>{f.displayField = 'input.'+f.name; return f;})).concat((props.entity.__parent.__parent.state || {fields: []}).fields.map(f=>{f.displayField = 'state.'+f.name;return f;})).concat((props.entity.__parent.__parent.local || {fields: []}).fields.map(f=>{f.displayField = 'local.'+f.name;return f;}))")
    ref dataset.Field leftParam;
    attr String expression;
}

class Rule {
    attr String name;
    attr boolean modifyFact;
	val AndCondition condition;
	val Action[*] actions;
}

abstract class Action {
    attr String name;
    attr boolean modifyFact;
}

class FunctionAction extends Action {
	ref EventFunction function;
	val FunctionParamsMapping[*]#action paramsMapping;
	val FunctionOutputMapping[*]#action resultsMapping;
}

class SetValueAction extends Action {
	@mspace.ui(listeval="(props.entity.__parent.__parent.output || {fields: []}).fields.map(f=>{f.displayField = 'output.'+f.name; return f;}).concat((props.entity.__parent.__parent.state || {fields: []}).fields.map(f=>{f.displayField = 'state.'+f.name; return f;})).concat((props.entity.__parent.__parent.local || {fields: []}).fields.map(f=>{f.displayField = 'local.'+f.name; return f;}))")
	ref dataset.Field outputField;
	attr String expression;
}

class MapValueAction extends Action {
	@mspace.ui(listeval="(props.entity.__parent.__parent.output || {fields: []}).fields.map(f=>{f.displayField = 'output.'+f.name; return f;}).concat((props.entity.__parent.__parent.state || {fields: []}).fields.map(f=>{f.displayField = 'state.'+f.name; return f;})).concat((props.entity.__parent.__parent.local || {fields: []}).fields.map(f=>{f.displayField = 'local.'+f.name; return f;}))")
	ref dataset.Field outputField;
	@mspace.ui(listeval="props.entity.__parent.__parent.input.fields.map(f=>{f.displayField = 'input.'+f.name; return f;}).concat((props.entity.__parent.__parent.state || {fields: []}).fields.map(f=>{f.displayField = 'state.'+f.name;return f;})).concat((props.entity.__parent.__parent.local || {fields: []}).fields.map(f=>{f.displayField = 'local.'+f.name;return f;}))")
	ref dataset.Field valueField;
}

class SetTimeoutAction extends Action {
	attr String duration;
}

class AddOutputAction extends Action {
}

class RemoveStateAction extends Action {
}

class InitializeFactAction extends Action {
}

class EventsProcessor {
	attr String name;

	@mspace.ui(multiline="true")
  	@teneo.jpa(value="@Column(length=10485760)")
	attr String description;
	
    ref etl.Project project;
    
	val dataset.Structure input;
	val dataset.Structure state;
	val dataset.Structure output;
	val dataset.Structure local;

	val Rule[*] rules;
	
    @mspace.ui(multiline="true")
    @teneo.jpa(value="@Column(length=10485760)")
    attr String body;	
	
}

class FunctionsLibrary {
	attr String name;
}