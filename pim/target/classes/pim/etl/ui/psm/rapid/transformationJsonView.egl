[%
    var transformation = S.allContents().first();
    transformation.name.println("Transformation: ");
    for (step in transformation.sources + transformation.transformationSteps + transformation.targets) {
        if (step.hasProperty("outputPort") and step.outputPort.isDefined()) {
            step.outputPort.~step = step;
            step.outputPort.~type = "out";
            step.outputPort.~transition = transformation.transitionByStart(step.outputPort);
        }
        if (step.hasProperty("inputPort") and step.inputPort.isDefined()) {
            step.inputPort.~step = step;
            step.inputPort.~type = "in";
            step.inputPort.~transition = transformation.transitionByFinish(step.inputPort);
        }
        if (step.hasProperty("errorPort") and step.errorPort.isDefined()) {
            step.errorPort.~step = step;
            step.errorPort.~type = "error";
            step.errorPort.~transition = transformation.transitionByStart(step.errorPort);
        }
        if (step.hasProperty("joineePort") and step.joineePort.isDefined()) {
            step.joineePort.~step = step;
            step.joineePort.~type = "join";
            step.joineePort.~transition = transformation.transitionByFinish(step.joineePort);
        }
        if (step.hasProperty("unionPort") and step.unionPort.isDefined()) {
            step.unionPort.~step = step;
            step.unionPort.~type = "union";
            step.unionPort.~transition = transformation.transitionByFinish(step.unionPort);
        }
        if (step.hasProperty("sqlPorts") and step.sqlPorts.isDefined()) {
            for (port in step.sqlPorts) {
	            port.~step = step;
	            port.~type = port.`alias`;
	            port.~transition = transformation.transitionFinishBySqlPort(port);
            }
        }
    }
    placeNodes(transformation.targets, 10, 10);
%]
{
  "cells": [
    [%for (source in transformation.sources + transformation.transformationSteps + transformation.targets + transformation.transitions) {%]
    [%=source.declaration()%][%if (hasMore) {%],[%}%] 
    [%}%]
  ]
}
[%@template
operation TableSource declaration(){%]
{
  "type": "devs.transformation.TableSource",
  "size": {
    "width": 100,
    "height": 75
  },
  "position": {
    "x": [%=self.~x%],
    "y": [%=self.~y%]
  },
  "tooltip": "Data source using<br>single table<br>as source",
  "id": "[%=self.getId()%]",
  "name": "[%=self.name%]",
  "context": "[%=self.context.get('name')%]",
  "sourceTableName": "[%=self.tableName%]",
  "sourceOutPort": [
    [%for (field in self.outputPort.fields) {%]  
    [%=field.declaration()%][%if (hasMore) {%],[%}%]
    [%}%]  
  ],
  "checkpoint": [%=self.checkpoint%],
  "boundFieldName": "",
  "attrs": {
    ".label": {
      "text": "[%=self.name%]"
    }
  }
}
[%}%]
[%@template
operation SQLSource declaration(){%]
{
  "type": "devs.transformation.SqlSource",
  "size": {
    "width": 81.25,
    "height": 65
  },
  "position": {
    "x": [%=self.~x%],
    "y": [%=self.~y%]
  },
  "tooltip": "Data source using<br>select SQL<br>as source",
  "id": "[%=self.getId()%]",
  "name": "[%=self.name%]",
  "statement": "[%=escape(self.statement)%]",
  "sampleSize": [%=self.sampleSize%],
  "context": "[%=self.context.get('name')%]",
  "checkpoint": [%=self.checkpoint%],
  "sourceOutPort": [
    [%for (field in self.outputPort.fields) {%]  
    [%=field.declaration()%][%if (hasMore) {%],[%}%]
    [%}%]  
  ],
  "options": [
    [%for (option in self.sqlOptions) {%]  
    {
      "key": "[%=option.key%]",
      "value": "[%=option.value%]"
    }[%if (hasMore) {%],[%}%]
    [%}%]
  ],
  "attrs": {
    ".label": {
      "text": "[%=self.name%]"
    }
  }
}
[%}%]
[%@template
operation HiveSource declaration(){%]
{
	"type": "devs.transformation.HiveSource",
	"size": {
		"width": 81.25,
		"height": 65
	},
	"position": {
		"x": [%=self.~x%],
    	"y": [%=self.~y%]
	},
	"tooltip": "Data source using<br>Hive<br>as source",
	"id": "[%=self.getId()%]",
	"name": "[%=self.name%]",
	"statement": "[%=escape(self.statement)%]",
	[%if (self.context.isDefined()) {%]
	"context": "[%=self.context.name%]",
	[%}%]
	"explain": [%=self.explain%],
	"sampleSize": [%=self.sampleSize%],
	"checkpoint": [%=self.checkpoint%],
	"sourceOutPort": [
    	[%for (field in self.outputPort.fields) {%]  
    	[%=field.declaration()%][%if (hasMore) {%],[%}%]
    	[%}%]  
  	],
  	"attrs": {
    ".label": {
      "text": "[%=self.name%]"
    }
  }
}
[%}%]
[%@template
operation LocalSource declaration(){%]
{
  "type": "devs.transformation.LocalSource",
  "size": {
    "width": 81.25,
    "height": 65
  },
  "position": {
    "x": [%=self.~x%],
    "y": [%=self.~y%]
  },
  "tooltip": "Data source using<br>HDFS file<br>as source",
  "id": "[%=self.getId()%]",
  "name": "[%=self.name%]",
  "localFileName": "[%=escape(self.localFileName)%]",
  "localFileFormat": "[%=self.localFileFormat.toString()%]",
  "sampleSize": [%=self.sampleSize%],
  "checkpoint": [%=self.checkpoint%],
  "sourceOutPort": [
    [%for (field in self.outputPort.fields) {%]  
    [%=field.declaration()%][%if (hasMore) {%],[%}%]
    [%}%]  
  ],
  "attrs": {
    ".label": {
      "text": "[%=self.name%]"
    }
  }
}
[%}%]
[%@template
operation CSVSource declaration(){%]
{
  "type": "devs.transformation.CSVSource",
  "size": {
    "width": 81.25,
    "height": 65
  },
  "position": {
    "x": [%=self.~x%],
    "y": [%=self.~y%]
  },
  "tooltip": "Data source using<br>CSV file<br>as source",
  "id": "[%=self.getId()%]",
  "name": "[%=self.name%]",
  "hdfs": [%=self.hdfs == true%],
  "path": "[%=escape(self.path)%]",
  "header": [%=self.header == true%],
  "charset": "[%=self.charset%]",
  "delimiter": "[%=escape(self.delimiter)%]",
  "quote": "[%=escape(self.quote)%]",
  "escape": "[%=escape(self.escape)%]",
  "comment": "[%=escape(self.comment)%]",
  "dateFormat": "[%=escape(self.dateFormat)%]",
  "nullValue": "[%=escape(self.nullValue)%]",
  "sampleSize": [%=self.sampleSize%],
  "checkpoint": [%=self.checkpoint%],
  "sourceOutPort": [
    [%for (field in self.outputPort.fields) {%]  
    [%=field.declaration()%][%if (hasMore) {%],[%}%]
    [%}%]  
  ],
  "attrs": {
    ".label": {
      "text": "[%=self.name%]"
    }
  }
}
[%}%]
[%@template
operation ExpressionSource declaration(){%]
{
  "type": "devs.transformation.ExpressionSource",
  "size": {
    "width": 81.25,
    "height": 65
  },
  "position": {
    "x": [%=self.~x%],
    "y": [%=self.~y%]
  },
  "tooltip": "Data source using<br>Expression<br>as source",
  "id": "[%=self.getId()%]",
  "name": "[%=self.name%]",
  "expression": "[%=escape(self.expression)%]",
  "checkpoint": [%=self.checkpoint%],
  "sourceOutPort": [
    [%for (field in self.outputPort.fields) {%]  
    [%=field.declaration()%][%if (hasMore) {%],[%}%]
    [%}%]  
  ],
  "attrs": {
    ".label": {
      "text": "[%=self.name%]"
    }
  }
}
[%}%]
[%@template
operation Source declaration(){
  throw "Unknown Source: " + self.toString();
}%]
[%
operation Source getId(){
    return getId(self);}%]
[%@template
operation Projection declaration(){%]
{
  "type": "devs.transformation.Projection",
  "size": {
    "width": 81.25,
    "height": 65
  },
  "position": {
    "x": [%=self.~x%],
    "y": [%=self.~y%]
  },
  "inPorts": [
    "in"
  ],
  "outPorts": [
    "out"
  ],
  "tooltip": "Data <br>Projection<br>",
  "id": "[%=self.getId()%]",
  "name": "[%=self.name%]",
  "in_source": "[%=getInSource(self)%]",
  "transformationInputPort": [
    [%for (field in self.inputPort.fields) {%]  
    [%=field.declaration()%][%if (hasMore) {%],[%}%]
    [%}%]  
  ],
  "inputPortLookupList": [
    null[%if (self.inputPort.fields.size() > 0) {%],[%}%]
    [%for (field in self.inputPort.fields) {%]  
    "[%=field.name%]"[%if (hasMore) {%],[%}%]
    [%}%]
  ],
  "transformationOutPort": [
    [%for (field in self.outputPort.fields) {%]  
    [%=field.declaration()%][%if (hasMore) {%],[%}%]
    [%}%]  
  ],
  "fieldLinks": [
    [%var links = Sequence{};
    for (field:ProjectionField in self.outputPort.fields) {
        for (source in field.sourceFields) {
        	if (source.get("dataSet").isDefined()){
            	links.add(Sequence {source, field});
            }
        }
    }%]
    [%for (link in links) {%]  
    {
      "fieldName": "[%=link[1].get('name')%]",
      "linkType": "[%=link[0].get('dataSet').~type%]",
      "sourceField": "[%=link[0].get('name')%]",
      "optionid": "[%=link[0].get('dataSet').~type%]_[%=link[0].get('name')%]"
    }[%if (hasMore) {%],[%}%]
    [%}%]  
  ],
  "checkpoint": [%=self.checkpoint%],
  "attrs": {
    ".label": {
      "text": "[%=self.name%]"
    }
  }
}
[%}%]
[%@template
operation Selection declaration(){%]
{
  "type": "devs.transformation.Selection",
  "size": {
    "width": 81.25,
    "height": 65
  },
  "position": {
    "x": [%=self.~x%],
    "y": [%=self.~y%]
  },
  "inPorts": [
    "in"
  ],
  "outPorts": [
    "out"
  ],
  "tooltip": "Data <br>Selection<br>",
  "id": "[%=self.getId()%]",
  "name": "[%=self.name%]",
  "in_source": "[%=getInSource(self)%]",
  "transformationInputPort": [
    [%for (field in self.inputPort.fields) {%]  
    [%=field.declaration()%][%if (hasMore) {%],[%}%]
    [%}%]  
  ],
  "inputPortLookupList": [
    null[%if (self.inputPort.fields.size() > 0) {%],[%}%]
    [%for (field in self.inputPort.fields) {%]  
    "[%=field.name%]"[%if (hasMore) {%],[%}%]
    [%}%]
  ],
  "transformationOutPort": [
    [%for (field in self.outputPort.fields) {%]  
    [%=field.declaration()%][%if (hasMore) {%],[%}%]
    [%}%]  
  ],
  "fieldLinks": [
    [%for (field in self.outputPort.fields) {%]  
    {
      "fieldName": "[%=field.name%]",
      "linkType": "[%=self.inputPort.fields[loopCount - 1].dataSet.~type%]",
      "sourceField": "[%=self.inputPort.fields[loopCount - 1].dataSet.name%]",
      "optionid": "[%=self.inputPort.fields[loopCount - 1].dataSet.~type%]_[%=field.name%]"
    }[%if (hasMore) {%],[%}%]
    [%}%]  
  ],
  "expression": "[%=escape(self.expression)%]",
  "checkpoint": [%=self.checkpoint%],
  "attrs": {
    ".label": {
      "text": "[%=self.name%]"
    }
  }
}
[%}%]
[%@template
operation Drools declaration(){%]
{
  "type": "devs.transformation.Drools",
  "size": {
    "width": 81.25,
    "height": 65
  },
  "position": {
    "x": [%=self.~x%],
    "y": [%=self.~y%]
  },
  "inPorts": [
    "in"
  ],
  "outPorts": [
    "out"
  ],
  "tooltip": "Data <br>Drools<br> enrichment",
  "id": "[%=self.getId()%]",
  "name": "[%=self.name%]",
  "in_source": "[%=getInSource(self)%]",
  "transformationInputPort": [
    [%for (field in self.inputPort.fields) {%]  
    [%=field.declaration()%][%if (hasMore) {%],[%}%]
    [%}%]  
  ],
  "inputPortLookupList": [
    null[%if (self.inputPort.fields.size() > 0) {%],[%}%]
    [%for (field in self.inputPort.fields) {%]  
    "[%=field.name%]"[%if (hasMore) {%],[%}%]
    [%}%]
  ],
  "transformationOutPort": [
    [%for (field in self.outputPort.fields) {%]  
    [%=field.declaration()%][%if (hasMore) {%],[%}%]
    [%}%]  
  ],
  "inputFactTypeName": "[%=self.inputFactTypeName%]",
  "resultFactTypeName": "[%=self.resultFactTypeName%]",
  "resultQueryName": "[%=self.resultQueryName%]",
  "resultFactName": "[%=self.resultFactName%]",
  "rulesFiles": [
    [%for (rulesFile in self.rulesFiles) {%]  
    {
      "fileUrl": "[%=escape(rulesFile.fileUrl)%]",
      "fileType": "[%=rulesFile.fileType.toString()%]",
      "hdfs": [%=rulesFile.hdfs == true%]
    }[%if (hasMore) {%],[%}%]
    [%}%]  
  ],
  "checkpoint": [%=self.checkpoint%],
  "attrs": {
    ".label": {
      "text": "[%=self.name%]"
    }
  }
}
[%}%]
[%@template
operation ModelBasedAnalysis declaration(){%]
{
  "type": "devs.transformation.ModelBasedAnalysis",
  "size": {
    "width": 81.25,
    "height": 65
  },
  "position": {
    "x": [%=self.~x%],
    "y": [%=self.~y%]
  },
  "inPorts": [
    "in"
  ],
  "outPorts": [
    "out"
  ],
  "tooltip": "Model based analysis",
  "id": "[%=self.getId()%]",
  "name": "[%=self.name%]",
  "in_source": "[%=getInSource(self)%]",
  "transformationInputPort": [
    [%for (field in self.inputPort.fields) {%]  
    [%=field.declaration()%][%if (hasMore) {%],[%}%]
    [%}%]  
  ],
  "inputPortLookupList": [
    null[%if (self.inputPort.fields.size() > 0) {%],[%}%]
    [%for (field in self.inputPort.fields) {%]  
    "[%=field.name%]"[%if (hasMore) {%],[%}%]
    [%}%]
  ],
  "transformationOutPort": [
    [%for (field in self.outputPort.fields) {%]  
    [%=field.declaration()%][%if (hasMore) {%],[%}%]
    [%}%]  
  ],
  "fieldLinks": [
    [%for (field in self.inputPort.fields) {%]  
    {
      "fieldName": "[%=field.name%]",
      "linkType": "[%=self.inputPort.fields[loopCount - 1].dataSet.~type%]",
      "sourceField": "[%=self.inputPort.fields[loopCount - 1].dataSet.name%]",
      "optionid": "[%=self.inputPort.fields[loopCount - 1].dataSet.~type%]_[%=field.name%]"
    }[%if (hasMore) {%],[%}%]
    [%}%]  
  ],
  "modelFileName": "[%=self.modelFile%]",
  "labelFieldName": "[%=self.labelFieldName%]",
  "methodName": "[%=self.methodName.toString()%]",
  "modelFeaturesFields": [
    [%for (f in self.modelFeaturesFields) {%]  
      "[%=f%]"
    [%if (hasMore) {%],[%}%]
    [%}%]  
  ],
  "checkpoint": [%=self.checkpoint%],
  "attrs": {
    ".label": {
      "text": "[%=self.name%]"
    }
  }
}
[%}%]
[%@template
operation S!`Sequence` declaration(){%]
{
  "type": "devs.transformation.Sequence",
  "size": {
    "width": 81.25,
    "height": 65
  },
  "position": {
    "x": [%=self.~x%],
    "y": [%=self.~y%]
  },
  "inPorts": [
    "in"
  ],
  "outPorts": [
    "out"
  ],
  "tooltip": "Data <br>Sequence<br>",
  "id": "[%=self.getId()%]",
  "name": "[%=self.name%]",
  "in_source": "[%=getInSource(self)%]",
  "transformationInputPort": [
    [%for (field in self.inputPort.fields) {%]  
    [%=field.declaration()%][%if (hasMore) {%],[%}%]
    [%}%]  
  ],
  "inputPortLookupList": [
    null[%if (self.inputPort.fields.size() > 0) {%],[%}%]
    [%for (field in self.inputPort.fields) {%]  
    "[%=field.name%]"[%if (hasMore) {%],[%}%]
    [%}%]
  ],
  "transformationOutPort": [
    [%for (field in self.outputPort.fields) {%]  
    [%=field.declaration()%][%if (hasMore) {%],[%}%] 
    [%}%] 
  ],
  "fieldLinks": [
    [%for (field in self.inputPort.fields) {%]  
    {
      "fieldName": "[%=self.outputPort.fields[loopCount - 1].name%]",
      "linkType": "[%=field.dataSet.~type%]",
      "sourceField": "[%=field.dataSet.name%]",
      "optionid": "[%=field.dataSet.~type%]_[%=self.outputPort.fields[loopCount - 1].name%]"
    }[%if (hasMore) {%],[%}%]
    [%}%]  
  ],
  "fieldName": "[%=self.fieldName%]",
  "sequencedName": "[%=self.sequencedName%]",
  "batchSize": [%=self.batchSize%],
  "checkpoint": [%=self.checkpoint%],
  "attrs": {
    ".label": {
      "text": "[%=self.name%]"
    }
  }
}
[%}%]
[%@template
operation Aggregation declaration(){%]
{
  "type": "devs.transformation.Aggregation",
  "size": {
    "width": 81.25,
    "height": 65
  },
  "position": {
    "x": [%=self.~x%],    
    "y": [%=self.~y%]
  },
  "inPorts": [
    "in"
  ],
  "outPorts": [
    "out"
  ],
  "tooltip": "Data <br>Aggregation<br>",
  "id": "[%=self.getId()%]",
  "name": "[%=self.name%]",
  "in_source": "[%=getInSource(self)%]",
  "transformationInputPort": [
    [%for (field in self.inputPort.fields) {%]  
    [%=field.declaration()%][%if (hasMore) {%],[%}%]
    [%}%]  
  ],
  "inputPortLookupList": [
    null[%if (self.inputPort.fields.size() > 0) {%],[%}%]
    [%for (field in self.inputPort.fields) {%]  
    "[%=field.name%]"[%if (hasMore) {%],[%}%]
    [%}%]
  ],
  "transformationOutPort": [
    [%for (field in self.outputPort.fields) {%]  
    [%=field.declaration()%][%if (hasMore) {%],[%}%]
    [%}%]  
  ],
  "fieldLinks": [
    [%for (field in self.inputPort.fields) {%]  
    {
      "fieldName": "[%=self.outputPort.fields[loopCount - 1].name%]",
      "linkType": "[%=field.dataSet.~type%]",
      "sourceField": "[%=field.dataSet.name%]",
      "optionid": "[%=field.dataSet.~type%]_[%=self.outputPort.fields[loopCount - 1].name%]"
    }[%if (hasMore) {%],[%}%]
    [%}%]  
  ],
  "aggregationParameters" : [
  	[%for (ap in self.aggregationParameters) {%]
  	{
  		"resultFieldName": "[%=ap.resultFieldName%]",
  		"fieldName": "[%=ap.fieldName%]",
  		"aggregationFunction": "[%=ap.aggregationFunction.toString()%]"
  	}[%if (hasMore) {%],[%}%]
  	[%}%]
  ],
  "pivotParameters" : [
  	[%for (ap in self.pivotParameters) {%]
  	{
  		"resultFieldName": "[%=ap.resultFieldName%]",
  		"expression": "[%=escape(ap.expression)%]"
  	}[%if (hasMore) {%],[%}%]
  	[%}%]
  ],  
  "pivotField": "[%=self.pivotField%]",
  "userDefAgg": [%=self.userDefAgg%],
  "expression": "[%=escape(self.expression)%]",
  "initExpression": "[%=escape(self.initExpression)%]",
  "finalExpression": "[%=escape(self.finalExpression)%]",
  "groupByFieldName": [
    [%for (groupByFieldName in self.groupByFieldName) {%]  
    "[%=groupByFieldName%]"[%if (hasMore) {%],[%}%]
    [%}%]  
  ],
  "checkpoint": [%=self.checkpoint == true%],
  "attrs": {
    ".label": {
      "text": "[%=self.name%]"
    }
  }
}
[%}%]
[%@template
operation Sort declaration(){%]
{
  "type": "devs.transformation.Sort",
  "size": {
    "width": 81.25,
    "height": 65
  },
  "position": {
    "x": [%=self.~x%],
    "y": [%=self.~y%]
  },
  "inPorts": [
    "in"
  ],
  "outPorts": [
    "out"
  ],
  "tooltip": "Data <br>Sort<br>",
  "id": "[%=self.getId()%]",
  "name": "[%=self.name%]",
  "in_source": "[%=getInSource(self)%]",
  "transformationInputPort": [
    [%for (field in self.inputPort.fields) {%]  
    [%=field.declaration()%][%if (hasMore) {%],[%}%]
    [%}%]  
  ],
  "inputPortLookupList": [
    null[%if (self.inputPort.fields.size() > 0) {%],[%}%]
    [%for (field in self.inputPort.fields) {%]  
    "[%=field.name%]"[%if (hasMore) {%],[%}%]
    [%}%]
  ],
  "transformationOutPort": [
    [%for (field in self.outputPort.fields) {%]  
    [%=field.declaration()%][%if (hasMore) {%],[%}%]
    [%}%]  
  ],
  "fieldLinks": [
    [%for (field in self.outputPort.fields) {%]  
    {
      "fieldName": "[%=field.name%]",
      "linkType": "[%=self.inputPort.fields[loopCount - 1].dataSet.~type%]",
      "sourceField": "[%=self.inputPort.fields[loopCount - 1].dataSet.name%]",
      "optionid": "[%=self.inputPort.fields[loopCount - 1].dataSet.~type%]_[%=field.name%]"
    }[%if (hasMore) {%],[%}%]
    [%}%]  
  ],
  "sortFeatures": [
    [%for (sortFeature in self.sortFeatures) {%]  
    {
      "fieldName": "[%=sortFeature.fieldName%]",
      "ascending": [%=sortFeature.ascending == true%]
    }[%if (hasMore) {%],[%}%]
    [%}%]  
  ],
  "checkpoint": [%=self.checkpoint%],
  "attrs": {
    ".label": {
      "text": "[%=self.name%]"
    }
  }
}
[%}%]
[%@template
operation Join declaration(){%]
{
  "type": "devs.transformation.Join",
  "size": {
    "width": 81.25,
    "height": 65
  },
  "position": {
    "x": [%=self.~x%],
    "y": [%=self.~y%]
  },
  "inPorts": [
    "in",
    "join"
  ],
  "outPorts": [
    "out"
  ],
  "tooltip": "Data <br>Join<br>",
  "id": "[%=self.getId()%]",
  "name": "[%=self.name%]",
  "in_source": "[%=getInSource(self)%]",
  "join_source": "[%=getJoinSource(self)%]",
  "transformationInputPort": [
    [%for (field in self.inputPort.fields) {%]  
    [%=field.declaration()%][%if (hasMore) {%],[%}%]
    [%}%]  
  ],
  "transformationJoinPort": [
    [%for (field in self.joineePort.fields) {%]  
    [%=field.declaration()%][%if (hasMore) {%],[%}%]
    [%}%]  
  ],
  "inputPortLookupList": [
    null[%if (self.inputPort.fields.size() > 0) {%],[%}%]
    [%for (field in self.inputPort.fields) {%]  
    "[%=field.name%]"[%if (hasMore) {%],[%}%]
    [%}%]
  ],
  "joineePortLookupList": [
    null,
    [%for (field in self.joineePort.fields) {%]  
    "[%=field.name%]"[%if (hasMore) {%],[%}%]
    [%}%]
  ],
  "transformationOutPort": [
    [%for (field in self.outputPort.fields) {%]  
    [%=field.declaration()%][%if (hasMore) {%],[%}%]
    [%}%]  
  ],
  "fieldLinks": [
    [%var links = Sequence{};
    for (field:ProjectionField in self.outputPort.fields) {
        for (source in field.sourceFields) {
            links.add(Sequence {source, field});
        }
    }%]
    [%for (link in links) {%]  
    {
      "fieldName": "[%=link[1].name%]",
      "linkType": "[%=link[0].dataSet.~type%]",
      "sourceField": "[%=link[0].name%]",
      "optionid": "output_[%=link[0].name%]"
    }[%if (hasMore) {%],[%}%]
    [%}%]  
  ],
  "joinType": "[%=self.joinType.toString()%]",
  "joinKeyFields": [
    [%for (keyField in self.keyFields) {%]  
    {
      "key": "[%=keyField%]",
      "joinKey": "[%=self.joineeKeyFields[loopCount - 1]%]"
    }[%if (hasMore) {%],[%}%]
    [%}%]  
  ],
  "checkpoint": [%=self.checkpoint%],
  "attrs": {
    ".label": {
      "text": "[%=self.name%]"
    }
  }
}
[%}%]

[%@template
operation SparkSQL declaration(){%]
{
  "type": "devs.transformation.SparkSQL",
  "size": {
    "width": 81.25,
    "height": 65
  },
  "position": {
    "x": [%=self.~x%],
    "y": [%=self.~y%]
  },
  "inPorts": [
        [%for (port in self.sqlPorts) {%]
    	"[%=port.`alias`%]"[%if (hasMore) {%],[%}%] 
    	[%}%]
  ],
  "outPorts": [
	"out"
  ],
  "statement": "[%=escape(self.statement)%]",
  "explain": [%=self.explain%],
  "tooltip": "Data <br>Spark SQL<br>",
  "id": "[%=self.getId()%]",
  "name": "[%=self.name%]",
  "transformationInputPort": "",
  "sqlPorts": [
  	[%for (port in self.sqlPorts) {%]
  	{
  	"alias": "[%=port.`alias`%]",
  	[%
  		var transformation = S.allContents().first();
  		for (transition in transformation.transitions) {
  			if (self.getId() == transition.finish.~step.getId() and (port.`alias` == transition.finish.~type))  {%]
  	"sourceId": "[%=transition.start.~step.getId()%]",
  			[%}
  		} 		
  	 %] 
  	"fields": [
  		[%for (field in port.fields) {%]  
    	[%=field.declaration()%][%if (hasMore) {%],[%}%]
    	[%}%] 
  		]
  	}[%if (hasMore) {%],[%}%]
    [%}%]
  ],
  "transformationOutPort": [
    [%for (field in self.outputPort.fields) {%]  
    [%=field.declaration()%][%if (hasMore) {%],[%}%]
    [%}%]  
  ],
  "checkpoint": [%=self.checkpoint%],
  "embeds": "",
      "z": 2,
      "attrs": {
        ".label": {
          "text": "[%=self.name%]"
        },
        ".outPorts>.port0>.port-label": {
          "text": "out"
        },
        ".outPorts>.port0>.port-body": {
          "port": {
            "id": "out",
            "type": "out"
          }
        },
        ".outPorts>.port0": {
          "ref": ".body",
          "ref-y": 0.5
        }[%if (not self.sqlPorts.isEmpty()) {%],[%}%]
        
        [%for (port in self.sqlPorts) {%]      
        ".inPorts>.port[%=loopCount - 1%]>.port-label": {
        	"text": "[%=port.`alias`%]"
        },
        ".inPorts>.port[%=loopCount - 1%]>.port-body": {
          "port": {
            "id": "[%=port.`alias`%]",
            "type": "in"
          }
        },
        "inPorts>.port[%=loopCount - 1%]": {
        	"ref": ".body",
          	"ref-y": [%=((1.0 / self.sqlPorts.size()) / 2) * loopCount + 1%]
        }[%if (hasMore) {%],[%}%] 
        [%}%]
      }
    }
[%}%]

[%@template
operation Union declaration(){%]
{
  "type": "devs.transformation.Union",
  "size": {
    "width": 81.25,
    "height": 65
  },
  "position": {
    "x": [%=self.~x%],
    "y": [%=self.~y%]
  },
  "inPorts": [
    "in",
    "union"
  ],
  "outPorts": [
    "out"
  ],
  "tooltip": "Data <br>Union<br>",
  "id": "[%=self.getId()%]",
  "name": "[%=self.name%]",
  "in_source": "[%=getInSource(self)%]",
  "union_source": "[%=getUnionSource(self)%]",
  "transformationInputPort": [
    [%for (field in self.inputPort.fields) {%]  
    [%=field.declaration()%][%if (hasMore) {%],[%}%]
    [%}%]  
  ],
  "transformationUnionPort": [
    [%for (field in self.unionPort.fields) {%]  
    [%=field.declaration()%][%if (hasMore) {%],[%}%]
    [%}%]  
  ],
  "inputPortLookupList": [
    null[%if (self.inputPort.fields.size() > 0) {%],[%}%]
    [%for (field in self.inputPort.fields) {%]  
    "[%=field.name%]"[%if (hasMore) {%],[%}%]
    [%}%]
  ],
  "unionPortLookupList": [
    null,
    [%for (field in self.unionPort.fields) {%]  
    "[%=field.name%]"[%if (hasMore) {%],[%}%]
    [%}%]
  ],
  "transformationOutPort": [
    [%for (field in self.outputPort.fields) {%]  
    [%=field.declaration()%][%if (hasMore) {%],[%}%]
    [%}%]  
  ],
  "fieldLinks": [
    [%for (field:UnionField in self.outputPort.fields) {%]  
    [%if (field.inputPortField.isDefined()) {%]
    {
      "fieldName": "[%=field.name%]",
      "linkType": "[%=field.inputPortField.dataSet.~type%]",
      "sourceField": "[%=field.inputPortField.name%]",
      "optionid": "[%=field.inputPortField.dataSet.~type%]_[%=field.inputPortField.name%]"
    }[%if (hasMore or field.unionPortField.isDefined()) {%],[%}%]
    [%}%]  
    [%if (field.unionPortField.isDefined()) {%]
    {
      "fieldName": "[%=field.name%]",
      "linkType": "[%=field.unionPortField.dataSet.~type%]",
      "sourceField": "[%=field.unionPortField.name%]",
      "optionid": "[%=field.unionPortField.dataSet.~type%]_[%=field.unionPortField.name%]"
    }[%if (hasMore) {%],[%}%]
    [%}%]  
    [%}%]  
  ],
  "checkpoint": [%=self.checkpoint%],
  "attrs": {
    ".label": {
      "text": "[%=self.name%]"
    }
  }
}
[%}%]
[%@template
operation TransformationStep declaration(){
  throw "Unknown TransformationStep: " + self.toString();
}%]
[%@template
operation LocalTarget declaration(){%]
{
  "type": "devs.transformation.LocalTarget",
  "size": {
    "width": 81.25,
    "height": 65
  },
  "position": {
    "x": [%=self.~x%],
    "y": [%=self.~y%]
  },
  "inPorts": [
    "in"
  ],
  "id": "[%=self.getId()%]",
  "name": "[%=self.name%]",
  "embeds": "",
  "in_source": "[%=getInSource(self)%]",
  "targetInputPort": [
    [%for (field in self.inputPort.fields) {%]  
    [%=field.declaration()%][%if (hasMore) {%],[%}%]
    [%}%]  
  ],
  "inputPortLookupList": [
    null[%if (self.inputPort.fields.size() > 0) {%],[%}%]
    [%for (field in self.inputPort.fields) {%]  
    "[%=field.name%]"[%if (hasMore) {%],[%}%]
    [%}%]
  ],
  "targetTableFields": [
    [%for (mapping in self.inputFieldsMapping) {%]  
    {
      "inputFieldName": "[%=mapping.inputFieldName%]",
      "targetColumnName": "[%=mapping.targetColumnName%]",
      "keyField": [%=mapping.keyField == true%]
    }[%if (hasMore) {%],[%}%]
    [%}%]
  ],
  "localFileName": "[%=escape(self.localFileName)%]",
  "localFileFormat": "[%=self.localFileFormat.toString()%]",
  "deleteBeforeSave": [%=self.deleteBeforeSave == true%],
  "saveMode": "[%=self.saveMode.toString()%]",
  "options": [
    [%for (option in self.options) {%]  
    {
      "key": "[%=option.key%]",
      "value": "[%=option.value%]"
    }[%if (hasMore) {%],[%}%]
    [%}%]
  ],
  "partitions": [
    [%for (partition in self.partitions) {%]  
    "[%=partition%]"[%if (hasMore) {%],[%}%]
    [%}%]
  ],
  "attrs": {
    ".label": {
      "text": "[%=self.name%]"
    }
  }
}
[%}%]
[%@template
operation CSVTarget declaration(){%]
{
  "type": "devs.transformation.CSVTarget",
  "size": {
    "width": 81.25,
    "height": 65
  },
  "position": {
    "x": [%=self.~x%],
    "y": [%=self.~y%]
  },
  "inPorts": [
    "in"
  ],
  "id": "[%=self.getId()%]",
  "name": "[%=self.name%]",
  "embeds": "",
  "in_source": "[%=getInSource(self)%]",
  "targetInputPort": [
    [%for (field in self.inputPort.fields) {%]  
    [%=field.declaration()%][%if (hasMore) {%],[%}%]
    [%}%]  
  ],
  "inputPortLookupList": [
    null[%if (self.inputPort.fields.size() > 0) {%],[%}%]
    [%for (field in self.inputPort.fields) {%]  
    "[%=field.name%]"[%if (hasMore) {%],[%}%]
    [%}%]
  ],
  "hdfs": [%=self.hdfs == true%],
  "path": "[%=escape(escape(self.path))%]",
  "header": [%=self.header == true%],
  "charset": "[%=self.charset%]",
  "delimiter": "[%=escape(self.delimiter)%]",
  "quote": "[%=escape(self.quote)%]",
  "escape": "[%=escape(self.escape)%]",
  "comment": "[%=escape(self.comment)%]",
  "dateFormat": "[%=escape(self.dateFormat)%]",
  "nullValue": "[%=escape(self.nullValue)%]",
  "codec": "[%=self.codec.toString()%]",
  "quoteMode": "[%=self.quoteMode.toString()%]",
  "attrs": {
    ".label": {
      "text": "[%=self.name%]"
    }
  }
}
[%}%]
[%@template
operation XMLTarget declaration(){%]
{
  "type": "devs.transformation.XMLTarget",
  "size": {
    "width": 81.25,
    "height": 65
  },
  "position": {
    "x": [%=self.~x%],
    "y": [%=self.~y%]
  },
  "inPorts": [
    "in"
  ],
  "id": "[%=self.getId()%]",
  "name": "[%=self.name%]",
  "embeds": "",
  "in_source": "[%=getInSource(self)%]",
  "targetInputPort": [
    [%for (field in self.inputPort.fields) {%]  
    [%=field.declaration()%][%if (hasMore) {%],[%}%]
    [%}%]  
  ],
  "inputPortLookupList": [
    null[%if (self.inputPort.fields.size() > 0) {%],[%}%]
    [%for (field in self.inputPort.fields) {%]  
    "[%=field.name%]"[%if (hasMore) {%],[%}%]
    [%}%]
  ],
  "hdfs": [%=self.hdfs == true%],
  "path": "[%=escape(escape(self.path))%]",
  "charset": "[%=self.charset%]",
  "rowTag": "[%=escape(self.rowTag)%]",
  "rootTag": "[%=escape(self.rootTag)%]",
  "attributePrefix": "[%=escape(self.attributePrefix)%]",
  "valueTag": "[%=escape(self.valueTag)%]",
  "nullValue": "[%=escape(self.nullValue)%]",
  "compression": "[%=self.compression.toString()%]",
  "attrs": {
    ".label": {
      "text": "[%=self.name%]"
    }
  }
}
[%}%]
[%@template
operation TableTarget declaration() {%]
{
  "type": "devs.transformation.TableTarget",
  "size": {
    "width": 81.25,
    "height": 65
  },
  "position": {
    "x": [%=self.~x%],
    "y": [%=self.~y%]
  },
  "inPorts": [
    "in"
  ],
  "id": "[%=self.getId()%]",
  "name": "[%=self.name%]",
  "embeds": "",
  "in_source": "[%=getInSource(self)%]",
  "targetInputPort": [
    [%for (field in self.inputPort.fields) {%]  
    [%=field.declaration()%][%if (hasMore) {%],[%}%]
    [%}%]  
  ],
  "inputPortLookupList": [
    null[%if (self.inputPort.fields.size() > 0) {%],[%}%]
    [%for (field in self.inputPort.fields) {%]  
    "[%=field.name%]"[%if (hasMore) {%],[%}%]
    [%}%]
  ],
  "context": "[%=self.context.get('name')%]",
  "targetTableName": "[%=escape(self.tableName)%]",
  "preSQL": "[%=escape(self.preSQL)%]",
  "postSQL": "[%=escape(self.postSQL)%]",
  "targetType": "[%=self.targetType.toString()%]",
  "clear": [%=self.clear == true%],
  "targetTableFields": [
    [%for (mapping in self.inputFieldsMapping) {%]  
    {
      "inputFieldName": "[%=mapping.inputFieldName%]",
      "targetColumnName": "[%=mapping.targetColumnName%]",
      "keyField": [%=mapping.keyField == true%]
    }[%if (hasMore) {%],[%}%]
    [%}%]
  ],
  "attrs": {
    ".label": {
      "text": "[%=self.name%]"
    }
  }
}
[%}%]
[%@template
operation StoredProcedureTarget declaration(){%]
{
  "type": "devs.transformation.ProcedureTarget",
  "size": {
    "width": 81.25,
    "height": 65
  },
  "position": {
    "x": [%=self.~x%],
    "y": [%=self.~y%]
  },
  "inPorts": [
    "in"
  ],
  "id": "[%=self.getId()%]",
  "name": "[%=self.name%]",
  "embeds": "",
  "in_source": "[%=getInSource(self)%]",
  "targetInputPort": [
    [%for (field in self.inputPort.fields) {%]  
    [%=field.declaration()%][%if (hasMore) {%],[%}%]
    [%}%]  
  ],
  "inputPortLookupList": [
    null[%if (self.inputPort.fields.size() > 0) {%],[%}%]
    [%for (field in self.inputPort.fields) {%]  
    "[%=field.name%]"[%if (hasMore) {%],[%}%]
    [%}%]
  ],
  "context": "[%=self.context.get('name')%]",
  "targetProcedureName": "[%=escape(self.storedProcedure)%]",
  "catalogName": "[%=escape(self.catalogName)%]",
  "preSQL": "[%=escape(self.preSQL)%]",
  "postSQL": "[%=escape(self.postSQL)%]",
  "procedureParams": [
    [%for (mapping in self.inputFieldsMapping) {%]  
    {
      "inputFieldName": "[%=mapping.inputFieldName%]",
      "paramName": "[%=mapping.paramName%]"
    }[%if (hasMore) {%],[%}%]
    [%}%]
  ],
  "attrs": {
    ".label": {
      "text": "[%=self.name%]"
    }
  }
}
[%}%]
[%@template
operation Target declaration(){
  throw "Unknown Target: " + self.toString();
}%]
[%@template
operation Transition declaration(){%]
{
  "type": "devs.transformation.Flow",
  "id": "[%=self.getId()%]",
  "embeds": "",
  "source": {
    "id": "[%=self.start.~step.getId()%]",
    "port": "[%=self.start.~type%]"
  },
  "target": {
    "id": "[%=self.finish.~step.getId()%]",
    "port": "[%=self.finish.~type%]"
  },
  "attrs": {}
}
[%}%]
[%@template
operation ProjectionField declaration(){%]
{
  "name": "[%=self.name%]",
  "dtype": "[%=self.dataTypeDomain.toString()%]",
  "fieldOperationType": "[%=self.fieldOperationType.toString()%]",
  "expression": "[%=escape(self.expression)%]"
}
[%}%]
[%@template
operation Field declaration(){%]
{
  "name": "[%=self.name%]",
  "dtype": "[%=self.dataTypeDomain.toString()%]"
}
[%}%]
[%@template
operation XMLSourceField declaration(){%]
{
  "name": "[%=self.name%]",
  "xmlPath": "[%=self.xmlPath%]",
  "dtype": "[%=self.dataTypeDomain.toString()%]"
}
[%}%]
[%@template
operation JSONSourceField declaration(){%]
{
  "name": "[%=self.name%]",
  "jsonPath": "[%=self.jsonPath%]",
  "dtype": "[%=self.dataTypeDomain.toString()%]"
}
[%}%]
[%@template
operation getId(obj){%][%=obj.get("_type_")%]![%=obj.get("e_id")%][%}%]
[%
operation escape(s: String): String {
    if (s == null)
        return null;
    return s.replace("\\\\", "\\\\\\\\").replace("\n", "\\\\n").replace('"', '\\\\"').replace('\t', '\\\\t');
}

operation TransformationStep getId(){
    return getId(self);
}

operation Target getId(){
    return getId(self);
}

operation Transition getId(){
    return getId(self.start.~step) + "->" + getId(self.finish.~step);
}
operation Transformation transitionByStart(port) {
    for (transition in self.transitions) {
        if (transition.start.get("e_id") = port.get("e_id")) {
            transition.start = port;
            return transition;
        }
    }
    throw "transitionByStart";
    return null;
}
operation Transformation transitionByFinish(port) {
    for (transition in self.transitions) {
        if (transition.finish.get("e_id") = port.get("e_id")) {
            transition.finish = port;
            return transition;
        }
    }
    return null;
}
operation Transformation transitionFinishBySqlPort(sqlPort) {
	for (transition in self.transitions) {
		if (transition.finish.get("e_id") == sqlPort.get("e_id")) {
			transition.finish = sqlPort;
			return transition;
		}
	}
}
operation getInSource(step){
  if (not step.inputPort.~transition.isDefined()) {
    return null;
  }
  return step.inputPort.~transition.start.~step.getId();
}
operation getJoinSource(step){
  if (not step.joineePort.~transition.isDefined()) {
    return null;
  }
  return step.joineePort.~transition.start.~step.getId();
}
operation getUnionSource(step){
  if (not step.unionPort.~transition.isDefined()) {
    return null;
  }
  return step.unionPort.~transition.start.~step.getId();
}
operation placeNodes(nodes, x, y) {
    var maxx = x;
    var maxy = y;
    for (node in nodes) {
        var positions = placeNode(node, x, maxy);
        maxx = Sequence{maxx, positions[0]}.max();
        maxy = positions[1];
    }
    return Sequence{maxx, maxy};
}
operation placeNode(node, x, y) {
    var positions = placeNodes(getSources(node), x, y);
    if (not node.~x.isDefined()) {
        node.~x = positions[0];
    }
    if (not node.~y.isDefined()) {
        node.~y = Sequence{y, (positions[1] + y - 125)/2}.max();
    }
    return Sequence{node.~x + 160, Sequence{positions[1], node.~y + 125}.max()};
}
operation getSources(node) {
    var result = Sequence{};
    for (transition in node.transformation.transitions) {
        if (transition.finish.~step = node) {
            if (transition.start.~step.isDefined()) {
                result.add(transition.start.~step);
            }
        }
    }
    return result;
}
%]
[%@template
operation HiveTarget declaration() {%]
{
  "type": "devs.transformation.HiveTarget",
  "size": {
    "width": 81.25,
    "height": 65
  },
  "position": {
    "x": [%=self.~x%],
    "y": [%=self.~y%]
  },
  "inPorts": [
    "in"
  ],
  "id": "[%=self.getId()%]",
  "name": "[%=self.name%]",
  "embeds": "",
  "in_source": "[%=getInSource(self)%]",
  "targetInputPort": [
    [%for (field in self.inputPort.fields) {%]  
    [%=field.declaration()%][%if (hasMore) {%],[%}%]
    [%}%]  
  ],
  "inputPortLookupList": [
    null[%if (self.inputPort.fields.size() > 0) {%],[%}%]
    [%for (field in self.inputPort.fields) {%]  
    "[%=field.name%]"[%if (hasMore) {%],[%}%]
    [%}%]
  ],
  [%if (self.context.isDefined()) {%]
	"context": "[%=self.context.name%]",
	[%}%]
  "targetTableName": "[%=escape(self.tableName)%]",
  "preSQL": "[%=escape(self.preSQL)%]",
  "postSQL": "[%=escape(self.postSQL)%]",
  "hiveTargetType": "[%=self.hiveTargetType.toString()%]",
  "clear": [%=self.clear == true%],
  "targetTableFields": [
    [%for (mapping in self.inputFieldsMapping) {%]  
    {
      "inputFieldName": "[%=mapping.inputFieldName%]",
      "targetColumnName": "[%=mapping.targetColumnName%]",
      "keyField": [%=mapping.keyField == true%]
    }[%if (hasMore) {%],[%}%]
    [%}%]
  ],
  "attrs": {
    ".label": {
      "text": "[%=self.name%]"
    }
  },
  "partitions": [
    [%for (partition in self.partitions) {%]  
    "[%=partition%]"[%if (hasMore) {%],[%}%]
    [%}%]
  ]
}
[%}%]
[%@template
operation StreamTarget declaration(){%]
{
  "type": "devs.transformation.StreamTarget",
  "size": {
    "width": 81.25,
    "height": 65
  },
  "position": {
    "x": [%=self.~x%],
    "y": [%=self.~y%]
  },
  "inPorts": [
    "in"
  ],
  "id": "[%=self.getId()%]",
  "name": "[%=self.name%]",
  "z": 1,
  "angle": 0,
  "in_source": "[%=getInSource(self)%]",
  "targetInputPort": [
    [%for (field in self.inputPort.fields) {%]  
    [%=field.declaration()%][%if (hasMore) {%],[%}%]
    [%}%]  
  ],
  "inputPortLookupList": [
    null[%if (self.inputPort.fields.size() > 0) {%],[%}%]
    [%for (field in self.inputPort.fields) {%]  
    "[%=field.name%]"[%if (hasMore) {%],[%}%]
    [%}%]
  ],
  "localFileFormat": "[%=self.localFileFormat.toString()%]",
  "outputMode": "[%=self.outputMode.toString()%]",
  "trigger": [%=self.trigger.toString()%],
  "triggerUnits": "[%=self.triggerUnits.toString()%]",
  "timeoutMs": [%=self.timeoutMs.toString()%],
  "options": [
    [%for (option in self.options) {%]  
    {
      "key": "[%=option.key%]",
      "value": "[%=option.value%]"
    }[%if (hasMore) {%],[%}%]
    [%}%]
  ],
  "partitions": [
    [%for (partition in self.partitions) {%]  
    "[%=partition%]"[%if (hasMore) {%],[%}%]
    [%}%]
  ],
  "attrs": {
    ".label": {
      "text": "[%=self.name%]"
    }
  }
}
[%}%]
[%@template
operation KafkaSource declaration(){%]
{
  "type": "devs.transformation.KafkaSource",
  "size": {
    "width": 81.25,
    "height": 65
  },
  "position": {
    "x": [%=self.~x%],
    "y": [%=self.~y%]
  },
  "id": "[%=self.getId()%]",
  "name": "[%=self.name%]",
  "z": 1,
  "angle": 0,
  "sourceOutPort": [
    [%for (field in self.outputPort.fields) {%]  
    [%=field.declaration()%][%if (hasMore) {%],[%}%]
    [%}%]  
  ],
  "sampleSize": [%=self.sampleSize%],
  "checkpoint": [%=self.checkpoint%],
  "bootstrapServers": "[%=self.bootstrapServers%]",
  "consumeType": "[%=self.kafkaConsumeType%]",
  "consumeOptionValue": "[%=self.consumeOptionValue%]",
  "options": [
    [%for (option in self.options) {%]  
    {
      "key": "[%=option.key%]",
      "value": "[%=option.value%]"
    }[%if (hasMore) {%],[%}%]
    [%}%]
  ],
  "attrs": {
    ".label": {
      "text": "[%=self.name%]"
    }
  }
}
[%}%]
[%@template
operation KafkaTarget declaration(){%]
{
  "type": "devs.transformation.KafkaTarget",
  "size": {
    "width": 81.25,
    "height": 65
  },
  "inPorts": [
    "in"
  ],
  "position": {
    "x": [%=self.~x%],
    "y": [%=self.~y%]
  },
  "id": "[%=self.getId()%]",
  "name": "[%=self.name%]",
  "z": 1,
  "angle": 0,
  "in_source": "[%=getInSource(self)%]",
  "targetInputPort": [
    [%for (field in self.inputPort.fields) {%]  
    [%=field.declaration()%][%if (hasMore) {%],[%}%]
    [%}%]  
  ],
  "inputPortLookupList": [
    null[%if (self.inputPort.fields.size() > 0) {%],[%}%]
    [%for (field in self.inputPort.fields) {%]  
    "[%=field.name%]"[%if (hasMore) {%],[%}%]
    [%}%]
  ],
  "messageKey": "[%=self.messageKey%]",
  "messageValue": "[%=self.messageValue%]",
  "bootstrapServers": "[%=self.bootstrapServers%]",
  "topicName": "[%=self.topicName%]",
  "props": [
    [%for (p in self.props) {%]  
    {
      "key": "[%=p.key%]",
      "value": "[%=p.value%]"
    }[%if (hasMore) {%],[%}%]
    [%}%]
  ],
  "attrs": {
    ".label": {
      "text": "[%=self.name%]"
    }
  }
}
[%}%]
[%@template
operation XMLSource declaration(){%]
{
  "type": "devs.transformation.XMLSource",
  "size": {
    "width": 81.25,
    "height": 65
  },
  "position": {
    "x": [%=self.~x%],
    "y": [%=self.~y%]
  },
  "id": "[%=self.getId()%]",
  "name": "[%=self.name%]",
  "z": 1,
  "angle": 0,
  "sourceOutPort": [
    [%for (field in self.outputPort.fields) {%]  
    [%=field.declaration()%][%if (hasMore) {%],[%}%]
    [%}%]  
  ],
  "hdfs": [%=self.hdfs%],
  "path": [%=self.path%],
  "charset": "[%=self.charset%]",
  "rowTag": "[%=self.rowTag%]",
  "samplingRatio": "[%=self.samplingRatio%]",
  "explodeFields": [
    [%for (explodeField in self.explodeFields) {%]  
    {
      "alias": "[%=explodeField.`alias`%]",
      "explode": "[%=explodeField.explode%]"
    }[%if (hasMore) {%],[%}%]
    [%}%]
  ],
  "excludeAttribute": "[%=self.excludeAttribute%]",  
  "treatEmptyValuesAsNulls": "[%=self.treatEmptyValuesAsNulls%]",
  "mode": "[%=self.mode%]",
  "columnNameOfCorruptRecord": "[%=self.columnNameOfCorruptRecord%]",
  "attributePrefix": "[%=self.attributePrefix%]",
  "valueTag": "[%=self.valueTag%]",
  "ignoreSurroundingSpaces": "[%=self.ignoreSurroundingSpaces%]",
  "attrs": {
    ".label": {
      "text": "[%=self.name%]"
    }
  }
}
[%}%]
[%@template
operation AVROSource declaration(){%]
{
  "type": "devs.transformation.AVROSource",
  "size": {
    "width": 81.25,
    "height": 65
  },
  "position": {
    "x": [%=self.~x%],
    "y": [%=self.~y%]
  },
  "id": "[%=self.getId()%]",
  "name": "[%=self.name%]",
  "z": 1,
  "angle": 0,
  "sourceOutPort": [
    [%for (field in self.outputPort.fields) {%]  
    [%=field.declaration()%][%if (hasMore) {%],[%}%]
    [%}%]  
  ],
  "hdfs": [%=self.hdfs%],
  "path": [%=self.path%],
  "schemaHdfs": [%=self.schemaHdfs%],
  "schemaPath": [%=self.schemaPath%],    
  "explodeFields": [
    [%for (explodeField in self.explodeFields) {%]  
    {
      "alias": "[%=explodeField.`alias`%]",
      "explode": "[%=explodeField.explode%]"
    }[%if (hasMore) {%],[%}%]
    [%}%]
  ],
  "attrs": {
    ".label": {
      "text": "[%=self.name%]"
    }
  }
}
[%}%]