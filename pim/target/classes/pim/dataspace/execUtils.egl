[%operation QueryDataset register(registerName) {%]
  spark.read.format("jdbc").options(Map(
             "url" -> "[%=self.connection.url%]",
             "dbtable" -> ("(" + s"""[%=interpolateParameters(self.query)%]""" + ") t"),
             "driver" -> "[%=self.connection.`driver`%]",
             [%=userPwdPair(self.connection)%]
          )).load().createOrReplaceTempView("[%=registerName%]")
[%}%]

[%operation TableDataset register(registerName) {%]
  spark.read.format("jdbc").options(Map(
             "url" -> "[%=self.connection.url%]",
             "dbtable" -> ("(select * from " + "[%=self.schema%].[%=self.tableName%]" + ") t"),
             "driver" -> "[%=self.connection.`driver`%]",
             [%=userPwdPair(self.connection)%]
          )).load().createOrReplaceTempView("[%=registerName%]")
[%}%]

[%operation LinkedDataset register(registerName) {
  var dsl = self.linkTo;
  while (true) {
    if (not dsl.isKindOf(LinkedDataset)) {
      break;
    }
    dsl = dsl.linkTo;
  }
  dsl.register(registerName);
  %]
[%}%]

[%operation HiveDataset register(registerName) {%]
  spark.sql("""select * from [%=self.db%].[%=self.table%]""").createOrReplaceTempView("[%=registerName%]")
[%}%]

[%operation HiveExternalDataset register(registerName) {%]
  spark.sql("""select * from [%=self.db%].[%=self.table%]""").createOrReplaceTempView("[%=registerName%]")
[%}%]

[%operation ReferenceDataset register(registerName) {%]
  spark.read.format("jdbc").options(Map(
             "url" -> "[%=self.workspace.cluster.referenceConnection.url%]",
             "dbtable" -> ("(" + "select * from [%=self.name%]" + ") t"),
             "driver" -> "[%=self.workspace.cluster.referenceConnection.`driver`%]",
             [%=userPwdPair(self.workspace.cluster.referenceConnection)%]
          )).load().createOrReplaceTempView("[%=registerName%]")
[%}%]

[%operation Dataset register(registerName) {%]
  spark.sql("""select * from [%=self.workspace.name%].[%=self.shortName%]""").createOrReplaceTempView("[%=registerName%]")
[%}%]

[%
operation interpolateParameters(sql: String) {
    var pattern = Native("java.util.regex.Pattern");
    var matcher = pattern.compile("[&][a-zA-Z_][a-zA-Z\\d_]*").matcher(sql);
    var params = Sequence{};
    while (matcher.find()) {
        params.add(sql.substring(matcher.start() + 1, matcher.end()));
    }
    for (param in params) {
        var replaceValue = "'${jobParameters(" + '"' + param + '"' + ").asInstanceOf[String]}'";
        sql = sql.replace("&" + param, replaceValue.replace("[$]", "\\\\\\$"));
    }
    return sql;
}
%]

[%
operation userPwdPair(cn) {
  if (cn.connectAsLoggedUser == true) { %]
    "user" -> "[%=user.get("userName")%]",
    "password" -> "[%=user.get("password")%]"
  [%
  } else { %]
    "user" -> "[%=cn.user%]",
    "password" -> "[%=cn.password%]"
[%
  }
}
%]