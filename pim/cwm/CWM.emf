@GenModel(documentation="Object Management Group, Inc.
250 First Ave. Suite 201
Needham, MA 02494
U.S.A.

Ph: +1-781-444 0404
Fax: +1-781-444 0320
Email: info@omg.org

Web:  http://www.omg.org
")
@namespace(uri="http:///orgomg.ecore", prefix="orgomg")
package orgomg;

@GenModel(documentation="The amount of data in a given organization doubles every five years. Most organizations suffer from an overabundance of redundant and inconsistent data that is difficult to manage effectively, to access, and to use for decision making purposes. Data warehousing provides an excellent approach for transforming data into useful andreliable information to support the business decision making process and to achieve business intelligence. One of the most important aspects of data warehousing is metadata. Metadata is used for building, maintaining, managing, and using the data warehouse. Unfortunately, the proliferation of data management and analysis tools has resulted in almost as many different representations and treatments of metadata as there are tools.

Since every data management and analysis tool requires different metadata and a different metadata model (known as a metamodel) to solve the data warehouse metadata problem, it is simply not possible to have a single metadata repository thatimplements a single metamodel for all the metadata in an organization. Instead, what is needed is a standard for interchange of warehouse metadata.

The CWM is a response to these needs. It provides a framework for representing metadata about data sources, data targets, transformations and analysis, and the processes and operations that create and manage warehouse data and provide lineage information about its use.

The CWM Metamodel consists of a number of sub-metamodels which represent common warehouse metadata in the following major areas of interest to data warehousing and business intelligence:

Data Resources

These include metamodels that represent object-oriented, relational, record, multidimensional, and XML data resources. In the case of  object-oriented data resource, CWM reuses the base object model.

Data Analysis

These include metamodels that represent data transformations, OLAP (On-line Analytical Processing), data mining, information visualization, and business nomenclature.

Warehouse Management

These include metamodels that represent warehouse processes and results of warehouse operations.

The CWM Metamodel is designed to maximize the reuse of Object Model (a subset of UML) and the sharing of common modeling constructs where possible. The most prominent example is that CWM reuses/depends on Object Model for representing object-oriented data resources. In addition, where applicable, key elements of the metamodels for other types of data resources all subclass from the same model elements in Object Model.

(Text appearing in the CWM package is taken from Volume 1 of the Common Warehouse Metamodel specification, document number ad/2001-02-01, published by the Object Management Group.  The complete document is available from the OMG web site at www.omg.org)")
@namespace(uri="http:///orgomg/cwm.ecore", prefix="orgomg.cwm")
package cwm {
  @GenModel(documentation="The CWM ObjectModel provides basic constructs for creating and describing metamodel classes in all other CWM packages. The ObjectModel is a subset of UML that includes only those features that are needed for creating and describing the CWM. Defining a subset of UML containing only those things needed by CWM allows the CWM to leverage UML?s concepts and modeling power without burdening implementations with the full breadth of UML?s capabilities.

The specification defined in this chapter, where applicable, is based on and taken from the UML specification.

The CWM uses packages to control complexity and create groupings of logically interrelated classes. The ObjectModel is a collection of packages that are described together because they all provide basic metamodel constructs to other CWM packages. A subsection of this chapter is devoted to each of the ObjectModel packages. Because it relies on no other package, the Core package is described first, followed by the Behavioral, Instance, and Relationships packages. Each of the subsequent packages depends only on the Core package; there are no other dependencies between the
ObjectModel packages.

Organizing the ObjectModel in this fashion allows the individual metamodel packages to be understood and used independently of each other without sacrificing their common purpose. For example, the CWM Record metamodel depends only on the ObjectModel?s Core and Instance packages for its definition; other ObjectModel packages are not needed for defining records.")
  @namespace(uri="http:///orgomg/cwm/objectmodel.ecore", prefix="orgomg.cwm.objectmodel")
  package objectmodel {
    @GenModel(documentation="The Core metamodel depends on no other packages.

The ObjectModel Core metamodel contains basic metamodel classes and associations used by all other CWM metamodel packages, including other ObjectModel packages

OCL Representation of Core Constraints

Operations

The operation allFeatures results in a Set containing all Features of the Classifier itself and all its inherited Features.
   allFeatures : Set(Feature);
   allFeatures = self.feature->union(self.parent.oclAsType(Classifier).allFeatures)

The operation allAttributes results in a Set containing all Attributes of the Classifier itself and all its inherited Attributes.
   allAttributes : set(Attribute);
   allAttributes = self.allFeatures->select(f | f.oclIsKindOf(Attribute))

The operation specification yields the set of Classifiers that the current Classifier realizes.
   specification: Set(Classifier)
   specification = self.clientDependency->
   select(d | d.stereotype.name = \"realization\"
      and d.supplier.oclIsKindOf(Classifier)).supplier.oclAsType(Classifier)

The operation parent returns a Set containing all direct parents of a Classifier.
   parent : Set(Classifier);
   parent = self.generalization.parent

The operation allParents returns a Set containing all the Classifiers inherited by this Classifier (the transitive closure), excluding the Classifier itself.
   allParents : Set(Classifier);
   allParents = self.parent->union(self.parent.allParents)

The operation allContents returns a Set containing all ModelElements contained in the Classifier together with the contents inherited from its parents.
   allContents : Set(ModelElement);
   allContents = self.contents->union(self.parent.allContents->
   select(e | e.elementOwnership.visibility = #public or 
      e.elementOwnership.visibility = #protected))

The operation supplier results in a Set containing all direct suppliers of the ModelElement.
   supplier : Set(ModelElement);
   supplier = self.clientDependency.supplier

The operation allSuppliers results in a Set containing all the ModelElements that are suppliers of this ModelElement, including the suppliers of these Model Elements. This is the transitive closure.
   allSuppliers : Set(ModelElement);
   allSuppliers = self.supplier->union(self.supplier.allSuppliers)

The operation contents results in a Set containing all ModelElements contained by the Namespace.
   contents : Set(ModelElement)
   contents = self.ownedElement -> union(self.namespace.contents)

The operation allContents results in a Set containing all ModelElements contained by the Namespace.
   allContents : Set(ModelElement);
   allContents = self.contents

The operation allVisibleElements results in a Set containing all ModelElements visible outside of the Namespace.
   allVisibleElements : Set(ModelElement)
   allVisibleElements = self.allContents -> select(e |
      e.elementOwnership.visibility = #public)

The operation allSurroundingNamespaces results in a Set containing all surrounding Namespaces.
   allSurroundingNamespaces : Set(Namespace)
   allSurroundingNamespaces =
      self.namespace->union(self.namespace.allSurroundingNamespaces)

The operation contents results in a Set containing the ModelElements owned by or imported by the Package.
   contents : Set(ModelElement)
   contents = self.ownedElement->union(self.importedElement)

The operation allImportedElements results in a Set containing the ModelElements imported by the Package.
   allImportedElements : Set(ModelElement)
   allImportedElements = self.importedElement

The operation allContents results in a Set containing the ModelElements owned by or imported by the Package.
   allContents : Set(ModelElement)
   allContents = self.contents

Constraints

[C-3-1] A Constraint cannot be applied to itself.
context Constraint inv:
not self.constrainedElement->includes (self)

[C-3-2] A DataType cannot contain any other ModelElements.
context DataType inv:
self.ownedElement->isEmpty

[C-3-3] Tags associated with a model element (directly via a property list or indirectly via a stereotype) must not clash with any meta attributes associated with the model element.
context ModelElement inv:
-- cannot be specified with OCL")
    @namespace(uri="http:///orgomg/cwm/objectmodel/core.ecore", prefix="orgomg.cwm.objectmodel.core")
    package core {
      @GenModel(documentation="An element is an atomic constituent of a model. In the metamodel, an Element is the top metaclass in the metaclass hierarchy. Element is an abstract metaclass.
")
      abstract class Element {
      }

      @GenModel(documentation="A model element is an element that is an abstraction drawn from the system being modeled.

In the metamodel, a ModelElement is a named entity in a Model. It is the base for all modeling metaclasses in the CWM. All other modeling metaclasses are either direct or indirect subclasses of ModelElement.")
      abstract class ModelElement extends Element {

        @GenModel(documentation="An identifier for the ModelElement within its containing Namespace.")
        @"htttp://talend.org/UiConstraints"(string.max.size="255")
        attr Name name;

        @GenModel(documentation="Specifies extent of the visibility of the ModelElement within its owning Namespace.")
        attr VisibilityKind visibility;

        @GenModel(documentation="Identifies Dependency instances in which the ModelElement acts as a client.")
        ref Dependency[*]#client clientDependency;

        @GenModel(documentation="The DependencySupplier association links Dependency instances with ModelElements that act as suppliers in the represented dependency relationship.")
        ref Dependency[*]#supplier supplierDependency;

        @GenModel(documentation="Identifies the Constraint instances that restrict the possible states that a ModelElement may take.")
        ref Constraint[*]#constrainedElement constraint;

        @GenModel(documentation="Identifies the Namespace, if any, that owns the ModelElement.")
        transient ref Namespace#ownedElement namespace;

        @GenModel(documentation="Identifies the Packages that import a ModelElement.")
        ref Package[*]#importedElement importer;

        @GenModel(documentation="Identifies the Stereotype instance that further defines the semantics of the ModelElement.")
        ref Stereotype#extendedElement stereotype;

        @GenModel(documentation="Identifies the set of TaggedValue instances that extend a ModelElement.")
        @"htttp://talend.org/UiConstraints"(string.max.size.Description="1000", string.max.size.Purpose="255", string.max.size.Author="255")
        val TaggedValue[*]#modelElement taggedValue;

        @GenModel(documentation="Identifies the Document instances relevant to a particular ModelElement.")
        ref foundation.businessinformation.Document[*]#modelElement document;

        @GenModel(documentation="Identifies the Description instances relevant for a particular ModelElement instance.")
        ref foundation.businessinformation.Description[*]#modelElement description;

        @GenModel(documentation="Identifies the ResponsibleParty instances relevant for a particular ModelElement instance.")
        ref foundation.businessinformation.ResponsibleParty[*]#modelElement responsibleParty;

        @GenModel(documentation="Identifies the ElementNode instances that represent a particular ModelElement in expressions.")
        ref foundation.expressions.ElementNode[*]#modelElement elementNode;

        @GenModel(documentation="Identifies the DataObjectSet")
        ref analysis.transformation.DataObjectSet[*]#element set;

        @GenModel(documentation="Rendered Objects referencing the Model Element.")
        ref analysis.informationvisualization.RenderedObject[*]#modelElement renderedObject;

        @GenModel(documentation="Identifies a VocabularyElement.")
        ref analysis.businessnomenclature.VocabularyElement[*]#modelElement vocabularyElement;

        @GenModel(documentation="Identifies a Measurement for a ModelElement.")
        ref management.warehouseoperation.Measurement[*]#modelElement measurement;

        @GenModel(documentation="Identifies a ChangeRequest for a ModelElement.")
        ref management.warehouseoperation.ChangeRequest[*]#modelElement changeRequest;

        @GenModel(documentation="Identifies the DASDLProperties that apply to a ModelElement.")
        ref cwmx.resource.dmsii.DASDLProperty[*]#owner dasdlProperty;
      }

      @GenModel(documentation="A namespace is a part of a model that contains a set of ModelElements each of whose
names designates a unique element within the namespace. 

In the metamodel, a Namespace is a ModelElement that can own other ModelElements, such as Classifiers. The name of each owned ModelElement must be unique within the Namespace. Moreover, each contained ModelElement is owned by at most one Namespace. The concrete subclasses of Namespace may have additional constraints on which kind of elements may be contained. 

Namespace is an abstract metaclass.

Note that explicit parts of a model element, such as the features of a Classifier, are not modeled as owned elements in a namespace. A namespace is used for unstructured contents such as the contents of a  package, or a class declared inside the scope of another class.")
      abstract class Namespace extends ModelElement {

        @GenModel(documentation="Identifies the ModelElements owned by a Namespace.")
        val ModelElement[*]#namespace ownedElement;
      }

      @GenModel(documentation="A classifier is an element that describes structural and behavioral features; it comes in several specific forms, including class, data type, interface, component, and others that are defined in other metamodel packages.

Classifier is often used as a type.

In the metamodel, a Classifier may declare a collection of Features, such as Attributes, Operations and Methods. It has a name, which is unique in the Namespace enclosing the Classifier. Classifier is an abstract metaclass.

Classifier is a child of Namespace. As a Namespace, a Classifier may declare other Classifiers nested in its scope. Nested Classifiers may be accessed by other Classifiers only if the nested Classifiers have adequate visibility. There are no data value or state consequences of nested Classifiers, i.e., it is not an aggregation or composition.")
      abstract class Classifier extends Namespace {

        @GenModel(documentation="An abstract Classifier is not instantiable.")
        attr Boolean isAbstract;

        @GenModel(documentation="Identifies the Features owned by a Classifier instance and provides their ordering.")
        val Feature[*]#owner feature;

        @GenModel(documentation="Identifies the set of StructuralFeatures for which the Classifier defines the type.")
        ref StructuralFeature[*]#type structuralFeature;

        @GenModel(documentation="Identifies the set of Parameter instances for which a particular Classifier acts as a type definition.")
        ref behavioral.Parameter[*]#type parameter;

        @GenModel(documentation="Identifies the set of Generalization instances in which the Classifier acts as a child
in the inheritance hierarchy.")
        ref relationships.Generalization[*]#child generalization;

        @GenModel(documentation="Identifies the set of Generalization instances in which the Classifier acts a parent in the inheritance hierarchy.")
        ref relationships.Generalization[*]#parent specialization;

        @GenModel(documentation="Identifies the set of Instances described by the Classifier.")
        ref instance.Instance[*]#classifier instance;

        @GenModel(documentation="Identifies the TypeAliases that have be defined for a particular Classifier instance.")
        ref foundation.datatypes.TypeAlias[*]#type alias;

        @GenModel(documentation="Identifies the ExpressionNode instances for which this Classifier acts as the type.")
        ref foundation.expressions.ExpressionNode[*]#type expressionNode;

        @GenModel(documentation="Identifies the TypeMapping instances in which a particular Classifier participates.")
        ref foundation.typemapping.TypeMapping[*]#sourceType mappingFrom;

        @GenModel(documentation="Identifies the TypeMapping instance of a particular Classifier instance.")
        ref foundation.typemapping.TypeMapping[*]#targetType mappingTo;

        @GenModel(documentation="Identifies the ClassifierMap")
        ref analysis.transformation.ClassifierMap[*]#source classifierMap;

        @GenModel(documentation="Identifies the ClassifierFeatureMap")
        ref analysis.transformation.ClassifierFeatureMap[*]#classifier cfMap;

        @GenModel(documentation="Identifies the Domains for which a Classifier instance acts as the base type.")
        ref cwmx.foundation.er.Domain[*]#baseType domain;

        @GenModel(documentation="Identifies the SimpleDimension.")
        ref cwmx.resource.express.SimpleDimension[*]#dataType simpleDimension;
      }

      @GenModel(documentation="A class is a description of a set of objects that share the same attributes, operations, methods, relationships, and semantics. A class may use a set of interfaces to specify collections of operations it provides to its environment. In the metamodel, a Class describes a set of objects sharing a collection of Features that are common to the set of objects.

The purpose of a Class is to declare a collection of Features that fully describe the structure and behavior of objects. Some Classes may not be directly instantiated. These Classes are said to be abstract and exist only for other Classes to inherit and reuse the Features declared by them. No object may be a direct instance of an abstract Class, although an object may be an indirect instance of one through a subclass that is non-abstract.

A Class acts as the namespace for various kinds of contained elements defined within its scope, including classes, interfaces and associations (note that this is purely a scoping construction and does not imply anything about aggregation). The contained classes can be used as ordinary classes in the container class. If a class inherits another class, the contents of the ancestor are available to its descendents if the visibility of an element is public or protected; however, if the visibility is private, then the element is not visible and therefore not available in the descendant.")
      class Class extends Classifier {

        @GenModel(documentation="Identifies Index instances that span this Class instance.")
        ref foundation.keysindexes.Index[*]#spannedClass index;
      }

      @GenModel(documentation="A data type is a type whose values have no identity (i.e., they are pure values). Data types include primitive built-in types (such as integer and string) as well as definable enumeration types.

In the metamodel, a DataType defines a special kind of Classifier in which operations are all pure functions (i.e., they can return data values but they cannot change data values, because they have no identity). For example, an \"add\" operation on a number with another number as an argument yields a third number as a result; the target and argument are unchanged.

A DataType is a special kind of Classifier whose instances are primitive values, not objects. For example, integers and strings are usually treated as primitive values. A primitive value does not have an identity, so two occurrences of the same value cannot be differentiated. Usually, DataTypes are used for specification of the type of an attribute or parameter.")
      class DataType extends Classifier {
      }

      @GenModel(documentation="A package is a grouping of model elements.

In the metamodel, Package is a subclass of Namespace. A Package contains ModelElements such as Packages and Classifiers. A Package may also contain Constraints and Dependencies between ModelElements of the Package.

The purpose of the package construct is to provide a general grouping mechanism. In fact, its only semantics is to define a namespace for its contents. The package construct can be used for organizing elements for any purpose; the criteria to use for grouping elements together into one package are not defined.

A package owns a set of model elements, with the implication that if the package is removed from the model, so are the elements owned by the package. Elements with names, such as classifiers, that are owned by the same package must have unique names within the package, although elements in different packages may have the same name.

There may be relationships between elements contained in the same package, and between an element in one package and an element in a surrounding package at any level. In other words, elements ?see? all the way out through nested levels of packages.

Elements in peer packages, however, are encapsulated and are not a priori visible to each other. The same goes for elements in contained packages, i.e. packages do not see \"inwards\".

Elements owned by a Package can be made available to other Packages by importing
them. Although any ModelElement may be imported by a Package, imported
ModelElements are typically other Packages. When an element is imported by a
package it extends the namespace of that package. Thus the elements available in a
Package consists of its owned and imported ModelElements.")
      class Package extends Namespace {

        @GenModel(documentation="Identifies ModelElements imported by a Package.")
        ref ModelElement[*]#importer importedElement;

        @GenModel(documentation="Identifies a DataManager that provides access to the data defined in the Package.")
        ref foundation.softwaredeployment.DataManager[*]#dataPackage dataManager;
      }

      @GenModel(documentation="A subsystem is a grouping of model elements that represents a behavioral unit in a physical system. A subsystem offers interfaces and has operations.

In the metamodel, Subsystem is a subclass of both Package and Classifier. As such it may have a set of Features.

The purpose of the subsystem construct is to provide a grouping mechanism for specifying a behavioral unit of a physical system. Apart from defining a namespace for its contents, a subsystem serves as a specification unit for the behavior of its contained model elements.

The contents of a subsystem is defined in the same way as for a package, thus it
consists of owned elements and imported elements, with unique names within the
subsystem.")
      class Subsystem extends Classifier, Package {
      }

      @GenModel(documentation="A model captures a view of a physical system. It is an abstraction of the physical system, with a certain purpose. The model completely describes those aspects of the physical system that are relevant to the purpose of the model, at the appropriate level of detail.

In the metamodel, Model is a subclass of Package. It contains a containment hierarchy of ModelElements that together describe the physical system. A Model also contains a set of ModelElements that represents the environment of the system. 

Different Models can be defined for the same physical system, where each model represents a view of the physical system defined by its purpose and abstraction level, e.g. an analysis model, a design model, an implementation model. Typically different models are complementary and defined from the perspectives (viewpoints) of different system stakeholders.")
      class Model extends Package {
      }

      @GenModel(documentation="A feature is a property, like attribute or operation, which is encapsulated within a Classifier.

In the metamodel, a Feature declares a structural or behavioral characteristic of an instance of a Classifier or of the Classifier itself. Feature is an abstract metaclass.")
      abstract class Feature extends ModelElement {

        @GenModel(documentation="Specifies whether the Feature appears in every instance of the Classifier or whether it appears only once for the entire Classifier.")
        attr ScopeKind ownerScope;

        @GenModel(documentation="Identifies the Classifier instance that owns the Feature.")
        transient ref Classifier#feature owner;

        @GenModel(documentation="Identifies the FeatureNode instances that use a particular Feature.")
        ref foundation.expressions.FeatureNode[*]#feature featureNode;

        @GenModel(documentation="Identifies the FeatureMap")
        ref analysis.transformation.FeatureMap[*]#target featureMap;

        @GenModel(documentation="Identifies the ClassifierFeatureMap")
        ref analysis.transformation.ClassifierFeatureMap[*]#feature cfMap;
      }

      @GenModel(documentation="A structural feature refers to a static feature of a model element.

In the metamodel, a StructuralFeature declares a structural aspect of a Classifier that is typed, such as an attribute. For example, it specifies the multiplicity and changeability of the StructuralFeature. StructuralFeature is an abstract metaclass.")
      abstract class StructuralFeature extends Feature {

        @GenModel(documentation="Specifies whether the value may be modified after the object is created.")
        attr ChangeableKind changeability;

        @GenModel(documentation="The possible number of data values for the feature that may be held by an instance. The cardinality of the set of values is an implicit part of the feature. In the common case in which the multiplicity is 1..1, then the feature is a scalar (i.e., it holds exactly one value).")
        !resolve val Multiplicity multiplicity;

        @GenModel(documentation="Specifies whether the set of instances is ordered. The ordering must be determined and maintained by Operations that add values to the feature. This property is only relevant if the multiplicity is greater than one.")
        attr OrderingKind ordering;

        @GenModel(documentation="Specifies whether the targets are ordinary Instances or are Classifiers.")
        attr ScopeKind targetScope;

        @GenModel(documentation="Identifies the Classifier defining the type of a StructuralFeature.")
        ref Classifier[1]#structuralFeature type;

        @GenModel(documentation="Identifies the set of Slot instances containing values of the which the StructuralFeature instance.")
        ref instance.Slot[*]#feature slot;

        @GenModel(documentation="Identifies the Union instances in which a particular StructuralFeature acts as the discriminator.")
        ref foundation.datatypes.Union[*]#discriminator discriminatedUnion;

        @GenModel(documentation="Identifies the IndexedFeature instances that describe how a particular StructuralFeature is used by the keys of Index instances.")
        ref foundation.keysindexes.IndexedFeature[*]#feature indexedFeature;

        @GenModel(documentation="Identifies the KeyRelationship instances that employ a particular StructuralFeature as part of their key.")
        ref foundation.keysindexes.KeyRelationship[*]#feature keyRelationship;

        @GenModel(documentation="Identifies the UniqueKey instances in which a particular StructuralFeature participates.")
        ref foundation.keysindexes.UniqueKey[*]#feature uniqueKey;

        @GenModel(documentation="Identifies the dataItems which a Set or DataSet instance references.")
        ref cwmx.resource.dmsii.DataItem[*]#structure dataItem;

        @GenModel(documentation="Identifies the Remap instances that remap this structure.")
        ref cwmx.resource.dmsii.Remap[*]#structure remap;
      }

      @GenModel(documentation="An Attribute describes a named slot within a classifier that may hold a value.")
      class Attribute extends StructuralFeature {

        @GenModel(documentation="An Expression specifying the value of the attribute upon initialization. It is meant to be evaluated at the time the object is initialized. (Note that an explicit constructor may supersede an initial value.)")
        !resolve val Expression initialValue;
      }

      @GenModel(documentation="A constraint is a semantic condition or restriction expressed in text.

In the metamodel, a Constraint is a BooleanExpression on an associated ModelElement(s) which must be true for the model to be well formed. This restriction can be stated in natural language, or in different kinds of languages with well-defined semantics. Certain Constraints are predefined, others may be user defined. Note that a Constraint is an assertion, not an executable mechanism.

The specification is written as an expression in a designated constraint language. The language can be specially designed for writing constraints (such as OCL), a programming language, mathematical notation, or natural language. If constraints are to be enforced by a model editor tool, then the tool must understand the syntax and semantics of the constraint language. Because the choice of language is arbitrary, constraints can be used as an extension mechanism.

The constraint concept allows new semantics to be specified linguistically for a model element. In the metamodel a Constraint directly attached to a ModelElement describes semantic restrictions that this ModelElement must obey.
")
      class Constraint extends ModelElement {

        @GenModel(documentation="A BooleanExpression that must be true when evaluated for an instance of a system to be well-formed. A boolean expression defining the constraint. Expressions are written as strings in a designated language. For the model to be well formed, the expression must always yield a true value when evaluated for instances of the constrained elements at any time when the system is stable (i.e., not during the execution of an atomic operation).")
        !resolve val BooleanExpression body;

        @GenModel(documentation="Identifies the ModelElements whose state is constrained by the Constraint instance.")
        ref ModelElement[*]#constraint constrainedElement;

        @GenModel(documentation="Identifies the Stereotype owning a Constraint instance.")
        transient ref Stereotype#stereotypeConstraint constrainedStereotype;
      }

      @GenModel(documentation="A dependency states that the implementation or functioning of one or more elements requires the presence of one or more other elements.

In the metamodel, a Dependency is a directed relationship from a client (or clients) to a supplier (or suppliers) stating that the client is dependent on the supplier (i.e., the client element requires the presence and knowledge of the supplier element).

A dependency specifies that the semantics of a set of model elements requires the presence of another set of model elements. This implies that if the source is somehow modified, the dependents probably must be modified. The reason for the dependency can be specified in several different ways (e.g., using natural language or an algorithm) but is often implicit.

Whenever the supplier element of a dependency changes, the client element is potentially invalidated. After such invalidation, a check should be performed followed by possible changes to the derived client element. Such a check should be performed after which action can be taken to change the derived element to validate it again.")
      class Dependency extends ModelElement {

        @GenModel(documentation="Contains a description of the nature of the dependency relationship between the client and supplier. The list of possible values is open-ended. However, CWM predefines the values \"Abstraction\" and \"Usage\".")
        attr String kind;

        @GenModel(documentation="Identifies the ModelElements that are clients of the Dependency instance.")
        ref ModelElement[+]#clientDependency client;

        @GenModel(documentation="Identifies the ModelElements that are suppliers of the Dependency instance.")
        ref ModelElement[+]#supplierDependency supplier;
      }

      @GenModel(documentation="In the metamodel an Expression defines a statement which will evaluate to a (possibly empty) set of instances when executed in a context. An Expression does not modify the environment in which it is evaluated. An expression contains an expression string and the name of an interpretation language with which to evaluate the string.")
      class Expression extends Element {

        @GenModel(documentation="The text of the expression expressed in the given language.")
        attr String body;

        @GenModel(documentation="Names the language in which the expression body is represented. The interpretation of the expression depends on the language. If the language name is omitted, no interpretation for the expression can be assumed. In general, a language name should be spelled and capitalized exactly as it appears in the document defining the language. For example, use COBOL, not Cobol; use Ada, not ADA; use PostScript, not Postscript.")
        attr Name language;
      }

      @GenModel(documentation="In the metamodel BooleanExpression defines a statement which will evaluate to an instance of Boolean when it is evaluated.")
      class BooleanExpression extends Expression {
      }

      @GenModel(documentation="In the metamodel ProcedureExpression defines a statement which will result in a change to the values of its environment when it is evaluated.")
      class ProcedureExpression extends Expression {
      }

      @GenModel(documentation="In the metamodel a Multiplicity defines a non-empty set of non-negative integers. A set which only contains zero ({0}) is not considered a valid Multiplicity. Every Multiplicity has at least one corresponding String  representation.
")
      class Multiplicity extends Element {

        @GenModel(documentation="Identifies the set of MultiplicityRange instances owned by a Multiplicity.")
        val MultiplicityRange[+]#multiplicity range;
      }

      @GenModel(documentation="In the metamodel a MultiplicityRange defines a range of integers. The upper bound of the range cannot be below the lower bound. The lower bound must be a nonnegative integer. The upper bound must be a nonnegative integer or the special value unlimited, which indicates there is no upper bound on the range. 
")
      class MultiplicityRange extends Element {

        @GenModel(documentation="Specifies the positive integer lower bound of the range.")
        attr Integer lower;

        @GenModel(documentation="Specifies the upper bound of the range, which is a positive integer or the special value ?unlimited? indicating no upper bound is defined.")
        attr UnlimitedInteger upper;

        @GenModel(documentation="Identifies the Multiplicity instance that owns the MultiplicityRange.")
        transient ref Multiplicity[1]#range multiplicity;
      }

      @GenModel(documentation="The stereotype concept provides a way of branding (classifying) model elements so that they behave as if they were instances of new virtual metamodel constructs. These model elements have the same structure (attributes, associations, operations) as similar non-stereotyped model elements of the same kind. The stereotype may specify additional constraints and required tagged values that apply to model elements. In addition, a stereotype may be used to indicate a difference in meaning or usage between two model elements with identical structure.

In the metamodel the Stereotype metaclass is a subclass of ModelElement. Tagged Values and Constraints attached to a Stereotype apply to all ModelElements branded by that Stereotype.

A stereotype keeps track of the base class to which it may be applied. The base class is a class in the metamodel (not a user-level modeling element) such as Class, Association, etc. If a model element is branded by an attached stereotype, then the CWM base class of the model element must be the base class specified by the stereotype or one of the subclasses of that base class.")
      class Stereotype extends ModelElement {

        @GenModel(documentation="Specifies the name of a modeling element to which the stereotype applies, such as Class, Association, Constraint, etc. This is the name of a metaclass, that is, a class from the metamodel itself rather than a user model class.")
        attr Name baseClass;

        @GenModel(documentation="Identifies the set of Constraint instances defined for the Stereotype instance.")
        val Constraint[*]#constrainedStereotype stereotypeConstraint;

        @GenModel(documentation="Identifies the set of ModelElements to which the Stereotype instance applies.")
        ref ModelElement[*]#stereotype extendedElement;

        @GenModel(documentation="Specifies a set of TaggedValues, each of which specifies a tag that an element classified by the Stereotype is required to have.")
        val TaggedValue[*]#stereotype requiredTag;
      }

      @GenModel(documentation="A tagged value allows information to be attached to any model element in the form of a \"tagged value\" pair (i.e., name = value). The interpretation of tagged value semantics is intentionally beyond the scope of CWM. It must be determined by user or tool conventions. It is expected that tools will define tags to supply information needed for their operations beyond the basic semantics of CWM. Such information could include code generation options, model management information, or user-specified semantics.

Even though TaggedValues are a simple and straightforward extension technique, their use restricts semantic interchange of metadata to only those tools that share a common understanding of the specific tagged value names.")
      class TaggedValue extends Element {

        @GenModel(documentation="Contains the name of the TaggedValue. This name determines the semantics that are applicable to the contents of the value attribute.")
        attr Name tag;

        @GenModel(documentation="Contains the current value of the TaggedValue.")
        attr String value;

        @GenModel(documentation="Identifies a Stereotype instance that owns the TaggedValue instance.")
        transient ref Stereotype#requiredTag stereotype;

        @GenModel(documentation="Identifies the ModelElement instance that owns the TaggedValue instance.")
        transient ref ModelElement#taggedValue modelElement;
      }

      @GenModel(documentation="The Any data type is used to indicate that an attribute or parameter may take values from any of the available data types. In CWM, the set of data types an Any attribute or parameter may assume includes the data types and enumerations described in this chapter plus any available instances of the Classifier class. 

There is no default value for data type Any.")
      datatype Any : java.lang.String;

      @GenModel(documentation="Boolean defines an enumeration that denotes a logical condition.

The default for data type Boolean is false.")
      datatype Boolean : boolean;

      @GenModel(documentation="The Float data type is used to indicate that an attribute or parameter may take on floating point numeric values. The number of significant digits and other representational details are implementation defined. 

The default for the Float data type is the value 0.0.")
      datatype Float : java.lang.String;

      @GenModel(documentation="Integer represents the predefined type of integers. An instance of Integer is an element in the (infinite) set of integers (..., -2, -1, 0, 1, 2, ...). 

The default for Integer is 0.")
      datatype Integer : long;

      @GenModel(documentation="Name defines a token which is used for naming ModelElements and similar usages. Each Name has a corresponding String representation. For purposes of exchange a name should be represented as a String.

The default for the Name data type is an empty string.")
      datatype Name : java.lang.String;

      @GenModel(documentation="String defines a piece of text. Strings do not normally have a defined length; rather, they are considered to be arbitrarily long (practical limits on the length of Strings exist, but are implementation dependent). When String is used as the type of an Attribute, string length sometimes can be specified (see the Relational and Record packages for examples).

The default for the String data type is an empty string.")
      datatype String : java.lang.String;

      @GenModel(documentation="Time defines a statement which will define the time of occurrence of an event. The specific format of time expressions is not specified here and is subject to implementation considerations.

There is no default for the Time data type.")
      datatype Time : java.lang.String;

      @GenModel(documentation="UnlimitedInteger defines a data type whose range is the nonnegative integers augmented by the special value \"unlimited\". It is used for the upper bound of multiplicities.

The default for an UnlimitedInteger is the special value \"unlimited\".")
      datatype UnlimitedInteger : long;

      enum ChangeableKind {

        @GenModel(documentation=" No restrictions on modification.")
        ck_changeable = 0;

        @GenModel(documentation="The value may not be changed from the source end after the creation and initialization of the source object. Operations on the other end may change a value.")
        ck_frozen = 1;

        @GenModel(documentation="If the multiplicity is not fixed, values may be added at any time from the source object, but once created a value may not be removed from the source end. Operations on the other end may change a value.")
        ck_addOnly = 2;
      }

      @GenModel(documentation="In the metamodel OrderingKind defines an enumeration that specifies how the elements of a set are arranged. Used in conjunction with elements that have a multiplicity in cases when the multiplicity value is greater than one. The ordering must be determined and maintained by operations that modify the set.

The default value is ok_unordered.")
      enum OrderingKind {

        @GenModel(documentation="The elements of the set have no inherent ordering.")
        ok_unordered = 0;

        @GenModel(documentation="The elements of the set have a sequential ordering.")
        ok_ordered = 1;
      }

      @GenModel(documentation="In the metamodel ScopeKind defines an enumeration that denotes whether a feature belongs to individual instances or an entire classifier.

The default value is sk_instance.")
      enum ScopeKind {

        @GenModel(documentation="The feature pertains to instances of a Classifier. For example, it is a distinct attribute in each instance or an operation that works on an instance.")
        sk_instance = 0;

        @GenModel(documentation="The feature pertains to an entire Classifier. For example, it is an attribute shared by the entire Classifier or an operation that works on the Classifier, such as a creation operation.")
        sk_classifier = 1;
      }

      @GenModel(documentation="In the metamodel VisibilityKind defines an enumeration that denotes how the element to which it refers is seen outside the enclosing name space.

The default value is vk_public.")
      enum VisibilityKind {

        @GenModel(documentation="Other elements may see and use the target element.")
        vk_public = 0;

        @GenModel(documentation="Descendants of the source element may see and use the target element.")
        vk_protected = 1;

        @GenModel(documentation="Only the source element may see and use the target element.")
        vk_private = 2;

        @GenModel(documentation=" Elements declared in the same package as the target element may see and use the target element. ")
        vk_package = 3;

        @GenModel(documentation="May be used where namespaces do not support the concept of visibility.")
        vk_notapplicable = 4;
      }

    }

    @GenModel(documentation="The Behavioral metamodel depends on the following package:

   org.omg::CWM::ObjectModel::Core

The Behavioral metamodel collects together classes and associations that describe the behavior of CWM types and provides a foundation for recording the invocations of defined behaviors. The elements of the Behavioral metamodel are shown in the following figure.

OCL Representation of Behavioral Constraints

Operations

The operation hasSameSignature checks if the argument has the same signature as the instance itself.
   hasSameSignature ( b : BehavioralFeature ) : Boolean;
   hasSameSignature (b) =
   (self.name = b.name) and
   (self.parameter->size = b.parameter->size) and
   Sequence{ 1..(self.parameter->size) }->forAll( index : Integer |
   b.parameter->at(index).type =
   self.parameter->at(index).type and
   b.parameter->at(index).kind =
   self.parameter->at(index).kind   )

The operation allOperations results in a Set containing all Operations of the Classifier itself and all its inherited Operations.
   allOperations : Set(Operation);
   allOperations = self.allFeatures->select(f | f.ockIsKindOf(Operations))

The operation allMethods results in a Set containing all Methods of the Classifier itself and all its inherited Methods.
   allOperations : Set(Method);
   allMethods = self.allFeatures->select(f | f.ockIsKindOf(Method))

Constraints

[C-4-1] All Parameters should have a unique name.
context BehavioralFeature inv:
self.parameter->forAll(p1, p2 | p1.name = p2.name implies p1 = p2)

[C-4-2] The type of the Parameters should be included in the Namespace of the Classifier.
context BehavioralFeature inv:
self.parameter->forAll( p | self.owner.namespace.allContents->includes (p.type) )

[C-4-3] The number of arguments must be the same as the number of parameters of the Operation.
context CallAction inv:
self.actualArgument->size = self.operation.parameter->size

[C-4-4] An Interface can only contain Operations.
context Interface inv:
self.allFeatures->forAll( f | f.oclIsKindOf( Operation ) )

[C-4-5] An Interface cannot contain any ModelElements.
context Interface inv:
self.allContents->isEmpty

[C-4-6] All Features defined in an Interface are public.
context Interface inv:
self.allFeatures->forAll( f | f.visibility = #public )

[C-4-7] If the realized Operation is a query, then so is the Method.
context Method inv:
self.specification->isQuery implies self.isQuery")
    @namespace(uri="http:///orgomg/cwm/objectmodel/behavioral.ecore", prefix="orgomg.cwm.objectmodel.behavioral")
    package behavioral {
      @GenModel(documentation="Argument is an expression describing how to determine an actual value passed in a CallAction.

In the metamodel an Argument is a composite part of a CallAction and contains a meta-attribute, value, of type Expression. It states how the actual argument is determined when the owning CallAction is executed.")
      class Argument extends core.ModelElement {

        @GenModel(documentation="An expression determining the actual Argument instance when executed.")
        !resolve val core.Expression value;

        @GenModel(documentation="Identifies the CallAction instance representing a particular invocation of an Operation.")
        transient ref CallAction#actualArgument callAction;
      }

      @GenModel(documentation="A behavioral feature refers to a dynamic feature of a model element, such as an operation or method. In the metamodel, BehavioralFeature specifies a behavioral aspect of a Classifier. All different kinds of behavioral aspects of a Classifier, such as Operation and Method, are subclasses of BehavioralFeature.

BehavioralFeature is an abstract metaclass.
")
      abstract class BehavioralFeature extends core.Feature {

        @GenModel(documentation="Specifies whether an execution of the BehavioralFeature leaves the state of the system unchanged. True indicates that the state is unchanged; false indicates that side-effects may occur.")
        attr core.Boolean isQuery;

        @GenModel(documentation="Identifies the Parameter instances that describe the parameters of the BehavioralFeature.")
        val Parameter[*]#behavioralFeature parameter;
      }

      @GenModel(documentation="A call action is an action resulting in an invocation of an operation.

The purpose of a CallAction is to identify the actual Arguments used in a specific invocation of an Operation.")
      class CallAction extends core.ModelElement {

        @GenModel(documentation="Identifies the Argument instances representing the actual arguments passed during Operation invocation.")
        val Argument[*]#callAction actualArgument;

        @GenModel(documentation="Identifies the Operation instance for which the CallAction instance records an invocation.")
        ref Operation[1]#callAction operation;

        @GenModel(documentation="Identifies the StepExecution to which the CallAction applies.")
        ref management.warehouseoperation.StepExecution[*]#callAction stepExecution;
      }

      @GenModel(documentation="Event is a specification of an observable occurrence. The occurrence that generates an event instance is assumed to take place at an instant in time.")
      class Event extends core.ModelElement {

        @GenModel(documentation="Identifies the ordered set of Parameter instances owned by an Event that describe the Event?s parameters.")
        val Parameter[*]#event parameter;
      }

      @GenModel(documentation="Interface is a named set of operations that specify the behavior of an element.

In the metamodel, an Interface contains a set of Operations that together define a service offered by a Classifier realizing the Interface. A Classifier may offer several services, which means that it may realize several Interfaces, and several Classifiers may realize the same Interface.")
      class Interface extends core.Classifier {
      }

      @GenModel(documentation="Method is the implementation of an Operation. It specifies the algorithm or procedure that effects the results of an Operation.")
      class Method extends BehavioralFeature {

        @GenModel(documentation="A specification of the Method in some appropriate form (such as a programming language). The exact form of a Method?s specification and knowledge of the language in which it is described is outside the scope of the CWM.")
        !resolve val core.ProcedureExpression body;

        @GenModel(documentation="Identifies the Operation that a Method implements.")
        ref Operation[1]#method specification;
      }

      @GenModel(documentation="Operation is a service that can be requested from an object to effect behavior. An Operation has a signature, which describes the parameters that are possible (including possible return values).

In the metamodel, an Operation is a BehavioralFeature that can be applied to instances of the Classifier that contains the Operation.

Operation is the specification, while Method is the implementation.")
      class Operation extends BehavioralFeature {

        @GenModel(documentation="If true, then the Operation does not have an implementation, and one must be supplied by a descendant. If false, the Operation must have an implementation in the class or inherited from an ancestor.")
        attr core.Boolean isAbstract;

        @GenModel(documentation="Identifies the CallAction instance representing a particular invocation of an Operation.")
        ref CallAction[*]#operation callAction;

        @GenModel(documentation="Identifies the set of Methods defined for an Operation.")
        ref Method[*]#specification method;
      }

      @GenModel(documentation="Parameters are used in the specification of operations, methods and events. A Parameter may include a name, type, and direction of communication.")
      class Parameter extends core.ModelElement {

        @GenModel(documentation="An Expression whose evaluation yields a value to be used when no argument is supplied for the Parameter.")
        !resolve val core.Expression defaultValue;

        @GenModel(documentation="Specifies what kind of a Parameter is required.")
        attr ParameterDirectionKind kind;

        @GenModel(documentation="Identifies the BehavioralFeature instance owner of a Parameter instance.")
        transient ref BehavioralFeature#parameter behavioralFeature;

        @GenModel(documentation="Identifies the Event owning a set of Parameter instances.")
        transient ref Event#parameter event;

        @GenModel(documentation="Identifies the Classifier instance the defines the type of a Parameter.")
        ref core.Classifier[1]#parameter type;
      }

      @GenModel(documentation="In the metamodel ParameterDirectionKind defines an enumeration that denotes if a Parameter is used for supplying an argument and/or for returning a value. The enumeration values are:

The default value is pdk_in.")
      enum ParameterDirectionKind {

        @GenModel(documentation="An input Parameter (may not be modified).")
        pdk_in = 0;

        @GenModel(documentation="An input Parameter that may be modified.")
        pdk_inout = 1;

        @GenModel(documentation="An output Parameter (may be modified to communicate information to the caller).")
        pdk_out = 2;

        @GenModel(documentation="A return value of a call.")
        pdk_return = 3;
      }

    }

    @GenModel(documentation="The Relationships metamodel depends on the following package:

    org.omg::CWM::ObjectModel::Core

The Relationships metamodel collects together classes and associations that describe  the relationships between object within a CWM information store. The Relationships metamodel describes to types of relationships: association and generalization.

Association relationships record linkages between model elements. These linkages may represent simple linkages between model elements or aggregation (\"is part of\") relationships between model elements; aggregation relationships come in two forms -- shared and composite. Associations have two or more named ends that link them to instances of the classes connected by the association.

Generalization relationships record arrangements of model elements into type hierarchies in a parent/child (or \"is type of\") fashion. Child types are said to \"specialize\", \"subclass\" or \"subtype\" their parental  types, represent a subset of parental instances that fulfill the definition of the child type, and inherit the structural features
(Attributes, AssociationEnd) and behavioral features (Operations, Methods) of their parents. Parental types are said to \"generalize\" their child types or to be \"superclasses\" or \"supertypes\" of their children.

CWM generalization hierarchies support multiple inheritance; that is, child types may have more than one parental type and inherit the union of the features of all their parental types. Although called \"hierarchies\", multiple inheritance actually represents a directed acyclic graph of parental and child types.

OCL Representation of Relationships Constraints

Operations

The operation allConnections results in the set of all AssociationEnds of the Association.
   allConnections : Set(AssociationEnd);
   allConnections = self.feature.oclIsKindOf(AssociationEnd)

Constraints

[C-5-1] An Association must have at least 2 AssociationEnds.
context Association inv:
self.allConnections->size > 1

[C-5-2] The AssociationEnds must have a unique name within the association.
context Association inv:
self.allConnections->forAll( r1, r2 | r1.name = r2.name implies r1 = r2)

[C-5-3] At most one AssociationEnd may be an aggregation or composition.
context Association inv:
self.allConnections->select(aggregation <> #ak_none)->size <= 1

[C-5-4] If an Association has three or more AssociationEnds, then no AssociationEnd may be an aggregation or composition.
context Association inv:
self.allConnections->size >=3 implies
self.allConnections->forall(aggregation = #ak_none)

[C-5-5] The connected Classifiers of the AssociationEnds should be included in the Namespace of the Association, or be Classifiers with public visibility in other Namespaces to which the Association has access.
context Association inv:
self.allConnections->forAll(r | self.namespace.allContents->includes (r.type) ) or
self.allConnections->forAll(r | self.namespace.allContents->excludes (r.type))
   implies
self.namespace.clientDependency->exists (d |
   d.supplier.oclAsType(Namespace).ownedElement->select (e |
      e.elementOwnership.visibility = #ak_public)->includes (r.type) or
   d.supplier.oclAsType(Classifier).allParents.
      oclAsType(Namespace).ownedElement->select (e |
         e.elementOwnership.visibility = #ak_public)->includes (r.type) or
         d.supplier.oclAsType(Package).allImportedElements->select (e |
            e.elementImport.visibility = #ak_public) ->includes (r.type) ) )

[C-5-6] An AssociationEnd must have an owning Association.
context AssociationEnd inv:
self.owner.oclIsKindOf(Association)

[C-5-7] The Classifier of an AssociationEnd cannot be an Interface or a DataType if the association is navigable away from that end.
context AssociationEnd inv:
(self.type.oclIsKindOf (Interface) or
self.type.oclIsKindOf (DataType)) implies
self.owner->select (ae | ae <self)->forAll(ae | ae.isNavigable = #false)

[C-5-8] An instance may not belong by composition to more than one composite Instance.
context AssociationEnd inv:
self.aggregation = #ak_composite implies self.multiplicity.max <= 1

[C-5-9] An AssociationEnd with composite or shared aggregation semantics must be owned by an Association.
context AssociationEnd inv:
self.aggregation = #ak_composite or self.aggregation = #ak_shared implies
self.owner.oclIsKindOf(Association)
")
    @namespace(uri="http:///orgomg/cwm/objectmodel/relationships.ecore", prefix="orgomg.cwm.objectmodel.relationships")
    package relationships {
      @GenModel(documentation="An association defines a semantic relationship between classifiers. Associations have two or more named ends. Associations with two or more ends are called \"n-ary\" whereas associations with exactly two ends are called \"binary\". Each end, depending
upon its multiplicity, connects to zero or more instances of some classifier.

In the metamodel, an Association is a declaration of a semantic relationship between Classifiers, such as Classes. Associations must have two, and may have more, association ends. Each end is connected to a Classifier; the same Classifier may be 
connected to more than one association end in the same association. (Refer to the ObjectModel?s Instance package, below, for a description of how Associations are instantiated.)

Because Associations are classifiers, they own and order their association ends (which are Attributes) via the ClassifierFeature association. In addition, because Associations are Classes, they can also own more traditional StructuralFeatures such as Attributes. Consequently, they may act in a manner similar to \"association classes\" described by
some other object models.

An association may represent an aggregation (i.e., a whole/part relationship). In this case, the association end attached to the whole element is designated, and the other association end represents the parts of the aggregation.

Associations can be of three different kinds: (1) ordinary association, (2) composite aggregate, and (3) shareable aggregate. Since the aggregate construct can have several different meanings depending on the application area, CWM gives a more precise meaning to two of these constructs (i.e., association and composite aggregate) and leaves the shareable aggregate more loosely defined in between. Only binary Associations can have composite or sharable aggregation semantics.

Composite aggregation is a strong form of aggregation which requires that a part instance be included in at most one composite at a time and that the composite object has sole responsibility for the disposition of its parts. This means that the composite object is responsible for the creation and destruction of the parts. In implementation terms, it is responsible for their memory allocation. If a composite object is destroyed, it must destroy all of its parts. It may remove a part and give it to another composite object, which then assumes responsibility for it. If the multiplicity from a part to composite is zero-to-one, the composite may remove the part and the part may assume responsibility for itself, otherwise it may not live apart from a  composite.

A consequence of these rules is that a composite aggregation implies propagation semantics (i.e., some of the dynamic semantics of the whole is propagated to its parts). For example, if the whole is copied or destroyed, then so are the parts as well (because a part may belong to at most one composite).

A classifier on the composite end of an association may have parts that are classifiers and associations. At the instance level, an instance of a part element is considered \"part of\" the instance of a composite element. If an association is part of a composite and it connects two classes that are also part of the same composite, then an instance of the association will connect objects that are part of the same composite object of which the instance is part.

A shareable aggregation denotes weak ownership (i.e., the part may be included in several aggregates) and its owner may also change over time. However, the semantics of a shareable aggregation does not imply deletion of the parts when an aggregate
referencing it is deleted. Both kinds of aggregations define a transitive, antisymmetric relationship (i.e., the instances form a directed, non-cyclic graph). Composition instances form a strict tree (or rather a forest).")
      class Association extends core.Class {
      }

      @GenModel(documentation="An association end is an endpoint of an association, which connects the association to a classifier. Each association end is part of one association. The association ends of each association are ordered.

In the metamodel, an AssociationEnd is part of an Association and specifies the connection of an Association to some other Classifier. Because AssociationEnds are a kind of StructuralFeature, they are owned and ordered by Association instances via the ClassifierFeature association. The StructuralFeatureType association is used to identify the Classifier to which the AssociationEnd is attached. Each AssociationEnd has a name and defines a set of properties of the connection.

The multiplicity property of an association end specifies how many instances of the classifier at a given end (the one bearing the multiplicity value) may be associated with a single instance of the classifier at the other end. The association end also states whether or not the connection may be traversed towards the instance playing that role in the connection (the isNavigable attribute), that is, if the instance is directly reachable via the association.")
      class AssociationEnd extends core.StructuralFeature {

        @GenModel(documentation="When placed on one end (the \"target\" end), specifies whether the class on the target end is an aggregation with respect to the class on the other end (the \"source\" end). Only one end of an association can be an aggregation.")
        attr AggregationKind aggregation;

        @GenModel(documentation="When placed on a target end, specifies whether traversal from a source instance to its associated target instances is possible. A value of true means that the association can be navigated by the source class and the target rolename can be used in navigation expressions. Specification of navigability for each direction is defined independently.")
        attr core.Boolean isNavigable;
      }

      @GenModel(documentation="A generalization is a taxonomic relationship between a more general element and a more specific element. The more specific element is fully consistent with the more general element (it has all of its properties, members, and relationships) and may contain additional information.

In the metamodel, a Generalization is a directed inheritance relationship, uniting a Classifier with a more general Classifier in a hierarchy. Generalization is a subtyping relationship; that is, an instance of the more general (\"parent\") Classifier may be substituted by an instance of the more specific (\"child\") Classifier.

To understand inheritance fully, it is necessary to understand the concept of a full descriptor and a segment descriptor. A full descriptor is the full description needed to describe an instance of a metamodel object. It contains a description of all of the
attributes, associations, and operations that the object contains.

In a pre-object-oriented language, the full descriptor of a data structure was declared directly in its entirety. In an object-oriented language, the description of an object is built out of incremental segments that are combined using inheritance to produce a full descriptor for an object. The segments are the modeling elements that are actually declared in a model. Each classifier contains a list of features and other relationships that it adds to what it inherits from its ancestors. The mechanism of inheritance defines how full descriptors are produced from a set of segments connected by  generalization.The full descriptors are implicit, but they define the structure of actual instances. Features of a classifier that have private visibility are not visible to descendants of the classifier.

If a classifier has no parent, then its full descriptor is the same as its segment descriptor. If a classifier has one or more parents, then its full descriptor contains the union of the features from its own segment descriptor and the segment descriptors of all of its ancestors. No attribute, operation, or association end with the same signature may be declared in more than one of the segments (in other words, they may not be redefined). A method may be declared in more than one segment. A method declared in any segment supersedes and replaces a method with the same signature declared in any ancestor. If two or more methods nevertheless remain, then they conflict and the model is ill-formed. The constraints on the full descriptor are the union of the constraints on the segment itself and all of its ancestors. If any of them are inconsistent, then the model is ill-formed.

In any full descriptor for a classifier, each method must have a corresponding operation. In a concrete classifier, each operation in its full descriptor must have a corresponding method in the full descriptor.
")
      class Generalization extends core.ModelElement {

        @GenModel(documentation="Identifies the Classifier instance that acts as a child in the Generalization relationship.")
        ref core.Classifier[1]#generalization child;

        @GenModel(documentation="Identifies the Classifier instance that acts as a parent in an inheritance hierarchy.")
        ref core.Classifier[1]#specialization parent;
      }

      @GenModel(documentation="An enumeration that denotes what kind of aggregation an Association defines. When placed on a target end, specifies the relationship of the target end to the source end. 

The default value is ak_none.")
      enum AggregationKind {

        @GenModel(documentation="The end is not an aggregate.")
        ak_none = 0;

        @GenModel(documentation="The end is an aggregate; therefore, the other end is a part and must have the
aggregation value of none. The part may be contained in other aggregates.")
        ak_aggregate = 1;

        @GenModel(documentation="The end is a composite; therefore, the other end is a part and must have the aggregation value of none. The part is strongly owned by the composite and may not be part of any other composite.
")
        ak_composite = 2;
      }

    }

    @GenModel(documentation="The Instance metamodel depends on the following package:

    org.omg::CWM::ObjectModel::Core

In addition to the metadata normally interchanged with CWM, it is sometimes useful to interchange specific data instances as well. The ObjectModel?s Instance metamodel allows the inclusion of data instances with the metadata.

OCL Representation of Instance Constraints

Constraints

[C-6-1] A DataValue originates from a Classifier that is a DataType.
context DataValue inv:
self.classifier.oclIsKindOf(DataType)

[C-6-2] A DataValue has no Slots.
context DataValue inv:
self.valueSlot->isEmpty

[C-6-3] An Object may only own Objects and DataValues.
context Object inv:
self.contents->forAll(c | c.oclIsKindOf(Object) or c.oclIsKindOf(DataValue))

[C-6-4] If an Object represents an association, at least two of its ends must be not be empty.
context Object inv:
self.classifier.oclIsKindOf(Association) implies
self.slot.feature->iterate( ae ; cnt : Integer = 0 |
if ae.oclIsKindOf(AssociationEnd) and ae.value.notEmpty then
   cnt + 1
else
   cnt
end if ) > 1

[C-6-5] If the StructuralFeature describing a Slot is an AssociationEnd, the Classifier associated with the Object owning the Slot must be an Association.
context Slot inv:
self.feature.oclIsKindOf(AssociationEnd) implies
self.value.classifier.oclIsKindOf(Association)
")
    @namespace(uri="http:///orgomg/cwm/objectmodel/instance.ecore", prefix="orgomg.cwm.objectmodel.instance")
    package instance {
      @GenModel(documentation="The instance construct defines an entity to which a set of operations can be applied and which has a state that stores the effects of the operations. In the metamodel Instance is connected to a Classifier that declares its structure and behavior. It has a set of attribute values matching the definition of its Classifier. The set of attribute values implements the current state of the Instance. Because Instance is an abstract class, all Instances are either Object or DataValue instances.

The data content of an Instance comprises one value for each attribute in its full descriptor (and nothing more). The value must be consistent with the type of the attribute. An instance must obey any constraints on the full descriptor of the Classifier
of which it is an instance (including both explicit constraints and built-in constraints such as multiplicity).
")
      abstract class Instance extends core.ModelElement {

        @GenModel(documentation="Identifies the set of Slot instances for which the DataValue or Object instance contains the current value.")
        ref Slot[*]#value valueSlot;

        @GenModel(documentation="Identifies the Classifier that describes the structure of the Instance.")
        ref core.Classifier[1]#instance classifier;
      }

      @GenModel(documentation="A slot is a named location in an Object instance that holds the current value of the StructuralFeature associated with the Slot instance. Normally, the StructuralFeature associated with the slot will be either an Attribute instance or an AssociationEnd instance. Slots are owned by Objects; DataValues do not have slots.")
      class Slot extends core.ModelElement {

        @GenModel(documentation="Identifies the Instance subtype (either a DataValue or an Object) that holds the current value represented by the Slot instance.")
        ref Instance[1]#valueSlot value;

        @GenModel(documentation="Identifies the Object instance that owns the Slot instance.")
        transient ref Object#slot object;

        @GenModel(documentation="Identifies the StructuralFeature instance for which the Slot instance contains the current value.")
        ref core.StructuralFeature[1]#slot feature;
      }

      @GenModel(documentation="A data value is an instance with no identity. In the metamodel, DataValue is a child of Instance that cannot change its state, i.e. all operations that are applicable to it are pure functions or queries that do not cause any side effects. DataValues are typically used
as attribute values.

Since it is not possible to differentiate between two data values that appear to be the same, it becomes more of a philosophical issue whether there are several data values representing the same value or just one for each value. In addition, a data value cannot change its data type and it does not have contained instances.")
      class DataValue extends Instance {

        @GenModel(documentation="A string representation of the value.")
        attr core.String value;
      }

      @GenModel(documentation="An object is an instance that originates from a class.

In the metamodel, Object is a subclass of Instance originating from a Class. The Class may be modified dynamically, which means that the set of features of the Object may change during its life-time.

An object is an instance that originates from a class; it is structured and behaves according to its class. All objects originating from the same class are structured in the same way, although each of them has its own set of attribute slots. Each attribute slot references an instance, usually a data value or possibly, another object. The number of attribute slots with the same name fulfills the multiplicity of the corresponding attribute in the class. The set may be modified according to the specification in the corresponding attribute, e.g. each referenced instance must originate from (a specialization of) the type of the attribute, and attribute slots may be added or removed according to the changeable property of the attribute.")
      class Object extends Instance {

        @GenModel(documentation="Identifies the set of Slot instances owned by the Object instance.")
        val Slot[*]#object slot;
      }

      @GenModel(documentation="Each instance of Extent owns a collection of instances and is used to link such collections to their structural and behavioral definitions in CWM Resource packages. Because Extent is a subclass of package, it owns member instances via the
ElementOwnership associaton.")
      class Extent extends core.Package {
      }

    }

  }

  @GenModel(documentation="The Foundation is a collection of metamodel packages that contain model elements representing concepts and structures that are shared by other CWM packages. Consequently, Foundation model elements often have a more general-purpose nature than model elements found in packages at higher CWM organizational levels.

Foundation model elements in a particular metamodel package are not necessarily intended to describe fully all aspects of concepts and structures they represent. Rather, they are meant to provide a common foundation which other packages can extend as necessary to meet their specific needs.

Foundation model elements differ from ObjectModel elements because they are specific to the goals and purposes of CWM. ObjectModel elements, in contrast, are of a general purpose nature and applicable in diverse areas.

The CWM uses packages to control complexity and create groupings of logically interrelated classes. The Foundation is a collection of packages that are described together because they all provide metamodel services to other CWM packages. A subsection of this chapter is devoted to each of the Foundation packages, presented in alphabetical order. The relationship between the Foundation and each of its constituent packages is shown diagrammatically in the figure.

Organizing the Foundation in this fashion allows the individual metamodel packages to be understood and used independently of each other without sacrificing their common purpose. For example, a CWM extension package supporting a programming language might need the DataTypes, Expressions, TypeMapping and SoftwareDeployment packages but not need the KeysIndexes or BusinessInformation packages.
")
  @namespace(uri="http:///orgomg/cwm/foundation.ecore", prefix="orgomg.cwm.foundation")
  package foundation {
    @GenModel(documentation="The Business Information package depends on the following package:

    org.omg::CWM::ObjectModel::Core

The Business Information Metamodel provides general purpose services available to all CWM packages for defining business-oriented information about model elements. The business-oriented services described here are designed to support the needs of data warehousing and business intelligence systems; they are not intended as a complete representation of general purpose business intelligence metamodel.

Business Information Metamodel services support the notions of responsible parties and information about how to contact them, identification of off-line documentation and support for general-purpose descriptive information. Three CWM classes \"anchor\" these services: ResponsibleParty, Document and Description, respectively.

To aid in representing the diversity of organizational structures and documentation relationships that may be encountered in a business intelligence system, the metamodel provides robust relationships between the anchor classes and every model element in the CWM metamodel. The necessary robustness is achieved in several ways.

First, every CWM model element may have zero or more instances of each anchor class associated with it. This means, for example, that a single Description instance can be used to describe many different model elements. Conversely, a single model element may be described by many different Description instances. Likewise, Document and ResponsibleParty instances can be associated in completely ad hoc ways with any model element. Extending this idea means, for example, that Description instances could be used to further describe ResponsibleParty and Document instance, if needed.

Second, because they are Namespaces, the anchor classes can be organized into hierarchies using the ElementOwnership association. For instance, an organizational structure can be represented by a hierarchy of ResponsibleParty instances. Also, the internal structure of a document (i.e., its chapters, sections, subsections, etc.) might be represented by a hierarchy of Document instances.

Finally, instances of the three anchor classes can be associated with any model element (via their individual associations to ModelElement) and referenced by multiple instances of any of the three anchor classes. Because of the strong containment of the ElementOwnership association in the ObjectModel, anchor class instances can only participate in one hierarchy, but there are no restrictions preventing anchor class instances embedded in a hierarchy from referencing, or being referenced by, other model elements (even other members of the same hierarchy).

To illustrate some of the ways that the metamodel can be used, the following figure shows a simple document hierarchy with responsibility assignments and descriptive comments (boxes represent instances of metamodel classes and labelled lines represent metamodel associations connecting instances). In the example, the product plan document for the Widget product is composed of three subplans: a marketing plan, an engineering plan, and a resource plan. The relationships between the subplans documents is shown as a hierarchy with the product plan owning the three subordinate plans via the ElementOwnership association. Each part of the plan is assigned to a reponsible party using the ModelElementResponsibility association. Finally, Description instances are used to record roles for the responsible parties.

OCL Representation of BusinessInformation Constraints

[C-3-1] A Description may not describe itself.
context Description inv:
self.modelElement->forAll(p | p <> self)

[C-3-2] A Document may not describe itself.
context Document inv:
self.modelElement->forAll(p | p <> self)

[C-3-3] A ResponsibleParty may not describe itself.
context ResponsibleParty inv:
self.modelElement->forAll(p | p <> self)")
    @namespace(uri="http:///orgomg/cwm/foundation/businessinformation.ecore", prefix="orgomg.cwm.foundation.businessinformation")
    package businessinformation {
      @GenModel(documentation="The ResponsibleParty class allows representation of entities within an information system that are in some way interested in receiving information about, or are otherwise responsible for, particular ModelElements. Each ResponsibleParty may own multiple sets of contact information, and a single ResponsibleParty may be associated with many ModelElements.

ResponsibleParty instances may represent any entity appropriate to the system being modeled and need not be limited to people. For example, a ResponsibleParty instance might represent an individual such as \"George Washington\", a role (the \"President\"), or an organization (\"Congress\"), depending upon the needs of the system being modeled. Similarly, the precise semantics of the responsibility attribute are open to intrepretation and may be adapted on a system-by-system basis.

Because ResponsibleParty instances are Namespaces, they can be organized into hierarchies of ResponsibleParty instances, capturing organizational structures or similar relationships.")
      class ResponsibleParty extends objectmodel.core.Namespace {

        @GenModel(documentation="Textual identification or description of the ResponsibleParty in a usage-dependent format.")
        attr objectmodel.core.String responsibility;

        @GenModel(documentation="Identifies the model elements for which this ResponsibleParty instance has some interest or responsibility. ")
        ref objectmodel.core.ModelElement[*]#responsibleParty modelElement;
      }

      @GenModel(documentation="Instances of the Telephone class represent telephone contact information.

Because telephones are first class objects within the CWM, they can be used for purposes beyond those associated with the CWM Foundation?s Business Information concepts.")
      class Telephone extends objectmodel.core.ModelElement {

        @GenModel(documentation="A textual representation of the telephone?s number.")
        attr objectmodel.core.String phoneNumber;

        @GenModel(documentation="A textual representation of the telephone?s type, such as \"multi-line\", or its usage,
such as \"home\", \"work\", \"fax\", or \"mobile\".")
        attr objectmodel.core.String phoneType;

        @GenModel(documentation="Identifies the Contact instance(s) for which the Telephone instance is relevant.")
        ref Contact[*]#telephone contact;
      }

      @GenModel(documentation="An Email instance identifies a single email address. Via a Contact instance, an email address can be associated with one or more ResponsibleParty instances. Email instances might, for example, be used by an automated tool to send an automatically generated email message to a ResponsibleParty instance responsible about some change of state for a particular ModelElement. Multiple Email instances may be associated with a single Contact instance and the ordering of the association between them may be used to represent the sequence in which the Email instances should be contacted.

Because email addresses are first class objects within the CWM, they can be used for purposes beyond those associated with the CWMFoundation?s Business Information concepts.")
      class Email extends objectmodel.core.ModelElement {

        @GenModel(documentation="A textual representation of an email address.")
        attr objectmodel.core.String emailAddress;

        @GenModel(documentation="Contains a textual representation of the type of the email address. Interesting values might include location information such as \"home\" or \"work\", or perhaps an indication of the type of email system for which the eMailAddress is formatted, such as \"SMTP\" or \"X.400\".")
        attr objectmodel.core.String emailType;

        @GenModel(documentation="Identifies the Email instances associated with this Contact instance. The ordered constraint may be used to identify the order in which Email instances should be contacted.")
        ref Contact[*]#email contact;
      }

      @GenModel(documentation="Instances of the Location class represent physical locations. Note that the name of a Location is derived from its superclass, ModelElement.

Because Locations are first class objects within the CWM, they can be used for purposes beyond those associated with the CWM Foundation?s Business Information concepts. If additional attributes about Location instances are required, they should be added by creating subtypes of the Location class and placing the additional attributes therein.")
      class Location extends objectmodel.core.ModelElement {

        @GenModel(documentation="Descriptive information about the character or identity of the Location instance.")
        attr objectmodel.core.String locationType;

        @GenModel(documentation="The address of the Location instance. The precise content of this string is usage-defined.")
        attr objectmodel.core.String address;

        @GenModel(documentation="The name of the city in which the Location instance is found. The precise content of this string is usage-defined.")
        attr objectmodel.core.String city;

        @GenModel(documentation="The postal code of the Location instance. The precise content of this string is usage-defined.")
        attr objectmodel.core.String postCode;

        @GenModel(documentation="The area in which the Location instance is found. The precise content of this string is usage-defined, but a common usage would be to refer to a geographical subdivision such as a state or province.")
        attr objectmodel.core.String area;

        @GenModel(documentation="The name of the country in which the Location instance is found. The precise content of this string is usage-defined.")
        attr objectmodel.core.String country;

        @GenModel(documentation="Identifies the Contact instance(s) with which this Location instance is associated.")
        ref Contact[*]#location contact;
      }

      @GenModel(documentation="Each Contact instance collects together the various types of related contact information. Each Contact instance can be associated with multiple Email, Location and Telephone instances. Conversely, each Email, Location, ResourceLocator and Telephone instance can be associated with many Contact instances. The ordering constraints on the associations between these classes and the Contact class can be used to represent a prioritized sequence in which the various types of contact information  should be used.

A particular ResponsibleParty instance may have multiple instances of Contact associated with it via the ResponsiblePartyContact association. This association is ordered to support representation of the sequence in which Contact instances should be used. For example, a ResponsibleParty instance representing an employee might be associated with Contact instances representing their office, home, and mobile contact information with an indication that the employee should be contacted first at the office, then at home, and finally via their mobile phone.

To maximize flexibility of the metamodel, Contact instances may provide contact information for multiple ResponsibleParty instances.")
      class Contact extends objectmodel.core.ModelElement {

        @GenModel(documentation="Identifies the Contact instance(s) for which this Email instance is relevant.")
        ref Email[*]#contact email;

        @GenModel(documentation="Identifies the Location instances associated with this Contact instance. The ordered constraint may be used to identify the order in which Location instances should be contacted.")
        ref Location[*]#contact location;

        @GenModel(documentation="Identifies the ResourceLocator instances related to this ContactInfo instance. Note that the ordered constraint on this role can be used to indicate the sequence in which ResourceLocator should be contacted.")
        ref ResourceLocator[*]#contact url;

        @GenModel(documentation="Identifies the Telephone instance associated with this Contact instance. The ordered constraint may be used to identify the order in which Telephone instances should be contacted.")
        ref Telephone[*]#contact telephone;
      }

      @GenModel(documentation="Instances of the Description class contain arbitrary textual information relevant to a particular ModelElement. While Description instances may contain any desired textual information, they will typically contain documentation or references to external reference information about the owning ModelElement.

Any ModelElement may have multiple Description instances associated with it. Indeed, a ModelElement instance that is a Description instance may itself have multiple Description instances linked to it. Also, a hierarchies of Description instances can be constructed.

Description instances are meant to hold descriptive textual information that will be stored in the metamodel itself. In contrast, Document instances are meant to describe the location documentary information stored outside the metamodel.
")
      class Description extends objectmodel.core.Namespace {

        @GenModel(documentation="Contains a textual description of information pertaining to the owning ModelElement. ")
        attr objectmodel.core.String body;

        @GenModel(documentation="Contains an identification of the language in which the content of the body attribute is specified. If desired, the language specification may be applied to the name attribute derived from ModelElement as well.")
        attr objectmodel.core.Name language;

        @GenModel(documentation="Contains a textual description of the type of information the Description represents. Specific contents are usage defined.")
        attr objectmodel.core.String type;

        @GenModel(documentation="Identifies the ModelElement instances for which this Description instance is relevant.")
        ref objectmodel.core.ModelElement[*]#description modelElement;
      }

      @GenModel(documentation="The Document class represents externally stored descriptive information about some aspect of the modeled system. An instance of Document might be associated with one or more ModelElements. The name of a Document instance is derived from its superclasses.

Although the purposes of the Description and Document types may overlap somewhat, their chief distinction is that Description instances are stored with the CWM metadata whereas Documentation instances are stored externally to the CWM metadata. Although there is an implication here that Documentation instances might represent more voluminous information than Description instances, there is no particular requirement that this be so.

Because Documentation instances are themselves Namespace instances, hierarchical relationships between various externally stored documents can be represented.")
      class Document extends objectmodel.core.Namespace {

        @GenModel(documentation="Contains a textual representation of the identification, and perhaps the physical location, of externally maintained documentary information about some aspect of the ModelElement(s) with which the Document instance is associated.")
        attr objectmodel.core.String reference;

        @GenModel(documentation="Contains a textual description of the type of information the Document represents. Specific contents are usage defined.")
        attr objectmodel.core.String type;

        @GenModel(documentation="Identifies the ModelElement instances for which this Document instance is relevant.")
        ref objectmodel.core.ModelElement[*]#document modelElement;
      }

      @GenModel(documentation="Instances of the ResourceLocator class provide a general means for describing the resources whose location is not defined by a traditional mailing address. For example, a ResourceLocator instance could refer to anything from a location within a building (\"Room 317, third file cabinet, 2nd drawer\") to a web location (\"www.omg.org\").

Because they are first class objects in the CWM, ResourceLocator instances may also be used for purposes beyond those associated with the CWM Foundation's Business Information concepts.")
      class ResourceLocator extends objectmodel.core.ModelElement {

        @GenModel(documentation="Contains the text of the resource location. For Internet locations, this will be a web URL (Uniform Resource Locator) but there is no requirement that this be so. In fact, the string can contain any text meaningful to its intended use in a particular environment.")
        attr objectmodel.core.String url;

        @GenModel(documentation="Identifies the Contact instances for which a ResourceLocator instance is relevant.")
        ref Contact[*]#url contact;
      }

    }

    @GenModel(documentation="The DataTypes package depends on the following packages:

    org.omg::CWM::ObjectModel::Core

The CWM DataTypes metamodel supports definition of metamodel constructs that modelers can use to create the specific data types they need. Although the CWM Foundation itself does not contain specific data type definitions, a number of data type definitions for widely used environments are provided (in the CWM Data Types chapter) as examples of the appropriate usage of CWM Foundation classes for creating
data type definitions.

OCL Representation of DataTypes Constraints

[C-4-1] A TypeAlias instance cannot alias itself.
context TypeAlias inv:
self.type <> self

[C-4-2] A Union can have at most one default UnionMember instance.
context Union inv:
self.allFeatures->select(isDefault)->size <= 1
")
    @namespace(uri="http:///orgomg/cwm/foundation/datatypes.ecore", prefix="orgomg.cwm.foundation.datatypes")
    package datatypes {
      @GenModel(documentation="The Enumeration class is intended as a starting point from which enumerated data types can be created. An enumerated data type is a collection of identifiers often used as the permitted states that some other attribute or property of the enumerated type may take.

The isOrdered attribute of an Enumeration instance is used to determine if the ordered constraint on the EnumerationLiterals association is relevant for the enumeration. The particular ordering of EnumerationLiteral instances is obtained from the ordered constraint on the association even if the value attributes of the EnumerationLiteral instances contain non-null values that might be used to determine ordering. This is done to provide more flexible ordering semantics.

An instance of Enumeration is also required to create a range data type. Refer to the EnumerationLiteral class for details.")
      class Enumeration extends objectmodel.core.DataType {

        @GenModel(documentation="If True, the ordered constraint on the EnumerationLiterals association is relevant. Otherwise, the ordering of EnumerationLiteral instances is considered unspecified.
")
        attr objectmodel.core.Boolean isOrdered;

        @GenModel(documentation="Identifies the EnumerationLiteral instances relevant for a particular Enumeration instance. If the Enumeration?s isOrdered attribute is True, the ordering constraint on this association end can be used to determine a logical ordering for the EnumerationLiteral instances. Otherwise, ordering is ignored.")
        val EnumerationLiteral[+]#enumeration literal;
      }

      @GenModel(documentation="EnumerationLiteral instances describe the enumeration identifiers, and possibly the
values, associated with an enumerated data type. Enumeration identifiers are contained
in the name attribute derived from the EnumerationLiteral instance?s ModelElement superclass.

EnumerationLiteral instances may also be used to define expression-based values such as ranges. To do so, simply state the membership expression in the instance?s value. For example, a range literal can be created by setting the value attribute to \"m..n\", where m represents the lower bound of the range, and n, the upper bound. In this way, ranges and other more complicated expressions can be intermixed with simple
enumeration literals. For example, an enumeration might contain the literals \"1\", \"2\", \"4..7\", and \"> 10\".

Consequently, a simple range data type can be created with an Enumeration instance that owns a single EnumerationLiteral instance. For example, a data type for positive integers could be created as shown in the following instance diagram. A model attribute of this data type might then be declared as \"posInt : PositiveInteger\".")
      class EnumerationLiteral extends objectmodel.core.ModelElement {

        @GenModel(documentation="The value associated with an enumeration identifier can be stored here. The attribute is optional because enumeration literals are not required to have a specific, displayable value. This is indicated by either an empty value attribute or a value attribute value whose expression body attribute is a zero-length string.")
        !resolve val objectmodel.core.Expression value;

        @GenModel(documentation="Identifies the Enumeration instance for which this enumeration literal is relevant.")
        transient ref Enumeration[1]#literal enumeration;
      }

      @GenModel(documentation="QueryExpression instances contain query statements in language-dependent form.")
      class QueryExpression extends objectmodel.core.ProcedureExpression {

        @GenModel(documentation="The ReportGroup referencing QueryExpressions.")
        ref cwmx.analysis.informationreporting.ReportGroup#reportQuery reportGroup;
      }

      @GenModel(documentation="The TypeAlias class is intended to provide a renaming capability for Classifier instances. This class is required to support situations in which creation of an alias for a class effectively creates a new class. For example, CORBA IDL type aliases have different typeCodes than their base types and are therefore treated as distinct types.")
      class TypeAlias extends objectmodel.core.DataType {

        @GenModel(documentation="Identifies the Classifier instance for which this TypeAlias instance acts as an alias.")
        ref objectmodel.core.Classifier[1]#alias type;
      }

      @GenModel(documentation="The Union class represents programming language unions and similarly structured data types. Because of the diversity of union semantics found across software systems, the Union and UnionMember classes are likely candidates for specialization to better capture union semantics in specific language extension packages.

A discriminated Union has a collection of UnionMembers that determine the sets of contents that the Union may contain. Such Unions have an attribute called the discriminator that identifies the memberCase value of the UnionMember that the Union currently contains. The discriminator is found via the UnionDiscriminator association to StructuralFeature. The discriminator may be embedded within UnionMembers or may be located outside the discriminator. If it is located within UnionMembers, the discriminator should occur in every UnionMember at the same location (often, the first).

Undiscriminated unions (for example, a C language union) are also supported, but have an empty discriminator reference, and the memberCase attribute of the UnionMembers it contains is ignored.

Undiscriminated Unions are often used to represent alternate views of a single physical
storage area. A fine degree of control over this aspect of Unions may be obtained by
creating a class that derives from both UnionMember and FixedOffsetField (in the
CWM Record package) and setting the offset attribute instances of that class
accordingly.")
      class Union extends objectmodel.core.Classifier {

        @GenModel(documentation="Identifies the StructuralFeature instance that serves as the discriminator for the Union.")
        ref objectmodel.core.StructuralFeature#discriminatedUnion discriminator;
      }

      @GenModel(documentation="UnionMembers are described as features of a Union and each represents one of the members of a Union. Note, however, that multiple case values can map to a single UnionMember. If isDefault is true, the union member is the default member.

UnionMember instances are allowed to have a memberCase and be the default case. UnionMember instances often represent structured storage areas. A particular UnionMember may be associated with a Classifier that describes its internal structure via the StructuralFeatureType association (defined in the ObjectModel::Core package). For example, the Record::Group class, itself a Classifier, can be used as the type of a UnionMember in a manner completely analogous to how it is used to describe the type of a structured field (see the instance diagrams in the Record metamodel chapter for details).")
      class UnionMember extends objectmodel.core.Attribute {

        @GenModel(documentation="Contains the value of the Union?s discriminator for this UnionMember.")
        !resolve val objectmodel.core.Expression memberCase;

        @GenModel(documentation="Indicates if this UnionMember is the default member of the Union (implying that when unstated, the Union?s discriminator would assume this instance?s memberCase value).")
        attr objectmodel.core.Boolean isDefault;
      }

    }

    @GenModel(documentation="The Expressions package depends on the following packages:

    org.omg::CWM::ObjectModel::Core

The CWM Expressions metamodel provides basic support for the definition of expression trees within the CWM. The intent of the Expressions metamodel is to provide a place for other CWM packages (such as Transformation) and CWM compliant tools to record shared expressions in a common form that can be used for interchange and lineage tracking.

The expression concept in the CWM Foundation takes a functional view of expression trees, resulting in the ability of relatively few expression types to represent a broad range of expressions. Every function or traditional mathematical operator that appears in an expression hierarchy is represented as a FeatureNode. For example, the arithmetic plus operation ?a + b? can be thought of as the function ?sum(a, b).? The semantics of a particular function or operation are left to specific tool implementations and are not captured by the CWM. 

The hierarchical nature of the CWM?s representation of expressions is achieved by the recursive nature of the OperationArgument association. This association allows the sub-hierarchies within an expression to be treated as actual parameters of their parent nodes.

OCL Representation of Expressions Constraints

[C-5-1] A FeatureNode that has parameters other than the\"this\" parameter represents a Feature that is also an Operation.
context FeatureNode inv:
if self.feature.ownerScope = #instance
then self.argument->size > 1 implies
   self.feature.oclIsKindOf(Operation)
else self.argument->size > 0 implies
   self.feature.oclIsKindOf(Operation)
endif

[C-5-2] If the FeatureNode represents an instance-scope feature, the first argument is a \"this\" or \"self\" argument; that is, the object invoking the feature. The convention is enforced by checking that the type of the first argument is the same as the type of the feature.
context FeatureNode inv:
self.feature.ownerScope = #instance implies
self.argument->first.type.allFeatures->includes(self.feature)

[C-5-3] If the FeatureNode represents a BehavioralFeature, the number of arguments must be equal to the number of the BehavioralFeature?s parameters, plus one for the ?this? parameter if the BehavioralFeature is of instance scope.
context FeatureNode inv:
self.feature.oclIsKindOf(BehavioralFeature) implies
(if self.feature.ownerScope = #instance
   then self.argument->size =
      self.feature.oclAsType(BehavioralFeature).parameters->size + 1
   else self.argument->size =
      self.feature.oclAsType(BehavioralFeature).parameters->size
endif)")
    @namespace(uri="http:///orgomg/cwm/foundation/expressions.ecore", prefix="orgomg.cwm.foundation.expressions")
    package expressions {
      @GenModel(documentation="All node types within an expression are derived from the ExpressionNode type.

An expression is stored as a collection of instances of the subtypes of ExpressionNode arranged in a hierarchical fashion. The ExpressionNode instance at the top (or ?root?) of the hierarchy represents the value of the expression and serves as a starting point for expression evaluation. Refer to the descriptions of the subtypes of ExpressionNode (ElementNode, ConstantNode, and FeatureNode) for additional information about the representation of expressions.

One important purpose for providing storage of expressions as a general feature of the CWM is to promote sharing them between tools and to provide a means for recording lineage relationships between components within expressions. Specific details of the implementation of expression operators are left to the implementing tools.

When ExpressionNode is used as the type of an Attribute, an instance of the Attribute can contain either an expression tree as described here or a textual representation of the expression in body and language values of in an attribute of type Expression (defined ObjectModel). The expression attribute is provided for the latter usage. To obtain CWM?s sharing and lineage tracking features for elements within an expression, the expression must be represented as an expression hierarcy.")
      class ExpressionNode extends objectmodel.core.Element {

        @GenModel(documentation="Contains a textual representation of the expression relevant for this ExpressionNode instance.")
        !resolve val objectmodel.core.Expression expression;

        @GenModel(documentation="Identifies the Classifier instance that represents the type of the expression at this level in the expression hierarchy. Although, formally, each node within an expression tree is capable of having a value and therefore, a data type, this reference is optional because modeling the data type of intermediate nodes in an expression tree is not always interesting, thereby reducing the effort required to create expression trees.")
        ref objectmodel.core.Classifier#expressionNode type;

        @GenModel(documentation="Identifies the FeatureNode for which this ExpressionNode instance represents the value of an argument. Because arguments can themselves represent entire expression sub-trees, this reference is used to create hierarchies of expression nodes, permitting representation of entire expression trees within the CWM.")
        transient ref FeatureNode#argument featureNode;
      }

      @GenModel(documentation="Instances of the ConstantNode class are ExpressionNodes that represent constant values within expressions. Appropriate uses of the ConstantNode class place the values of constants in the value attribute, rather than in the expression::body attribute inherited from ExpressionNode. The latter attribute is intended for a different purpose; see the description of the ExpressionNode class for details.")
      class ConstantNode extends ExpressionNode {

        @GenModel(documentation="The value of a constant in an expression tree.")
        attr objectmodel.core.Any value;
      }

      @GenModel(documentation="An ElementNode is a node in an expression that references some ModelElement instance. This subclass of ExpressionNode allows an expression to reference any CWM model element that is not a Feature and cannot, therefore, be represented as a FeatureNode.

Typically, use of this subclass of ExpressionNode implies that a tool attempting to evaluate the expression will be able to determine if the referenced ModelElement instance is also an instance of some interesting subclass of ModelElement that contains a value of interest in the expression.
")
      class ElementNode extends ExpressionNode {

        @GenModel(documentation="Identifies the ModelElement instance which this ElementNode references.")
        ref objectmodel.core.ModelElement[1]#elementNode modelElement;
      }

      @GenModel(documentation="The FeatureNode class represents ExpressionNode instances that are features (i.e., attributes or operations) of some Classifier instance within the CWM.

A FeatureNode with a null OperationArgument association represents either a parameter-less operation or an attribute value obtained from some StructuralFeature instance.")
      class FeatureNode extends ExpressionNode {

        @GenModel(documentation="Identifies the Feature (attribute or operation) which this FeatureNode instance represents.")
        ref objectmodel.core.Feature[1]#featureNode feature;

        @GenModel(documentation="Identifies the ExpressionNode instances that represent the actual arguments for this FeatureNode. If the argument reference is null, the FeatureNode is an attribute or parameter-less function or operation.")
        val ExpressionNode[*]#featureNode argument;
      }

    }

    @GenModel(documentation="The KeysIndexes package depends on the following package:

    org.omg::CWM::ObjectModel::Core

Keys and indexes as means for specifying instances and for identifying alternate sortings of instances are  epresented in the CWMFoundation so that they can be shared among the various data models that employ hem. The CWM Foundation defines the base concepts (uniqueness and relationships implemented as keys)  pon which more specific key structures can be built by other CWM and tool-specific packages.

The concepts of key and index have been placed in the CWM Foundation because they are available in many  types of data resources. In the CWM Foundation class and association descriptions that follow, relational model  examples are frequently used when discussing the definition and usage of key and index types. This is done because of the wide-spread availability of relational systems and is thought to promote an understanding of the underlying concepts. These concepts, however, are no less applicable to other data models as well.

The two central classes for representing the concept of keys are UniqueKey and KeyRelationship. UniqueKey instances correspond to the notion that keys represent the identity of instances -- similar to the relational model?s concept of a primary key or an object model?s concept of an object identity. In contrast, KeyRelationship instancescorrespond to the notion that keys embedded in an instance can be used to determine the identity of other related instances -- similar to the relational model concept of foreign key and the object model concept of a reference. Consequently, UniqueKey and KeyRelationship are best thought of as representing roles that collections of Features of Classifiers play rather than Classifiers describing the internal structure of keys. Representing keys as roles rather than structural entities provides greater flexibility and allows the reuse of  Features in multiple keys and in differing relationships to each other. Associations within the KeysIndexes package describe how UniqueKey and KeyRelationship instances describe the roles they play for various
Class instances and the StructuralFeature instances they contain.

OCL Representation of KeysIndexes Constraints

[C-6-1]The isAscending attribute is valid only if the isSorted attribute is True.
context IndexedFeature inv:
self.isAscending->notEmpty implies self.index.isSorted

[C-6-2] A KeyRelationship instance must be owned by one and only one Class
instance.
context KeyRelationship inv:
(self.namespace->size = 1) and self.namespace.oclIsKindOf(Class)

[C-6-3] An UniqueKey instance must be owned by one and only one Class instance.
context UniqueKey inv:
(self.namespace->size = 1) and self.namespace.oclIsKindOf(Class)")
    @namespace(uri="http:///orgomg/cwm/foundation/keysindexes.ecore", prefix="orgomg.cwm.foundation.keysindexes")
    package keysindexes {
      @GenModel(documentation="A UniqueKey represents a collection of features of some Class that, taken together, uniquely identify instances of the Class. Instances of UniqueKey for which all features are required to have non-null values are candidates for use as primary keys such as those defined by relational DBMSs.")
      class UniqueKey extends objectmodel.core.ModelElement {

        @GenModel(documentation="Identifies the StructuralFeature instances that make up the unique key. The ordered constraint is used to represent the sequence of StructuralFeature instances that make up the UniqueKey instance?s key.
")
        ref objectmodel.core.StructuralFeature[+]#uniqueKey feature;

        @GenModel(documentation="Identifies the KeyRelationship instances that reference this UniqueKey instance. In the relational case, this reference identifies the foreign keys that reference this primary key.")
        ref KeyRelationship[*]#uniqueKey keyRelationship;
      }

      @GenModel(documentation="Instances of the Index class represent the ordering of the instances of some other Class, and the Index is said to \"span\" the Class. Indexes normally have an ordered set of attributes of the Class instance they span that make up the \"key\" of the index; this set of relationships is represented by the IndexedFeature class that indicates how the attributes are used by the Index instance.

The Index class is intended primarily as a starting point for tools that require the notion
of an index.")
      class Index extends objectmodel.core.ModelElement {

        @GenModel(documentation="If True, this Index instance is used as a partitioning index.")
        attr objectmodel.core.Boolean isPartitioning;

        @GenModel(documentation="If True, the Index instance is maintained in a sorted order.")
        attr objectmodel.core.Boolean isSorted;

        @GenModel(documentation="The isUnique attribute is True if the Index instance guarantees all of its instances have a unique key value.")
        attr objectmodel.core.Boolean isUnique;

        @GenModel(documentation="Identifies the IndexedFeature instance that associates this Index with one of the StructuralFeature elements of the Index?s key. The ordered constraint on this reference can be used to represent the sequential order of elements of the Index?s key.")
        val IndexedFeature[*]#index indexedFeature;

        @GenModel(documentation="Identifies the Class instance the Index instance spans.")
        ref objectmodel.core.Class[1]#index spannedClass;
      }

      @GenModel(documentation="KeyRelationship instances represent relationships between UniqueKey instances and the Class(es) that reference them. This class is intended as a starting point for the creation of \"foreign key\" and other associative relationships.")
      class KeyRelationship extends objectmodel.core.ModelElement {

        @GenModel(documentation="Identifies the StructuralFeature instances that make up the unique key. The ordered constraint is used to represent the sequence of StructuralFeature instances that make up the UniqueKey instance?s key. In the relational model case, these StructuralFeature instances identify the columns that make up a table?s primary key.")
        ref objectmodel.core.StructuralFeature[+]#keyRelationship feature;

        @GenModel(documentation="Identifies the UniqueKey instance that serves as the \"primary key\" for this KeyRelationship instance.")
        ref UniqueKey[1]#keyRelationship uniqueKey;
      }

      @GenModel(documentation="Instances of the IndexedFeature class map StructuralFeature instances of the spanned Class instance to the Index instances that employ them as (part of) their key. Attributes of IndexedFeature instances indicate how specific StructuralFeature instance are used in Index keys.")
      class IndexedFeature extends objectmodel.core.ModelElement {

        @GenModel(documentation="The isAscending attribute is true if the feature is sorted in ascending order and false, if descending order.")
        attr objectmodel.core.Boolean isAscending;

        @GenModel(documentation="Identifies the StructuralFeature instance for which this IndexedFeature instance is relevant.")
        ref objectmodel.core.StructuralFeature[1]#indexedFeature feature;

        @GenModel(documentation="Identifies the Index instance for which this IndexedFeature instance is relevant.")
        transient ref Index[1]#indexedFeature index;
      }

    }

    @GenModel(documentation="The Software Deployment package depends on the following packages:

    org.omg::CWM::ObjectModel::Core
    org.omg::CWM::Foundation::BusinessInformation
    org.omg::CWM::Foundation::TypeMapping

The Software Deployment package contains classes to record how the software in a data warehouse is used.

A software package is represented as a SoftwareSystem object, which is a subtype of Subsystem. A SoftwareSystem may reference one or more TypeSystems that define the datatypes supported by the SoftwareSystem. The mappings between datatypes in different TypeSystems may be recorded as TypeMappings, as described in the TypeMapping metamodel.

The separate components of a software package are each represented as Components that are either owned or imported by the SoftwareSystem. When a SoftwareSystem is installed, the deployment is recorded as a DeployedSoftwareSystem and a set of DeployedComponents.

A DeployedComponent represents the deployment of a specific Component on a specific computer. Dependencies between DeployedComponents on the same computer may be documented as Usage dependencies between them.

Individual computers are represented as Machine objects, located at a Site. A Site represents a geographical location, which may be recorded at any relevant level of granularity, e.g. a country, a building, or a room in a building. Hierarchical links between Sites at different levels of granularity may be documented.

A DataManager is a DeployedComponent such as a DBMS or file management system that provides access to data. It may be associated with one or more data Packages identifying the Schema, Relational Catalog, Files or other data containers that it provides access to.

A DataProvider is a DeployedComponent that acts as a client to provide access to data held by a DataManager. For example, an ODBC or JDBC client on a specific Machine would be represented as a DataProvider. A DataProvider may have several ProviderConnections, each identifying a DataManager that may be accessed using the DataProvider.

If a DataProvider uses a name for a data Package that is different from the actual name used by the DataManager, a PackageUsage object can be added to record this. 

As a DataProvider is a subtype of DataManager, it is possible for a DataProvider to access data from a DataManager which is actually a DataProvider acting as a client to yet another DataManager.

The model for the Software Deployment package is shown in three diagrams. The first diagram shows the objects related to software deployment, while the second diagram displays the DataManager and DataProvider area of the model. The third diagram shows the inheritance structure for all the classes in the Software Deployment package.

OCL Representation of SoftwareDeployment Constraints

[C-8-1] A PackageUsage must have a single Package (or subtype of Package) as its supplier
context PackageUsage inv:
self.supplier->size=1 and
self.supplier->at(1).oclIsKindOf(Package)

[C-8-2] A ProviderConnection must not associate a DataProvider with itself
context ProviderConnection inv:
self.dataManager <> self.dataProvider

[C-8-3] A Site must not have a containingSite reference that refers to itself.
context Site inv:
self.containingSite -> forAll (c | c <> self)")
    @namespace(uri="http:///orgomg/cwm/foundation/softwaredeployment.ecore", prefix="orgomg.cwm.foundation.softwaredeployment")
    package softwaredeployment {
      @GenModel(documentation="A Site represents a geographical location. It provides a grouping mechanism for a group of machines at the same location.

Sites may be documented at different levels of granularity; containment links may be used to record hierarchical relationships between Sites.")
      class Site extends businessinformation.Location {

        @GenModel(documentation="Identifies other Sites of which the current Site forms a part.")
        ref Site[*]#containedSite containingSite;

        @GenModel(documentation="Identifies other Sites that are part of the current Site.")
        ref Site[*]#containingSite containedSite;

        @GenModel(documentation="Identifies the Machines located at the Site.")
        ref Machine[*]#site machine;
      }

      @GenModel(documentation="A Machine represents a computer. The Site at which the Machine is located and the Components deployed on the Machine may be recorded.")
      class Machine extends objectmodel.core.Namespace {

        @GenModel(documentation="A fixed IP address for the Machine.")
        attr objectmodel.core.String ipAddress;

        @GenModel(documentation="A Host Name for the Machine. This may be used to identify the Machine on the network when IP addresses are dynamically allocated.")
        attr objectmodel.core.String hostName;

        @GenModel(documentation="An identification code for the Machine.")
        attr objectmodel.core.String machineID;

        @GenModel(documentation="Identifies the DeployedComponents on the Machine.")
        val DeployedComponent[*]#machine deployedComponent;

        @GenModel(documentation="Identifies the Site on which the Machine is located.")
        ref Site#machine site;
      }

      @GenModel(documentation="A SoftwareSystem represents a specific release of a software product. It consists of a set of software Components.")
      class SoftwareSystem extends objectmodel.core.Subsystem {

        @GenModel(documentation="Identifies the type of the software product. One of the following predefined values should be used if appropriate:

    OS, DBMS, MDDB, FileSystem, ODBC, JDBC or Application.")
        attr objectmodel.core.String type;

        @GenModel(documentation="This is used in conjunction with the type attribute to provide additional information about the type of the software product.

For some of the predefined types, suggested subtype values are listed below:

   For an Operating System product (type OS):  
      AIX, Linux, MVS, NT, Solaris, SunOS, VMS or Windows.
   For a Database Management System product (type DBMS): 
      DB2, DMS II, IMS, Informix, Oracle, SQLServer or Sybase.
   For a Multidimensional Database product (type MDDB): 
      Essbase or Express.")
        attr objectmodel.core.String subtype;

        @GenModel(documentation="The supplier of the software product.")
        attr objectmodel.core.String supplier;

        @GenModel(documentation="The version identification for the software product.")
        attr objectmodel.core.String version;

        @GenModel(documentation="Identifies the deployments of the SoftwareSystem.")
        ref DeployedSoftwareSystem[*]#softwareSystem deployment;

        @GenModel(documentation="Identifies a TypeSystem containing datatypes supported by the SoftwareSystem.")
        ref typemapping.TypeSystem[*]#supportingSystem typespace;
      }

      @GenModel(documentation="A DeployedComponent represents the deployment of a Component on a specific Machine.

It may represent the deployment of any type of Component. However, if the Component is part of a SoftwareSystem, the DeployedComponent should be part of a DeployedSoftwareSystem.

Usage dependencies may be used to document that one DeployedComponent uses another DeployedComponent.")
      class DeployedComponent extends objectmodel.core.Package {

        @GenModel(documentation="A pathname for the DeployedComponent within the Machine?s file system.")
        attr objectmodel.core.String pathname;

        @GenModel(documentation="Identifies the Machine on which a DeployedComponent is deployed.")
        transient ref Machine#deployedComponent machine;

        @GenModel(documentation="Identifies the DeployedSoftwareSystem.")
        ref DeployedSoftwareSystem[*]#deployedComponent deployedSoftwareSystem;

        @GenModel(documentation="Identifies the Component deployed.")
        ref Component[1]#deployment component;
      }

      @GenModel(documentation="A DeployedSoftwareSystem represents a deployment of a SoftwareSystem.

Its associated DeployedComponents identify the individual Component deployments that constitute the DeployedSoftwareSystem. These DeployedComponents are not necessarily all deployed on the same Machine.")
      class DeployedSoftwareSystem extends objectmodel.core.Package {

        @GenModel(documentation="Identifies the SoftwareSystem deployed.")
        ref SoftwareSystem[1]#deployment softwareSystem;

        @GenModel(documentation="Identifies the DeployedComponent.")
        ref DeployedComponent[*]#deployedSoftwareSystem deployedComponent;
      }

      @GenModel(documentation="A DataManager represents a DeployedComponent that manages access to data. For example, a deployed DBMS or File Management System would be represented as a DataManager.

The DataManager may be associated with one or more data Packages identifying the Schema, Relational Catalog, Files, or other data container that it provides access to.")
      class DataManager extends DeployedComponent {

        @GenModel(documentation="Indicates whether or not the DataManager treats lower case letters within object names as being different from the corresponding upper case letters.")
        attr objectmodel.core.Boolean isCaseSensitive;

        @GenModel(documentation="Identifies the ProviderConnections that may be used by clients to access the data provided by this DataManager. ")
        ref ProviderConnection[*]#dataManager clientConnection;

        @GenModel(documentation="Identifies a Package containing the definition of the data made available by the
DataManager.")
        ref objectmodel.core.Package[*]#dataManager dataPackage;
      }

      @GenModel(documentation="A DataProvider is a deployed software Component that acts as a client to provide access to data that is managed by another product. For instance, a DataProvider might represent a deployed ODBC or JDBC product.

The DataProvider may have resourceConnection references to ProviderConnections identifying the DataManagers to which it provides access.")
      class DataProvider extends DataManager {

        @GenModel(documentation="Identifies the ProviderConnections that the DataProvider may use to access DataManagers.")
        val ProviderConnection[*]#dataProvider resourceConnection;
      }

      @GenModel(documentation="A ProviderConnection represents a connection that allows a DataProvider acting as a client to access data from a specific DataManager. For example a ProviderConnection could represent a connection from an ODBC or JDBC client to a DBMS.")
      class ProviderConnection extends objectmodel.core.ModelElement {

        @GenModel(documentation="Indicates whether the ProviderConnection only allows read access to the DataManager.")
        attr objectmodel.core.Boolean isReadOnly;

        @GenModel(documentation="Identifies the DataProvider that uses the ProviderConnection.")
        transient ref DataProvider[1]#resourceConnection dataProvider;

        @GenModel(documentation="Identifies the DataManager accessed by the ProviderConnection.")
        ref DataManager[1]#clientConnection dataManager;
      }

      @GenModel(documentation="A Component represents a physical piece of implementation of a system, including software code (source, binary or executable) or equivalents such as scripts or command files. A Component is a subtype of Classifier, and so may have its own Features, such as Attributes and Operations.

Deployment of a Component on a specific Machine is represented as a DeployedComponent.")
      class Component extends objectmodel.core.Classifier {

        @GenModel(documentation="Identifies the DeployedComponent.")
        ref DeployedComponent[*]#component deployment;
      }

      @GenModel(documentation="A PackageUsage represents a usage of a Package. It is particularly relevant in situations where a specific usage uses an alternative name for the Package, as this alternative name can be recorded using the packageAlias attribute.

For example, if a DataProvider representing an ODBC or JDBC client uses a name for a relational database that is different from the dataPackage name used by the RDBMS server, a PackageUsage that has the relevant ProviderConnection as client and the server?s data Package as supplier can be added. Its packageAlias attribute can be used to record the name by which the data Package is known to the DataProvider.")
      class PackageUsage extends objectmodel.core.Dependency {

        @GenModel(documentation="If this attribute is present, it identifies the name by which the Package is known to the client.")
        attr objectmodel.core.Name packageAlias;
      }

    }

    @GenModel(documentation="The TypeMapping package depends on the following packages:

    org.omg::CWM::ObjectModel::Core

The TypeMapping package supports the mapping of data types between different systems. The purpose of these mappings is to indicate data types in different systems that are sufficiently compatible that data values can be interchanged between them. Multiple mappings are allowed between any pair of types and a means of identifying the preferred mapping is provided.

OCL Representation of TypeMapping Constraints

[C-8-1] The sourceType and targetType references may not refer to the same
Classifier instance.
context TypeMapping inv:
self.sourceType <> self.targetType

[C-8-2] A TypeSystem may own only Classifiers and TypeMappings.
context TypeSystem inv:
self.ownedElement->forAll( e | e.oclIsKindOf(Classifier) or e.oclIsKindOf(TypeMapping))")
    @namespace(uri="http:///orgomg/cwm/foundation/typemapping.ecore", prefix="orgomg.cwm.foundation.typemapping")
    package typemapping {
      @GenModel(documentation="TypeMapping instances permit the creation of mappings between data types defined within different environments and are used to indicate data type compatibilities that permit direct assignment of values from one environment (the \"source\" type) into equivalent values in another environment (the \"target\" type). For example, an integer field data type in a record-oriented DBMS (the source type) might be mapped to a compatible integer data type in a relational DBMS (the target type).

Whereas the actual transfer of data values between environments is accomplished using the CWM?s Transformation package, TypeMapping instances can be used the identify both the permissible and preferred mappings between data types. Value interchange between a pair of data types is considered permissible if a TypeMapping instance is defined for the pair. A TypeMapping instance is considered the preferred mapping if the instance?s isBestMatch attribute has the value true.

Typically, there will be one TypeMapping Instance between a pair of data types that is considered the preferred mapping. To promote flexible use of this feature, there is no requirement that a preferred TypeMapping instance must be identified between a pair of data types nor are multiple preferred instances prohibited. In these latter cases, however, the precise semantics are usage-defined.

Interchange between data types defined by non-preferred mappings may often function as intended. However, the isLossy boolean may be set to indicate that such interchanges may be subject to validity restrictions in certain circumstances. For example, it may be valid to move data values from a 32-bit integer data type to a 16-bit integer data type as long as the actual values in the 32-bit underlying data type do not exceed the range permitted for 16-bit integers. The CWM Foundation leaves the understanding and handling of such differences to individual tools. If such differences must be modeled, consider using the CWM Transformation package to filter data values during interchange.

TypeMapping instances are unidirectional, so two instances are required to show that a data type pair can be mutually interchanged between environments.")
      class TypeMapping extends objectmodel.core.ModelElement {

        @GenModel(documentation="True if this TypeMapping instance represents the best available mapping between a pair of data types in different software systems.")
        attr objectmodel.core.Boolean isBestMatch;

        @GenModel(documentation="True if this TypeMapping instance may result in a data conversion error if the source data is within certain ranges. For example, storing a 32-bit unsigned integer value into a 16-bit unsigned integer container will result in a data conversion error only when the source data has a value greater than 65535.")
        attr objectmodel.core.Boolean isLossy;

        @GenModel(documentation="Identifies the Classifier instance that is the source of information exchange.")
        ref objectmodel.core.Classifier[1]#mappingFrom sourceType;

        @GenModel(documentation="Identifies the Classifier instance that is the target of information exchange.")
        ref objectmodel.core.Classifier[1]#mappingTo targetType;
      }

      @GenModel(documentation="Instances of the TypeSystem class collect together the data types (subclasses of Classifier) defined by a software system and the TypeMapping instances defining how they are mapped to data types in other TypeSystems. TypeMapping instances collected by a TypeSystem instance include both those in which the software system?s data types act as sources and as targets of mappings. Classifiers and TapeMappings are
maintained in a single collection via the ElementOwnership association but can be distinguished by their respective types.

Because it is a Package, a TypeSystem can also serve to collect together the Classifier instances for a particular software system.")
      class TypeSystem extends objectmodel.core.Package {

        @GenModel(documentation="Identifies a SoftwareSystem that supports the datatypes defined by the TypeSystem.")
        ref softwaredeployment.SoftwareSystem[*]#typespace supportingSystem;

        @GenModel(documentation="A string describing the version identification of the type system represented.")
        attr objectmodel.core.String version;
      }

    }

  }

  @namespace(uri="http:///orgomg/cwm/resource.ecore", prefix="orgomg.cwm.resource")
  package resource {
    @GenModel(documentation="The Relational package describes data accessible through a relational interface such as a native RDBMS, ODBC, or JDBC. The Relational package is based on the [SQL] standard section concerning RDBMS catalogs.

The scope of the top level container, Catalog, is intended to cover all the tables a user can use in a single statement. A catalog is also the unit which is managed by a data resource. A catalog contains schemas which themselves contain tables. Tables are made of columns which have an associated data type.

The Relational package uses constructs in the ObjectModel package to describe the object extensions added to SQL by the [SQL] standards. 

The Relational package also addresses the issues of indexing, primary keys and foreign keys by extending the corresponding concepts from the Foundation packages.

The Relational package depends on the following packages:

    org.omg::CWM::ObjectModel::Behavioral
    org.omg::CWM::ObjectModel::Core
    org.omg::CWM::ObjectModel::Instance
    org.omg::CWM::Foundation::DataTypes
    org.omg::CWM::Foundation::KeysIndexes

The Relational package references the ObjectModel and Foundation packages.

OCL Representation of Relational Constraints

[C-1] temporaryScope is valid only if the isTemporary is True.
context Tabl e inv:
self.temporaryScope.notEmpty implies self.isTemporary=True

[C-2] checkOption is valid only if isReadOnly is False.
context View inv:
self.checkOption implies self.isReadOnly=False

[C-3] scale is valid only if precision is specified.
context Column inv:
self.scale.nonEmpty implies self.precision.notEmpty")
    @namespace(uri="http:///orgomg/cwm/resource/relational.ecore", prefix="orgomg.cwm.resource.relational")
    package relational {
      @GenModel(documentation="A Catalog is the unit of logon and identification. It also identifies the scope of SQL statements: the tables contained in a catalog can be used in a single SQL statement.")
      class Catalog extends objectmodel.core.Package {

        @GenModel(documentation="The name of the default character set used for the values in the column.
This field applies only to columns whose datatype is a character string.")
        attr objectmodel.core.String defaultCharacterSetName;

        @GenModel(documentation="The name of the default collation sequence used to sort the data values in the column.")
        attr objectmodel.core.String defaultCollationName;
      }

      @GenModel(documentation="A schema is a named collection of tables")
      class Schema extends objectmodel.core.Package {
      }

      @GenModel(documentation="A set of columns, representing either the result of a query, a view or a physical table.")
      class ColumnSet extends objectmodel.core.Class {
      }

      @GenModel(documentation="A catalogued set of columns, which may be Table or View.

Note for typed tables: It is assumed that the typed table will own a set of columns conforming to the type they are OF. This set of columns allows the manipulation of the table by products which ignore this [SQL] extension. It also allows the columns of type REF, to be copied to a column with a SCOPE reference.")
      class NamedColumnSet extends ColumnSet {

        @GenModel(documentation="A Trigger which references this table in its expression")
        ref Trigger[*]#usedColumnSet usingTrigger;

        @GenModel(documentation="For typed Tables and Views, reference to the base SQLStructuredType.
")
        ref SQLStructuredType#columnSet type;

        @GenModel(documentation="Reference to the Column which contains theSCOPE clause.")
        ref Column[*]#optionScopeColumnSet optionScopeColumn;
      }

      @GenModel(documentation="A materialized NamedColumnSet.")
      class Table extends NamedColumnSet {

        @GenModel(documentation="Indicates that the table content is temporary. SQL92 standards provide two types of temporary tables (local Temporary and Global Temporary). However, RDBMS products have implemented variations on this theme. It is recommended that the product manufacturers provide specific temporary information (besides the temporaryScope attribute) in their extensions. ")
        attr objectmodel.core.Boolean isTemporary;

        @GenModel(documentation="This attribute is meaningful only when the isTemporary flag is True [C-1]. The scope indicates when the data of this table are available. \"SESSION\", \"APPLICATION\" are examples of possible values. Look at the Scope attribute for Global Temporary tables in the SQL standards for more details.")
        attr objectmodel.core.String temporaryScope;

        @GenModel(documentation="Indicates that the Table is a System Table (generally part of or view on the system catalog).")
        attr objectmodel.core.Boolean isSystem;

        @GenModel(documentation="Associates triggers executed during changes to the table.")
        ref Trigger[*]#table trigger;
      }

      @GenModel(documentation="A view is a non-materialized set of rows, defined by the associated query.
")
      class View extends NamedColumnSet {

        @GenModel(documentation="Indicates whether the underlying tables can be updated through an update to this View.")
        attr objectmodel.core.Boolean isReadOnly;

        @GenModel(documentation="This field is meaningful only if the view is not ReadOnly. CheckOption indicates that the RDBMS will validate that changes made to the data verify the view filtering condition and belong to the view result set.")
        attr objectmodel.core.Boolean checkOption;

        @GenModel(documentation="The query associated with the View.

The query result must match the set of Columns associated with the View (in parent class ColumnSet)")
        !resolve val foundation.datatypes.QueryExpression queryExpression;
      }

      @GenModel(documentation="The result set of a query.")
      class QueryColumnSet extends ColumnSet {

        @GenModel(documentation="The query expression generating this result. The language attribute of the expression should generally begin with \"SQL\"")
        !resolve val foundation.datatypes.QueryExpression query;
      }

      @GenModel(documentation="A SQLDataType is used to reference any datatype associated with a column")
      abstract class SQLDataType extends objectmodel.core.Classifier {

        @GenModel(documentation="The number assigned to the datatype by the owning RDBMS")
        attr objectmodel.core.Integer typeNumber;
      }

      @GenModel(documentation="A datatype defined as a Distinct Type, per [SQL] standard.")
      class SQLDistinctType extends SQLDataType, foundation.datatypes.TypeAlias {

        @GenModel(documentation="The length of fixed length character or byte strings. Maximum length if length is
variable.")
        attr objectmodel.core.Integer length;

        @GenModel(documentation="The total number of digits in the field")
        attr objectmodel.core.Integer precision;

        @GenModel(documentation="The number of digits on the right of the decimal separator.")
        attr objectmodel.core.Integer scale;

        @GenModel(documentation="The Simple type used to define the distinct class.")
        ref SQLSimpleType[1]#sqlDistinctType sqlSimpleType;
      }

      @GenModel(documentation="A simple datatype used with an SQL column. Examples are Integer, Varchar, LOB, CLOB, etc...")
      class SQLSimpleType extends SQLDataType, objectmodel.core.DataType {

        @GenModel(documentation="See [SQL], corresponding field in DATA_TYPE_DESCRIPTOR")
        attr objectmodel.core.Integer characterMaximumLength;

        @GenModel(documentation="See [SQL], corresponding field in DATA_TYPE_DESCRIPTOR")
        attr objectmodel.core.Integer characterOctetLength;

        @GenModel(documentation="See [SQL], corresponding field in DATA_TYPE_DESCRIPTOR")
        attr objectmodel.core.Integer numericPrecision;

        @GenModel(documentation="See [SQL], corresponding field in DATA_TYPE_DESCRIPTOR")
        attr objectmodel.core.Integer numericPrecisionRadix;

        @GenModel(documentation="See [SQL], corresponding field in DATA_TYPE_DESCRIPTOR")
        attr objectmodel.core.Integer numericScale;

        @GenModel(documentation="See [SQL], corresponding field in DATA_TYPE_DESCRIPTOR")
        attr objectmodel.core.Integer dateTimePrecision;

        @GenModel(documentation="Distinct types that use this simple type.")
        ref SQLDistinctType[*]#sqlSimpleType sqlDistinctType;
      }

      @GenModel(documentation="A Datatype defined as Structured Type, per [SQL] standard.")
      class SQLStructuredType extends objectmodel.core.Class, SQLDataType {

        @GenModel(documentation="A NamedColumnSet created as of this type.")
        ref NamedColumnSet[*]#type columnSet;

        @GenModel(documentation="Reference to a column of an SQLStructuredType (otherType) which is created with a REF clause referencing this SQLStructuredType (thisType). Note that in general, otherType and thisType are two different instances of SQLStructuredType.")
        ref Column[*]#referencedTableType referencingColumn;
      }

      @GenModel(documentation="A column in a result set, a view, a table, or an SQLStructuredType.")
      class Column extends objectmodel.core.Attribute {

        @GenModel(documentation="The total number of digits in the field.")
        attr objectmodel.core.Integer precision;

        @GenModel(documentation="The number of digits on the right of the decimal separator.")
        attr objectmodel.core.Integer scale;

        @GenModel(documentation="Indicates if null values are valid in this column.

Note: Default values for Column data are provided in initialValue in the UML Attribute class (the class from which the Column class inherits).")
        attr enumerations.NullableType isNullable;

        @GenModel(documentation="The length of fixed length character or byte strings. Maximum length if length is variable.")
        attr objectmodel.core.Integer length;

        @GenModel(documentation="The name of the collation sequence used to sort the data values in the column.
This applies only to columns whose datatype is a form of character string.")
        attr objectmodel.core.String collationName;

        @GenModel(documentation="The name of the character set used for the values in the column.
This field applies only to columns whose datatype is a character string.")
        attr objectmodel.core.String characterSetName;

        @GenModel(documentation="The column, used in an SQLStructuredType is a REF to a type. This references the REF?ed SQLStructuredType. ")
        ref SQLStructuredType#referencingColumn referencedTableType;

        @GenModel(documentation="Reference to the NamedColumnSet indicated in the SCOPE clause of the Column definition.


")
        ref NamedColumnSet#optionScopeColumn optionScopeColumnSet;
      }

      @GenModel(documentation="This class describes Relational DBMS Stored procedures and functions.")
      class Procedure extends objectmodel.behavioral.Method {

        @GenModel(documentation="A Procedure can be either a Function or a true Procedure. This indicates whether this object returns a value or not.")
        attr enumerations.ProcedureType type;
      }

      @GenModel(documentation="An action run by the DBMS when specified events occur on the table owning the Trigger")
      class Trigger extends objectmodel.core.ModelElement {

        @GenModel(documentation="Indicates what types of events are using the current Trigger.")
        attr enumerations.EventManipulationType eventManipulation;

        @GenModel(documentation="A boolean expression which defines when the trigger has to be executed")
        !resolve val objectmodel.core.BooleanExpression actionCondition;

        @GenModel(documentation="The Trigger action itself")
        !resolve val objectmodel.core.ProcedureExpression actionStatement;

        @GenModel(documentation="It indicates if the trigger is called once per statement execution or before or after each row of the table is modified.")
        attr enumerations.ActionOrientationType actionOrientation;

        @GenModel(documentation="It indicates if the trigger activity is run before or after the statement or row is modified.")
        attr enumerations.ConditionTimingType conditionTiming;

        @GenModel(documentation="The alias for the owning table name, used in the actionStatement, to represent the state of the table after the insert/delete/update")
        attr objectmodel.core.String conditionReferenceNewTable;

        @GenModel(documentation="The alias for the name of the owning table, used in the actionStatement, to represent the state of the table before the update/delete/insert.")
        attr objectmodel.core.String conditionReferenceOldTable;

        @GenModel(documentation="NamedColumnSets referenced by the actionStatement or the actionCondition.")
        ref NamedColumnSet[*]#usingTrigger usedColumnSet;

        @GenModel(documentation="The table which owns the Trigger")
        ref Table[1]#trigger table;
      }

      @GenModel(documentation="An Index on a table.")
      class SQLIndex extends foundation.keysindexes.Index {

        @GenModel(documentation="Which subset of the table is indexed")
        attr objectmodel.core.String filterCondition;

        @GenModel(documentation="Entries in this index can be null")
        attr objectmodel.core.Boolean isNullable;

        @GenModel(documentation="The index is updated automatically")
        attr objectmodel.core.Boolean autoUpdate;
      }

      @GenModel(documentation="A condition to define uniqueness of rows in a table. An example of UniqueConstraint is a primary key")
      class UniqueConstraint extends foundation.keysindexes.UniqueKey {

        @GenModel(documentation="Indicates if the validity of the UniqueConstraint is to be tested at each statement or at the end of a transaction.")
        attr enumerations.DeferrabilityType deferrability;
      }

      @GenModel(documentation="A Foreign Key associates columns from one table with columns of another table.

")
      class ForeignKey extends foundation.keysindexes.KeyRelationship {

        @GenModel(documentation="An enumerated type. Indicates the disposition of the data records containing the foreign key value when the record of the matching primary key is deleted.")
        attr enumerations.ReferentialRuleType deleteRule;

        @GenModel(documentation="Same as deleteRule for updates of the primary key data record")
        attr enumerations.ReferentialRuleType updateRule;

        @GenModel(documentation="Indicates if the validity of the ForeignKey is to be tested at each statement or at the end of a transaction.")
        attr enumerations.DeferrabilityType deferrability;
      }

      @GenModel(documentation="Associates an index with its columns.

This is really an association (link) class. It is associated with one index and one column.
")
      class SQLIndexColumn extends foundation.keysindexes.IndexedFeature {
      }

      @GenModel(documentation="There is only one UniqueConstraint of type PrimaryKey per Table. It is implemented specifically by each RDBMS.")
      class PrimaryKey extends UniqueConstraint {
      }

      @GenModel(documentation="An instance of a ColumnSet.")
      class Row extends objectmodel.instance.Object {
      }

      @GenModel(documentation="The value in a column instance.")
      class ColumnValue extends objectmodel.instance.DataValue {
      }

      @GenModel(documentation="A rule that specifies the values allowed in one or more columns of every row of a table.")
      class CheckConstraint extends objectmodel.core.Constraint {

        @GenModel(documentation="Indicates the timing of the constraint enforcement during multiple-user updates.")
        attr enumerations.DeferrabilityType deferrability;
      }

      @GenModel(documentation="Each instance of RowSet owns a collection of Row instances. The inherited association between Namespace (a superclass of Package) and ModelElement is used to contain Instances.")
      class RowSet extends objectmodel.instance.Extent {
      }

      @GenModel(documentation="Parameters of stored procedures.")
      class SQLParameter extends objectmodel.behavioral.Parameter {
      }

      @GenModel(documentation="The enumerations and datatypes used in the Relational model.")
      @namespace(uri="http:///orgomg/cwm/resource/relational/enumerations.ecore", prefix="orgomg.cwm.resource.relational.enumerations")
      package enumerations {
        @GenModel(documentation="Used in Trigger. 
It indicates if the trigger is called once per statement execution or before/after each row of the table is modified.")
        enum ActionOrientationType {

          @GenModel(documentation="The Trigger is executed befors/after each row modification, even if the SQL statement modifies several rows of the table.")
          row = 0;

          @GenModel(documentation="The Trigger is called once per statement execution, independently of the number of changes made by the statement.")
          statement = 1;
        }

        @GenModel(documentation="Used in Triggers.
It indicates if the trigger activity is run before or after the statement or row is modified.")
        enum ConditionTimingType {

          @GenModel(documentation="The Trigger activity is run before the data is changed in the table.")
          before = 0;

          @GenModel(documentation="This Trigger activity is run after the data are modified in the table.")
          after = 1;
        }

        @GenModel(documentation="Used in Foreign Keys
Indicates if the Foreign Key validation should be deferred to the end of the transaction or executed immadiately at the end of the statement.
This is the value used at the beginning of a transaction. It can be changed within a transaction.")
        enum DeferrabilityType {

          @GenModel(documentation="By default, the test for Foreign Key validity is performed at the end of the transaction")
          initiallyDeferred = 0;

          @GenModel(documentation="By default, the test for ForeignKey validity is performed at each statement")
          initiallyImmediate = 1;

          @GenModel(documentation="The test for Foreign Key validity is performed at each statement and cannot be changed in the transaction.")
          notDeferrable = 2;
        }

        @GenModel(documentation="Used in Trigger.
Indicates what types of events are using the current Trigger. 
")
        enum EventManipulationType {

          @GenModel(documentation="The Trigger activity is used for each insert statement on the table.")
          insert = 0;

          @GenModel(documentation="The Trigger is used for each delete statement on the table.")
          delete = 1;

          @GenModel(documentation="The Trigger is used for each update statement of the table. ")
          update = 2;
        }

        @GenModel(documentation="Used in Column.
Indicates if a Column may contain null values.")
        enum NullableType {

          @GenModel(documentation="The Column may not contain null values")
          columnNoNulls = 0;

          @GenModel(documentation="The column may contain null values")
          columnNullable = 1;

          @GenModel(documentation="It is not known whether null values are allowed or not. ")
          columnNullableUnknown = 2;
        }

        @GenModel(documentation="Used in Procedure.
Indicates if the Procedure is a Function or a Procedure")
        enum ProcedureType {

          @GenModel(documentation="This is a procedure, without returned value.")
          procedure = 0;

          @GenModel(documentation="This is a function, with a returned value.")
          function = 1;
        }

        @GenModel(documentation="Used in Foreign Key.
It indicates the action taken on the row containing a foreign key value, when the primary key value referenced is deleted or updated.")
        enum ReferentialRuleType {

          @GenModel(documentation="The row with the foreign key remains and the foreign key will not match a primary key.")
          importedKeyNoAction = 0;

          @GenModel(documentation="The row with the foreign key is deleted.")
          importedKeyCascade = 1;

          @GenModel(documentation="The foreign key value is set to NULL.")
          importedKeySetNull = 2;

          @GenModel(documentation="The deletion or update of the primary key is not permitted and will fail.")
          importedKeyRestrict = 3;

          @GenModel(documentation="The foreign key is set to the default value of its column.")
          importedKeySetDefault = 4;
        }

      }

    }

    @GenModel(documentation="The Record package covers the basic concept of a record and its structure. The package takes a broad view of the notion of record, including both traditional data records such as those stored in files and databases, as well as programming language structured data types. In fact, the concepts described here can be used as a foundation for extension packages describing any information structure that is fundamentally hierarchical, or \"nested,\" in nature such as documents, questionnaires, and organizational structures.

The Record package depends on the following packages:

    org.omg::CWM::ObjectModel::Core
    org.omg::CWM::ObjectModel::Instance

Because of the antiquity of many record-based models, individual system implementations employing record models may have unusual features (such as occurs-depending arrays, various COBOL rename/remapping semantics, etc.) that are not shared with other implementations. When such features are limited to single
implementations or languages, they have been purposefully left out of the Record metamodel. Rather, unusual features of this sort should be placed into extension packages designed to meet the needs of those implementations or languages. For example, record structuring features endemic to the COBOL language have been placed in the COBOLData metamodel in the CWMX package described in Volume 2 and do not appear here. In this way, COBOL-only features do not burden other record oriented implementations unnecessarily.

OCL Representation of Record Constraints

[C-1] The owner of a Field and the type of a Field may not refer to the same Classifier instance.
context Field inv:
self.owner <> self.type

[C-2] The scale attribute is valid only if the precision attribute is specified.
context Field inv:
self.scale->notEmpty implies self.precision->notEmpty

[C-3] The precision attribute is valid only if the length attribute is not specified.
context Field inv:
self.precision->notEmpty implies self.length->isEmpty::filely one")
    @namespace(uri="http:///orgomg/cwm/resource/record.ecore", prefix="orgomg.cwm.resource.record")
    package record {
      @GenModel(documentation="A Field is the fundamental information container within a RecordDef. It holds one piece of information, which may itself have structure. The inherited associations StructuralFeatureType and ElementOwnership provide access to a Field instance?s type and owning classifier, respectively.")
      class Field extends objectmodel.core.Attribute {

        @GenModel(documentation="The length of a fixed length character or byte string field.")
        attr objectmodel.core.Integer length;

        @GenModel(documentation="The total number of digits in a numeric field.")
        attr objectmodel.core.Integer precision;

        @GenModel(documentation="The number of digits on the right of the decimal separator in a numeric field.")
        attr objectmodel.core.Integer scale;
      }

      @GenModel(documentation="A RecordDef is an ordered collection of Fields representing the structure of a Record.

Examples of RecordDefs include definitions of

    language-specific data structures
    database records
    IMS segments

The internal structure of a RecordDef instance is constructed by adding Field instances as features (using the ElementOwnership association) and pointing each Field instance?s inherited type reference to the Classifier instance representing the Field?s data type. The referenced instance can be either a primitive data type (an instance of DataType, such as \"integer\") or a structured data type (such as a Group instance).

Refer to the example for more details of the relationships between RecordDefs, Fields, Records, and their values.")
      class RecordDef extends objectmodel.core.Class {

        @GenModel(documentation="The value of a fieldDelimiter used to separate field values in an input stream.")
        attr objectmodel.core.String fieldDelimiter;

        @GenModel(documentation="True if the record is fixed length. Otherwise, the record can be of variable length.")
        attr objectmodel.core.Boolean isFixedWidth;

        @GenModel(documentation="The delimiter of a text string in the record, such as a quote.")
        attr objectmodel.core.String textDelimiter;

        @GenModel(documentation="Identifies the set of files in which a record is stored.")
        ref RecordFile[*]#record file;

        @GenModel(documentation="Identifies the Section instances in which the RecordDef is used.")
        ref cwmx.resource.coboldata.Section[*]#record section;
      }

      @GenModel(documentation="Instances of FixeOffsetField represent fields that have a fixed location in a record.

FixedOffsetFields can be used as a foundation for recording details of physical record layouts and as a means of representing the internal structure of undiscriminated (ie, C-type) unions.")
      class FixedOffsetField extends Field {

        @GenModel(documentation="Specifies the offset of the field within its container in units of the number of bits indicated in the offsetUnitBits attribute.")
        attr objectmodel.core.Integer offset;

        @GenModel(documentation="The number of bits making up one record offset unit. For example, for a byte-relative offset, the value of this attribute would typically be 8.")
        attr objectmodel.core.Integer offsetUnitBits;
      }

      @GenModel(documentation="A RecordFile is the definition of a file. It may have one or more RecordDefs, defining the structure of the records in the file. Each of these RecordDefs defines a valid structure for records in the file. Subclasses of RecordFile in extensions to support specific languages and systems may be used to represent specific types of files such as COBOL CopyLib files and C-language header files.

Physical deployments of a RecordFile can be found via the DataManagerDataPackage association in the SoftwareDeployment package .")
      class RecordFile extends objectmodel.core.Package {

        @GenModel(documentation="True if the contents of fields in the first record of the file contain field names applicable to subsequent records.")
        attr objectmodel.core.Boolean isSelfDescribing;

        @GenModel(documentation="Contains the value that serves as a logical end-of-record indication in a stream-oriented file. A common examples include the usage of carriage-return characters and carriage-return/line-feed character pairs as new-line characters in ASCII text files.")
        attr objectmodel.core.Integer recordDelimiter;

        @GenModel(documentation="The number of records to ignore at the beginning of a file. The specific semantics of records that are skipped may be beyond the scope of CWM.")
        attr objectmodel.core.Integer skipRecords;

        @GenModel(documentation="Identifies the set of records stored in the file. The ordering may indicate the physical ordering of records with different layouts.")
        ref RecordDef[*]#file record;
      }

      @GenModel(documentation="The value currently held in a Field instance.")
      class FieldValue extends objectmodel.instance.DataValue {
      }

      @GenModel(documentation="A Record, a subclass of Object, represents a single data record. Each Record is described by a RecordDef instance found via the Object?s InstanceClassifier association.")
      class Record extends objectmodel.instance.Object {
      }

      @GenModel(documentation="A RecordSet represents a collection of Record instances.")
      class RecordSet extends objectmodel.instance.Extent {
      }

      @GenModel(documentation="A Group is a structured data type and is used to collect together Field instances within a Record. Groups can be used in RecordDef instances as shown in the foregoing example.")
      class Group extends objectmodel.core.Classifier {
      }

    }

    @GenModel(documentation="The CWM Multidimensional metamodel is a generic representation of a multidimensional database.

Multidimensional databases are OLAP databases that are directly implemented by multidimensional database systems. In a multidimensional database, key OLAP constructs (dimensions, hierarchies, etc.) are represented by the internal data structures of a ultidimensional database server, and common OLAP operations (consolidation, drill-down, etc.) are performed by the server acting on those data structures. 

Multidimensional databases are often classified as \"physical OLAP\" or \"MOLAP\" (memory-based OLAP) databases.

Multidimensional databases offer enhanced performance and flexibility over OLAP systems that simulate multidimensional functionality using other technologies (e.g., relational database or spreadsheet):

Performance: Multidimensional databases provide rapid consolidation times and formula calculations, and consistent query response times regardless of query complexity. This is accomplished, in part, through the use of efficient cell storage techniques and highly-optimized index paths.

Flexibility: The specification and use of multidimensional schemas and queries (including the design of cubes, dimensions, hierarchies, member formulas, the manipulation of query result sets, etc.) can be accomplished in a relatively straight-forward manner, since the server directly supports (and exposes) the multidimensional paradigm.

The CWM Multidimensional metamodel does not attempt to provide a complete representation of all aspects of commercially available, multidimensional databases. Unlike relational database management systems, multidimensional databases tend to be proprietary in structure, and there are no published, widely agreed upon, standard representations of the logical schema of a multidimensional database. Therefore, the CWM Multidimensional Database metamodel is oriented toward complete generality of specification. Tool-specific extensions to the metamodel are relatively easy to formulate, and several examples are provided in Volume 2, Extensions, of the CWM Specification.

The Multidimensional package depends on the following packages:

    org.omg::CWM::ObjectModel::Core
    org.omg::CWM::ObjectModel::Instance

The major classes and associations of the Multidimensional metamodel are shown in Figure 11-1.

Schema is the container of all elements comprising a Multidimensional model. It also represents the logical unit of deployment of a Multidimensional database instance.
Dimension represents a physical dimension in a Multidimensional database. Whereas
the OLAP metamodel defines ?dimension? as a purely conceptual entity, this
Dimension represents the dimension object exposed by the programming model of a
Multidimensional database.
A Dimension may reference other instances of Dimension to form arbitrarily complex
dimensional structures (e.g., hierarchies with varying levels of detail).

DimensionedObject represents an attribute of Dimension. Examples of DimensionedObjects include measures (variables), formulas, consolidation functions, member alias names, etc. DimensionedObjects are contained by the Schema and referenced by the Dimensions that use them. 

MemberSet represents the collection of Members associated with an instance of Dimension, and MemberValue represents an instance value of a Member. MemberSet, Member and MemberValue enable the specification and interchange of both M1-level Multidimensional models and associated M0-level data values.

Figure 11-2 illustrates the inheritance of the Multidimensional classes from metaclasses of the Object Model.

OCL Representation of Multidimensional Constraints

[C-1] A Dimension may not reference itself as a component, nor as a composite.
context Dimension
inv: self.component->excludes( self )
inv: self.composite->excludes( self )

The transitive closure of components of an instance of Dimension must not include the
Dimension instance.

The transitive closure of composites of an instance of Dimension must not include the
Dimension instance.")
    @namespace(uri="http:///orgomg/cwm/resource/multidimensional.ecore", prefix="orgomg.cwm.resource.multidimensional")
    package multidimensional {
      @GenModel(documentation="Dimension represents physical dimension in a multidimensional database (e.g., a dimension object defined by the programming model/API of an OLAP database server). Tool-specific extensions to the Multidimensional package will generally contain classes that derive from Dimension.")
      class Dimension extends objectmodel.core.Class {

        @GenModel(documentation="DimensionedObjects referenced by Dimensions.")
        ref DimensionedObject[*]#dimension dimensionedObject;

        @GenModel(documentation="\"Composite\" Dimensions referencing \"Component\" Dimensions.")
        ref Dimension[*]#component composite;

        @GenModel(documentation="\"Component\" Dimensions referenced by \"Composite\" Dimensions.")
        ref Dimension[*]#composite component;

        @GenModel(documentation="Schema owning Dimensions.")
        transient ref Schema[1]#dimension schema;

        @GenModel(documentation="MemberSets owned by a Dimension.")
        val MemberSet[*]#dimension memberSet;
      }

      @GenModel(documentation="DimensionedObject represents an attribute of Dimension.")
      class DimensionedObject extends objectmodel.core.Attribute {

        @GenModel(documentation="Dimensions referencing DimensionedObjects.")
        ref Dimension[*]#dimensionedObject dimension;

        @GenModel(documentation="Schema owning DimensionedObjects.")
        transient ref Schema[1]#dimensionedObject schema;
      }

      @GenModel(documentation="Member represents a member of a Dimension.")
      class Member extends objectmodel.instance.Object {
      }

      @GenModel(documentation="MemberSet represents the collection of Members associated with an instance of Dimension.")
      class MemberSet extends objectmodel.instance.Extent {

        @GenModel(documentation="Dimension owning MemberSets.")
        transient ref Dimension[1]#memberSet dimension;
      }

      @GenModel(documentation="MemberValue represents an instance value of a Member.")
      class MemberValue extends objectmodel.instance.DataValue {
      }

      @GenModel(documentation="Schema contains all elements comprising a Multidimensional database.")
      class Schema extends objectmodel.core.Package {

        @GenModel(documentation="DimensionedObjects owned by a Schema.")
        val DimensionedObject[*]#schema dimensionedObject;

        @GenModel(documentation="Dimensions owned by a Schema.")
        val Dimension[*]#schema dimension;
      }

    }

    @GenModel(documentation="XML is rapidly becoming a very important type of data resource, especially in the Internet environment. On the one hand, HTML is evolving to be XML-compliant; in the near future, all HTML documents can be expected to become valid XML documents. On the other hand, XML is quickly becoming the standard format for interchange of data and/or metadata (e.g., XMI). Therefore, XML documents (or streams) representing data and/or metadata can be expected to appear everywhere. 

The XML package contains classes and associations that represent common metadata describing XML data resources. It is based on XML 1.0 [XML]. XML Schema is an ongoing activity in the W3C. As future standards are adopted by the W3C on XML Schema, this package will be revised and extended accordingly.

This section provides a description of the main features of the XML package.

An XML schema contains a set of definitions and declarations, in the form of XML element type definitions. An XML element type may contain a set of XML attributes and/or a content model. An attribute can have one of the following defaults: required, implied, default, or fixed. The content model can be one of the following types: empty, any, mixed, or element. Except for the empty content model, a content model consists of constituent parts, particularly element type references. The allowed occurrence of the constituents can be one of the following types: one, zero or one, zero or more, or
one or more.

An any content model consists of any element types. A mixed content model consists of character data and specified element type references. An element content model consists of specified element type references and/or element content models. An element content model can be one of the following types: choice or sequence.

The XML package depends on the following packages:

    omg.org::CWM::ObjectModel::Core
    omg.org::CWM::ObjectModel::Instance
    omg.org::CWM::Foundation::DataTypes

The metamodel diagram for the XML package is split into two parts. The first diagram shows the XML classes and associations, while the second shows the inheritance hierarchy.

OCL Representation of XML Constraints

   None")
    @namespace(uri="http:///orgomg/cwm/resource/xml.ecore", prefix="orgomg.cwm.resource.xml")
    package xml {
      @GenModel(documentation="This represents an XML schema which contains a set of definitions and declarations. In XML, this is known as document type definition, or DTD, which provides a grammar for a class of documents.")
      class Schema extends objectmodel.core.Package {

        @GenModel(documentation="Identifies the version of the XML.")
        attr objectmodel.core.String version;

        @GenModel(documentation="Identifies the XML namespace of the Schema.")
        attr objectmodel.core.String xmlNamespace;
      }

      @GenModel(documentation="This represents an XML element type definition. In XML, each document contains one or more elements. The element structure may, for validation purposes, be constrained using element type and attribute declarations. An element type declaration constrains the element?s content.")
      class ElementType extends objectmodel.core.Class {

        @GenModel(documentation="Identifies the Content of the ElementType.")
        ref Content#elementType content;
      }

      @GenModel(documentation="This represents an XML attribute declaration. In XML, attributes are used to associate name-value pairs with elements. Each attribute declaration specifies the name, data type, and default value (if any) of each attribute associated with a given element type.")
      class Attribute extends objectmodel.core.Attribute {

        @GenModel(documentation="Identifies the kind of attribute default.")
        attr AttributeDefault defaultKind;
      }

      @GenModel(documentation="This represents the content model of an ElementType. In XML, each document contains one or more elements, the boundaries of which are normally delimited by start-tags and end-tags. The body between the start-tag and end-tag is called the element?s content. An element type declaration constrains the element?s content.")
      class Content extends objectmodel.core.ModelElement {

        @GenModel(documentation="Identifies the type of the content model.")
        attr ContentType type;

        @GenModel(documentation="Identifies the allowed occurrence of the content constituents.")
        attr OccurrenceType occurrence;

        @GenModel(documentation="Identifies the ElementType.")
        ref ElementType[*]#content elementType;

        @GenModel(documentation="Identifies the owned ElementTypeReferences.")
        ref ElementTypeReference[*]#ownerContent ownedElementType;
      }

      @GenModel(documentation="This represents an element content which contains only ElementTypeReferences. In XML, an element type has element content when elements of that type must contain only child elements (no character data), optionally separated by white space. In this case, the constraint includes a content model that governs the allowed types of the child elements and the order in which they are allowed to appear.")
      class ElementContent extends Content {

        @GenModel(documentation="Identifies the order type of the element content.")
        attr ElementOrderType order;

        @GenModel(documentation="Identifies the owner ElementContent.")
        ref ElementContent[*]#ownedContent ownerContent;

        @GenModel(documentation="Identifies the owned ElementContents.")
        ref ElementContent[*]#ownerContent ownedContent;
      }

      @GenModel(documentation="This represents a mixed content of character data and ElementTypeReferences. In XML, an element type has mixed content when elements of that type may contain character data, optionally interspersed with child elements. In this case, the types of the child elements may be constrained, but not their order or their number of occurrences.")
      class MixedContent extends Content {

        @GenModel(documentation="Identifies the Text of the MixedContent.")
        val Text[1]#ownerContent text;
      }

      @GenModel(documentation="required, implied, default, fixed")
      enum AttributeDefault {
        xml_required = 0;
        xml_implied = 1;
        xml_default = 2;
        xml_fixed = 3;
      }

      @GenModel(documentation="empty, any, mixed, element")
      enum ContentType {
        xml_empty = 0;
        xml_any = 1;
        xml_mixed = 2;
        xml_element = 3;
      }

      @GenModel(documentation="one, zeroOrOne, zeroOrMore, OneOrMore")
      enum OccurrenceType {
        xml_one = 0;
        xml_zeroOrOne = 1;
        xml_zeroOrMore = 2;
        xml_oneOrMore = 3;
      }

      @GenModel(documentation="choice, sequence")
      enum ElementOrderType {
        xml_choice = 0;
        xml_sequence = 1;
      }

      @GenModel(documentation="This represents an XML element type reference. In XML, an element content or a mixed content of an element type may contain references to element type definitions.")
      class ElementTypeReference extends objectmodel.core.Attribute {

        @GenModel(documentation="Identifies the allowed occurrence of the ElementTypeReference.")
        attr OccurrenceType occurrence;

        @GenModel(documentation="Identifies the owner Content.")
        ref Content[*]#ownedElementType ownerContent;
      }

      @GenModel(documentation="This represents character data. In XML, a mixed content of an element type may contain text.")
      class Text extends objectmodel.core.Attribute {

        @GenModel(documentation="Identifies the owner MixedContent.")
        transient ref MixedContent[1]#text ownerContent;
      }

      @GenModel(documentation="This represents an instance of an ElementType.")
      class Element extends objectmodel.instance.Object {
      }

      @GenModel(documentation="This represents an XML document, which is a collection of XML Elements.")
      class Document extends objectmodel.instance.Extent {
      }

    }

  }

  @namespace(uri="http:///orgomg/cwm/analysis.ecore", prefix="orgomg.cwm.analysis")
  package analysis {
    @GenModel(documentation="A key aspect of data warehousing is to extract, transform, and load data from
operational resources to a data warehouse or data mart for analysis. Extraction,
transformation, and loading can all be characterized as transformations. In fact,
whenever data needs to be converted from one form to another in data warehousing,
whether for storage, retrieval, or presentation purposes, transformations are involved.
Transformation, therefore, is central to data warehousing.
The Transformation package contains classes and associations that represent common
transformation metadata used in data warehousing. It covers basic transformations
among all types of data sources and targets: object-oriented, relational, record,
multidimensional, XML, OLAP, and data mining.
The Transformation package is designed to enable interchange of common metadata about transformation tools and activities. Specifically it is designed to: 

1. Relate a transformation with its data sources and targets. These data sources and targets can be of any type (e.g., object-oriented, relational) or granularity (e.g., class, attribute, table, column). They can be persistent (e.g., stored in a relational database) or transient.

2. Accommodate both \"black box\" and \"white box\" transformations. In the case of \"black box\" transformations, data sources and targets are related to a transformation and to each other at a coarse-grain level. We know the data sources and targets are related through the transformation, but we don?t know how a specific piece of a data source is related to a specific piece of a data target. In the case of \"white box\" transformations, however, data sources and targets are related to a transformation and to each other at a fine-grain level. We know exactly how a specific piece of a data source is related to a specific piece of a data target through a specific part of the transformation.

3. Allow grouping of transformations into logical units. At the functional level, a logical unit defines a single unit of work, within which all transformations must be executed and completed together. At the execution level, logical units can be used to define the execution grouping and sequencing (either explicitly through precedence constraints or implicitly through data dependencies). A key consideration here is that both parallel and sequential executions (or a combination of both) can be accommodated.

The Transformation package assumes the existence of the following packages that represent types of potential data sources or targets: ObjectModel (object-oriented), Relational, Record, Multidimensional, XML, OLAP, and Data Mining. The Transformation package is an integral part of the following packages: OLAP, Data Mining, Warehouse Process, and Warehouse Operation. In particular, the Transformation and Warehouse Process packages together provide metamodel constructs that facilitate scheduling and execution in data warehousing, and the Transformation and Warehouse Operation packages together provide metamodel constructs that enable data lineage in data  warehousing.

This section provides a description of the main features of the Transformation package,
as illustrated in Figure 13-1 (see specification document for figure).

A transformation transforms a set of source objects into a set of target objects. The elements of a data object set can be any ObjectModel model elements, but typically are tables, columns, or model elements that represent transient, in memory, objects. Data object sets can be both sources and targets for different transformations. In particular, a given data object set can be the target of one transformation and the source of one or more transformations within the same logical unit. This is often the case with transformation that produce and consume temporary objects. 

Transformations allow a wide range of types (and granularity) to be defined for their data sources and targets. For example, the source type of a transformation can be an XML schema while the target type is a column, if the transformation deals with storing an XML document in a column of a relational database. More typically, the source types of a transformation are classes and attributes while the target types are tables and columns, or vice versa, if the transformation deals with converting object data into relational data, or vice versa.

Existing programs, queries, or rules (in fact, any ObjectModel operations) can be used to perform a transformation by associating them with the transformation using the transformation use dependency.

Transformations can be grouped into logical units. At the functional level, they are grouped into transformation tasks, each of which defines a set of transformations that must be executed and completed together - a logical unit of work. At the execution level, transformation steps are used to coordinate the flow of control between transformation tasks, with each transformation step executing a single transformation task. The transformation steps are further grouped into transformation activities.
Within each transformation activity, the execution sequence of its transformation steps are defined either explicitly by using the step precedence dependency or precedence constraint, or implicitly through data dependency.

There are certain \"white-box\" transformations which are commonly used and which can relate data sources and targets to a transformation and to each other at a detailed level. These transformations are convenient to use and they provide data lineage at a fine-grain level. One such transformation is the transformation map which consists of a set of classifier maps that in turn consists of a set of feature maps or classifier-feature maps. The other is the transformation tree, which represents a transformation as an unary or binary expression tree. For an example usage of the transformation map, please see Figure 13-4.

The Transformation package depends on the following packages: 

    omg.org::CWM::ObjectModel::Behavioral
    omg.org::CWM::ObjectModel::Core
    omg.org::CWM::Foundation::Expressions
    omg.org::CWM::Foundation::SoftwareDeployment

The CWM uses packages to control complexity and create groupings of logically interrelated classes and associations. The Transformation package is one such package. Within the Transformation package itself, however, the definition of subpackages is purposefully left out to reduce the length and complexity of the fully qualified names of Transformation classes and associations. There are, however, several groupings of classes and associations that form related sets of functionality within the Transformation package. Although separate subpackages have not been created for these functional areas, their identification improves the understandability of the Transformation package.

The Transformation package contains metamodel elements that support the following functions:

1. Transformation and data lineage. These classes and associations deal with transformations and their sources, targets, constraints, and operations.

2. Transformation grouping and execution. These classes and associations deal with grouping of transformations to form logical units and to define execution sequences.

3. Specialized transformations. These classes and associations define specialized, \"white box\", transformations that are commonly used in data warehousing. The specific Transformation classes and associations supporting each functional area are delineated in Table 13-1 (see specification document for table).

The metamodel diagram for the Transformation package is split into four parts. The first two diagrams show the Transformation classes and associations, while the last two show the inheritance hierarchy.

13.5 OCL Representation of Transformation Constraints

[C-1] The preceding step and succeeding step of StepPrecedence must not be the same.
context StepPrecedence
inv: self.precedingStep->forAll( p | self.succeedingStep->forAll( q | p <> q ) )

[C-2] A TransformationTask may not be its own inverse task.
Identifies the Transformation
context TransformationTask
inv: self.inverseTask->forAll( p | p <> self )

[C-3] A TransformationTask may not be its own original task.
context TransformationTask
inv: self.originalTask->forAll( p | p <> self )

[C-4] The ClassifierMapToCFMap association is derived from the Namespace-ModelElement association. All ownedElement ends of the association must be ClassifierFeatureMaps.
context ClassifierMapToCFMap
inv Namespace-ModelElement.allInstances.select( ownedElement.oclIsKindOf(
ClassifierFeatureMap ) )

[C-5] The ClassifierMapToFeatureMap association is derived from the Namespace-ModelElement association. All ownedElement ends of the association must be FeatureMaps.
context ClassifierMapToFeatureMap
inv Namespace-ModelElement.allInstances.select( ownedElement.oclIsKindOf(
FeatureMap ) )")
    @namespace(uri="http:///orgomg/cwm/analysis/transformation.ecore", prefix="orgomg.cwm.analysis.transformation")
    package transformation {
      @GenModel(documentation="This represents a transformation from a set of sources to a set of targets. 

If a model already exists for the object that performs the Transformation, then the model can be related to the Transformation via a TransformationUse dependency.
")
      class Transformation extends objectmodel.core.Namespace {

        @GenModel(documentation="Any code or script for the Transformation.")
        !resolve val objectmodel.core.ProcedureExpression function;

        @GenModel(documentation="A short description for any code or script performed by the Transformation.")
        attr objectmodel.core.String functionDescription;

        @GenModel(documentation="This Transformation is the primary transformation for the associated TransformationTask.")
        attr objectmodel.core.Boolean isPrimary;

        @GenModel(documentation="Identifies the sources of the Transformation")
        ref DataObjectSet[*]#sourceTransformation source;

        @GenModel(documentation="Identifies the targets of the Transformation")
        ref DataObjectSet[*]#targetTransformation target;

        @GenModel(documentation="Identifies the TransformationTask")
        ref TransformationTask[*]#transformation task;
      }

      @GenModel(documentation="This represents a set of data objects that can be the source or target of a Transformation.")
      class DataObjectSet extends objectmodel.core.ModelElement {

        @GenModel(documentation="Identifies the Transformation")
        ref Transformation[*]#source sourceTransformation;

        @GenModel(documentation="Identifies the Transformation")
        ref Transformation[*]#target targetTransformation;

        @GenModel(documentation="Identifies the elements in the DataObjectSet")
        ref objectmodel.core.ModelElement[+]#set element;
      }

      @GenModel(documentation="This represents a set of Transformations that must be executed together as a single task (logical unit).

A TransformationTask may have an inverse task. A transformation task that maps a source set \"A\" into a target set \"B\" can be reversed by the inverse transformation task that maps \"B\" into \"A\".")
      class TransformationTask extends foundation.softwaredeployment.Component {

        @GenModel(documentation="Identifies the TransformationStep")
        ref TransformationStep[*]#task step;

        @GenModel(documentation="Identifies the original TransformationTask")
        ref TransformationTask[*]#inverseTask originalTask;

        @GenModel(documentation="Identifies the inverse TransformationTaskclass: TransformationTask")
        ref TransformationTask[*]#originalTask inverseTask;

        @GenModel(documentation="Identifies the Transformations")
        ref Transformation[+]#task transformation;
      }

      @GenModel(documentation="This represents the usage of a TransformationTask in a TransformationActivity. A TransformationStep relates to one TransformationTask. 

TransformationSteps are used to coordinate the flow of control between their TransformationTasks. Ordering of the TransformationSteps are defined using the PrecedenceConstrainedBy dependency.")
      class TransformationStep extends objectmodel.core.ModelElement {

        @GenModel(documentation="Identifies the TransformationTask")
        ref TransformationTask[1]#step task;

        @GenModel(documentation="Identifies the WarehouseSteps that perform a TranformationStep.")
        ref management.warehouseprocess.WarehouseStep[*]#transformationStep warehouseStep;

        @GenModel(documentation="Identifies a StepExecution recording details of a specific execution of a
TransformationStep.")
        ref management.warehouseoperation.StepExecution[*]#transformationStep execution;
      }

      @GenModel(documentation="This represents a transformation activity. Each TransformationActivity consists of a set
of TransformationSteps.")
      class TransformationActivity extends objectmodel.core.Subsystem {

        @GenModel(documentation="When the TransformationActivity was created.")
        attr objectmodel.core.String creationDate;

        @GenModel(documentation="Identifies the set of WarehouseActivities that run the TransformationActivity.")
        ref management.warehouseprocess.WarehouseActivity[*]#transformationActivity warehouseActivity;

        @GenModel(documentation="Identifies an ActivityExecution recording details of a specific execution of a TransformationActivity.")
        ref management.warehouseoperation.ActivityExecution[*]#transformationActivity execution;
      }

      @GenModel(documentation="This is used to define order-of-execution constraint among TransformationSteps. It may be used independent of or in conjunction with StepPrecedence.")
      class PrecedenceConstraint extends objectmodel.core.Constraint {
      }

      @GenModel(documentation="This is a specialized dependency used to associate a Transformation to the model of an existing object (e.g., program, query, or rule) that performs the transformation.")
      class TransformationUse extends objectmodel.core.Dependency {

        @GenModel(documentation="Identifies the type of object that can perform the transformation.")
        attr objectmodel.core.String type;
      }

      @GenModel(documentation="This represents a specialized Transformation which consists of a group of ClassifierMaps.")
      class TransformationMap extends Transformation {
      }

      @GenModel(documentation="This represents a specialized Transformation which can be modeled as an expression tree. ")
      class TransformationTree extends Transformation {

        @GenModel(documentation="Identifies the type of TransformationTree, which can be unary or binary.")
        attr TreeType type;

        @GenModel(documentation="Identifies the expression tree that embodies the TransformationTree.")
        !resolve val foundation.expressions.ExpressionNode body;
      }

      @GenModel(documentation="This represents a mapping of source Classifiers to target Classifiers. A ClassifierMap may consists of a group of ClassifierFeatureMaps and/or FeatureMaps.")
      class ClassifierMap extends objectmodel.core.Namespace {

        @GenModel(documentation="Any code or script for the ClassifierMap.")
        !resolve val objectmodel.core.ProcedureExpression function;

        @GenModel(documentation="A short description for any code or script performed by the ClassifierMap.")
        attr objectmodel.core.String functionDescription;

        @GenModel(documentation="Identifies the owned FeatureMaps")
        val FeatureMap[*]#classifierMap featureMap;

        @GenModel(documentation="Identifies the owned ClassifierFeatureMaps")
        val ClassifierFeatureMap[*]#classifierMap cfMap;

        @GenModel(documentation="Identifies the source Classifiers of the ClassifierMap")
        ref objectmodel.core.Classifier[+]#classifierMap source;
      }

      @GenModel(documentation="This represents a mapping of source Features to target Features.")
      class FeatureMap extends objectmodel.core.ModelElement {

        @GenModel(documentation="Any code or script for the FeatureMap.")
        !resolve val objectmodel.core.ProcedureExpression function;

        @GenModel(documentation="A short description for any code or script performed by the FeatureMap.")
        attr objectmodel.core.String functionDescription;

        @GenModel(documentation="Identifies the owning ClassifierMap")
        transient ref ClassifierMap#featureMap classifierMap;

        @GenModel(documentation="Identifies the target Features of the FeatureMap")
        ref objectmodel.core.Feature[+]#featureMap target;
      }

      @GenModel(documentation="unary, binary")
      enum TreeType {
        tfm_unary = 0;
        tfm_binary = 1;
      }

      @GenModel(documentation="This is used to define explicit order-of-execution relationships among TransformationSteps. It may be used independent of or in conjunction with PrecedenceConstraint")
      class StepPrecedence extends objectmodel.core.Dependency {
      }

      @GenModel(documentation="This represents a mapping of Classifiers to Features.")
      class ClassifierFeatureMap extends objectmodel.core.ModelElement {

        @GenModel(documentation="Any code or script for the FeatureMap.")
        !resolve val objectmodel.core.ProcedureExpression function;

        @GenModel(documentation="A short description for any code or script performed by the FeatureMap.")
        attr objectmodel.core.String functionDescription;

        @GenModel(documentation="Identifies if the mapping is from Classifiers (source) to Features (target). The default is true.")
        attr objectmodel.core.Boolean classifierToFeature;

        @GenModel(documentation="Identifies the owning ClassifierMap")
        transient ref ClassifierMap#cfMap classifierMap;

        @GenModel(documentation="Identifies the source/target Classifiers of the ClassifierFeatureMap")
        ref objectmodel.core.Classifier[+]#cfMap classifier;

        @GenModel(documentation="Identifies the source/target Features of the ClassifierFeatureMap")
        ref objectmodel.core.Feature[+]#cfMap feature;
      }

    }

    @GenModel(documentation="Online Analytical Processing (OLAP) is a class of analytic application software that exposes business data in a multidimensional format. This multidimensional format usually includes the consolidation of data drawn from multiple and diverse information sources. Unlike more traditionally structured representations (e.g., the tabular format of a relational database), the multidimensional orientation is a more natural expression of the way business enterprises view their strategic data. For example, an analyst might use an OLAP application to examine total sales revenue by product and geographic region over time, or, perhaps, compare sales margins for the same fiscal periods of two consecutive years. The ultimate objective of OLAP is the efficient construction of analytical models that transform raw business data into strategic business insight.

There are many ways to implement OLAP. Most OLAP systems are constructed using OLAP server tools that enable logical OLAP structures to be built on top of a variety of physical database systems, such as relational or native multidimensional databases.

The following features are generally found in most OLAP systems:

    Multidimensional representation of business data.
    Upward consolidation of multidimensional data in a hierarchical manner, possibly with the application of specialized processing rules.
    The ability to navigate a hierarchy from a consolidated value to the lower level values forming it.
    Support for time-series analysis; i.e., OLAP users are generally concerned with data and consolidations at specific points in time -- By date, week, quarter, etc.
    Support for modeling and scenario analysis -- A user should be able to apply arbitrary \"what-if\" analyses to a result set without affecting the stored information.
    Consistent response times, regardless of how queries are formulated -- This is critical for effective analysis and modeling.

OLAP applications integrate well into the data warehousing environment, because a data warehouse provides relatively clean and stable data stores to drive the OLAP application. These data stores are usually maintained in relational tables that can be read directly by OLAP tools or loaded into OLAP servers. These relational tables are often structured in a manner that reveals the inherent dimensionality of the data (such as the ubiquitous Star and Snowflake schemas). Also, the data transformation and mapping services provided by a data warehouse can be used to supply OLAP systems with both metadata and data. Transformation-related metadata can be used to track the
lineage of consolidated OLAP data back to its various sources.

The primary objectives of the CWM OLAP package are:

    Define a metamodel of essential OLAP concepts common to most OLAP systems.
    Provide a facility whereby instances of the OLAP metamodel are mapped to deployment-capable structures (i.e., models of physical data resources, such as the CWM Relational and Multidimensional packages).
    Ensure that navigation through the logical OLAP model hierarchy and its various resource models is always performed in a uniform manner (i.e., by defining a standard usage of the CWM Transformation package as a means of implementing these mappings).
    Leverage services provided by other CWM packages, where appropriate (e.g., use the CWM Foundation package to supply a standard representation of expressions).

The OLAP package depends on the following packages:

   org.omg::CWM::ObjectModel::Core
   org.omg::CWM::Foundation::Expressions
   org.omg::CWM::Analysis::Transformation

The major classes and associations of the OLAP metamodel are shown in Figure 14-1.  Schema is the logical container of all elements comprising an OLAP model. It is the root element of the model hierarchy and marks the entry point for navigating OLAP models.

A Schema contains Dimensions and Cubes. A Dimension is an ordinate within a multidimensional structure and consists of a list of unique values (i.e., members) that share a common semantic meaning within the domain being modeled. Each member designates a unique position along its ordinate.

A Cube is a collection of analytic values (i.e., measures) that share the same dimensionality. This dimensionality is specified by a set of unique Dimensions from the Schema. Each unique combination of members in the Cartesian product of the Cube?s Dimensions identifies precisely one data cell within a multidimensional structure.

CubeDimensionAssociation relates a Cube to its defining Dimensions. Features relevant to Cube-Dimension relationships (e.g., calcHierarchy) are exposed by this class.

A Dimension has zero or more Hierarchies. A Hierarchy is an organizational structure that describes a traversal pattern through a Dimension, based on parent/child relationships between members of a Dimension. Hierarchies are used to define both navigational and consolidation/computational paths through the Dimension (i.e., a value associated with a child member is aggregated by one or more parents). For example, a Time Dimension with a base periodicity of days might have a Hierarchy
specifying the consolidation of days into weeks, weeks into months, months into quarters, and quarters into years.

A specific Hierarchy may be designated as the default Hierarchy for display purposes (e.g., a user interface that displays the Dimension as a hierarchical tree of members).  CubeDimensionAssociation can also identify a particular Hierarchy as the default Hierarchy for consolidation calculations performed on the Cube.

MemberSelection models mechanisms capable of partitioning a Dimension?s collection of members. For example, consider a Geography Dimension with members representing cities, states, and regions. An OLAP client interested specifically in cities might define an instance of MemberSelection that extracts the city members.

CubeRegion models a sub-unit of a Cube that is of the same dimensionality as the Cube itself. Each \"dimension\" of a CubeRegion is represented by a MemberSelection of the corresponding Dimension  of the Cube. Each MemberSelection may define some subset of its Dimension?s members.

CubeRegions are used to implement Cubes. A Cube may be realized by a set of CubeRegions that map portions of the logical Cube to physical data sources. The MemberSelections defining CubeRegions can also be grouped together via MemberSelectionGroups, enabling the definition of CubeRegions with specific semantics. For example, one can specify a CubeRegion containing only the \"input level\" data cells of a Cube.

A CubeRegion may own any number of CubeDeployments. CubeDeployment is a metaclass that represents an implementation strategy for a multidimensional structure. The ordering of the CubeDeployment classes may optionally be given some implementation-specific meaning (e.g., desired order of selection of several possible deployment strategies, based on optimization considerations).

The OLAP metamodel defines two special types of Dimension: Time and Measure. A Time Dimension provides a means of representing time-series data within a multidimensional structure. The members of a Time Dimension usually define some base periodicity (e.g., days of the week). The implementation of a Time Dimension might provide support for advanced \"time-intelligent\" functionality, such as the ability to automatically convert between different periodicities and calendars.

The members of a Measure Dimension describe the meaning of the analytic values stored in each data cell of a multidimensional structure. For example, an OLAP application may define Sales, Quantity and Weight as its measures. In this case, each data cell within the Cube stores three values, with each value corresponding to one of the three measures. A measure may have an associated data type. For example, Sales might be of a monetary type, Quantity an integer, and Weight a real number.

The OLAP metamodel specifies two subclasses of Hierarchy: LevelBasedHierarchy and ValueBasedHierarchy.

LevelBasedHierarchy describes hierarchical relationships between specific levels of a Dimension. LevelBasedHierarchy is used to model both \"pure level\" hierarchies (e.g., dimension-level tables) and \"mixed\" hierarchies (i.e., levels plus linked nodes). Dimensional levels are modeled by the Level class, a subclass of MemberSelection that partitions a Dimension?s members into disjoint subsets, each representing a distinct level.

For example, the Geography Dimension cited earlier contains members representing cities, states, and regions, such as \"Stamford\", \"Connecticut\", and \"NorthEast\". It might also contain a single member called \"USA\" representing all regions of the United States. Therefore, the Geography Dimension could have four Levels named \"City\", \"State\", 'Region\", and \"ALL\", respectively. Each Level specifies the subset of members belonging to it: All cities belong to the \"City\" Level, all states belong to the \"State\" Level, all regions belong to the \"Region\" Level, and the single \"USA\" member belongs to the \"ALL\" Level.

When used in the definition of a consolidation path, the meaning of \"level\" is quite clear: Members occupying a given Level consolidate into the next higher Level (e.g., City rolls up into State, State into Region, and Region into ALL).

LevelBasedHierarchy contains an ordered collection of HierarchyLevelAssocations that defines the natural hierarchy of the Dimension. The ordering defines the hierarchical structure in top-down fashion (i.e., the \"first\" HierarchyLevelAssociation in the ordered collection represents the upper-most level of the dimensional hierarchy).

A HierarchyLevelAssociation may own any number of DimensionDeployments. DimensionDeployment is a metaclass that represents an implementation strategy for hierarchical Dimensions. The ordering of the DimensionDeployment classes may optionally be given an implementation-specific meaning (e.g., desired order of selection of several possible deployment strategies, based on optimization
considerations).

A ValueBasedHierarchy defines a hierarchical ordering of members in which the concept of level has little or no significance. Instead, the topological structure of the hierarchy conveys meaning. ValueBasedHierarchies are often used to model situations where members are classified or ranked according to their distance from a common root member (e.g., an organizational chart of a corporation). In this case, each member of the hierarchy has some specific \"metric\" or \"value\" associated it with it. ValueBasedHierarchy can be used to model pure \"linked node\" hierarchies (e.g.,
asymmetric hierarchical graphs or parent-child tables). 

As with LevelBasedHierarchy, ValueBasedHierarchy also has an ordered collection of dimensionDeployments, where the ordering semantics are left to implementations to define.

Figure 14-3 illustrates how classes of the OLAP metamodel inherit from the CWM
Object Model. Two classes requiring further explanation are:

    Measure: A subclass of Attribute that describes the meaning of values stored in the data cells of a multidimensional structure. Different OLAP models often give different interpretations to the term \"measure\". In a relational Star Schema, individual measures might be represented by non-key columns of a Fact table (e.g., \"Sales\" and \"Quantity\" columns). In this case, measure may be an attribute of a Cube or CubeRegion that models the Fact table. On the other hand, measures can
also be represented by members of a Measure Dimension. A Fact table supporting this representation has a single Measure column with column values consisting of the members \"Sales\" and \"Quantity\", and a single \"value\" column (i.e., an implicit data dimension) storing the corresponding measure values. A similar notion of Measure Dimension is used in modeling pure hypercube representations of
multidimensional servers. Thus, the concept of measure can be represented either as a Dimenson or as an Attribute, depending on the type of OLAP system being modeled.

    Coded Level: A subclass of Level that assigns a unique encoding, or label, to each of its members. CodedLevel is not essential to the OLAP metamodel, but is provided as a helper class for certain applications that might benefit from the ability of OLAP systems to structure data hierarchically. For example, CodedLevel could be used to model systems of nomenclature or classification.

The CWM OLAP metamodel describes logical models of OLAP systems, but does not directly specify how an OLAP system is physically deployed. Modeling the deployment of an OLAP system requires mapping instances of OLAP metaclasses to instances of other CWM metaclasses representing physical resources (e.g., mapping an OLAP Dimension to a Relational Table). This approach offers several advantages:

    The status of the OLAP metamodel as a conceptual model is preserved by this level of indirection. When using OLAP, a client may perceive to be working directly with OLAP objects, but the actual implementation of those objects is hidden from the client. For example, a client may view a member as a value of a Dimension, but whether that member value comes from a row of a relational table, or from a cell in a multidimensional database, is usually not obvious to the client. On the other hand, if a client needs to determine how a logical OLAP structure is physically realized, the metadata describing this mapping is fully available (assuming that the implementation allows the client to drill-down through the metadata).

    The possibility of defining mappings based on expressions means that the amount of metadata required to describe large models (e.g., Dimensions containing large collections of members) can be kept within reasonable bounds. It is generally more efficient to provide expressions that specify where large metadata sets reside, how to connect to them, and how to map their contents, rather than representing them directly as part of the metadata content.

All of the OLAP metaclasses are potential candidates for such deployment mappings. In addition, some OLAP models may also define mappings between several OLAP metaclass instances, forming a natural hierarchy of logical objects (e.g., Dimension Attributes are mapped to Level Attributes which, in turn, are mapped to Table Columns).

The CWM Transformation package is used as the primary means of describing these mappings. A modeler constructing an OLAP model based on CWM will generally define instances of the TransformationMap metaclass to link logical OLAP objects together, and to link those logical objects to other objects representing their physical data sources.

StructureMap is a subclass of TransformationMap that models structure-oriented transformation mappings (i.e., member identity and hierarchical structure). This type of transformation mapping needs to be connected to the OLAP metamodel in a very specific way (according to Level and Hierarchy), so the StructureMap subclass is defined to make these associations explicit. Two specific usages of StructureMap are defined: ListOfValues, which maps attributes identifying members residing at a specific Level, or at a specific Level within a particular Hierarchy, and ImmediateParent, which maps attributes identifying the hierarchical parent(s) of the members.

On the other hand, relatively simple TransformationMaps can be defined within any OLAP model to represent attribute-oriented transformations (e.g., mapping Dimension Attributes to Table Columns that store attribute values).

ContentMap is a subclass of TransformationMap that models content-oriented transformaton mappings (i.e., cell data or measure values). For example, an instance of ContentMap might be used to map each of a CubeRegion?s Measures to Columns of an underlying Fact Table.

Note that, in either case (structural mapping or content mapping), the traversal patterns used by any CWM OLAP implementation are always the same, since both deployment mappings are based on the same usage of CWM TransformationMaps. In addition to representing structural mappings, instances of TransformationMap and its subclasses are also capable of storing implementation-dependent functions or procedures that yield the instance values associated with mapped model elements. For example, a \"list of values\" StructureMap might store an SQL statement such as \"select memberName from Product where productFamily = ?consumerElectronics? \", as the value of its formula attribute.

Figure 14-4 illustrates the CWM metaclasses and associations that describe deployment mappings between logical OLAP models and physical resource models. Note that it is possible to combine both Cube (content) and Dimension (structure) deployments together within the context of a single OLAP Schema (via the DeploymentGroup metaclass). Thus, an OLAP Schema can have several possible deployments that users may select based on implementation-specific considerations (e.g., physical optimizations).

OCL Representation of OLAP Constraints

[C-1] Ensure that the Dimensions defining a Cube are unique.
context Cube inv:
self.cubeDimensionAssociation->forAll( c1, c2 | c1 <> c2 implies
c1.dimension <> c2.dimension )

[C-2] A Cube without CubeRegions cannot be mapped to a deployment structure (i.e., physical source of data).
context Cube inv:
self.cubeRegion->isEmpty implies self.isVirtual = true

[C-3] If a calcHierarchy is defined, it must be a Hierarchy owned by the Dimension referenced by the CubeDimensionAssociation.
context CubeDimensionAssociation inv:
self.calcHierarchy->notEmpty implies self.calcHierarchy.dimension = self.dimension

[C-4] A \"fully realized\" CubeRegion has no MemberSelectionGroups (and hence, no MemberSelections).
context CubeRegion inv:
self.isFullyRealized implies self.memberSelectionGroup->isEmpty

[C-5] A CubeRegion defined by MemberSelections must have, for each Dimension of its owning Cube, a corresponding MemberSelection within each of its
MemberSelectionGroups.
context CubeRegion inv:
self.memberSelectionGroup->notEmpty implies
self.cube.cubeDimensionAssociation->forAll( d |
self.memberSelectionGroup->forAll( g |
g.memberSelection->exists( m | m.dimension = d.dimension ) ) )

[C-6] A CubeRegion defined by MemberSelections must have, within each MemberSelectionGroup, a MemberSelection corresponding to each Dimension of its
owning Cube.
context CubeRegion inv:
self.memberSelectionGroup->notEmpty implies
self.memberSelectionGroup->forAll( g |
g.memberSelection->forAll( m |
self.cube.cubeDimensionAssociation->exists( d | d.dimension = m.dimension ) ) )

[C-7] A Dimension may be a Time Dimension, a Measure Dimension, or neither, but never both types at the same time.
context Dimension inv:
not ( self.isTime and self.isMeasure )

[C-8] The default display Hierarchy (if defined) must be one of the Hierarchies owned by the Dimension.
context Dimension inv:
self.displayDefault->notEmpty implies self.hierarchy->includes( self.displayDefault )

[C-9] An instance of DimensionDeployment must be referenced exclusively by either a HierarchyLevelAssociation or a ValueBasedHierarchy.
context DimensionDeployment inv:
self.hierarchyLevelAssociation->isEmpty xor self.valueBasedHierarchy->isEmpty

[C-10] Within a DimensionDeployment, an \"immediate parent\" StructureMap must always have an associated and distinct \"list of values\" StructureMap.
context DimensionDeployment inv:
self.immediateParent->notEmpty implies
( self.listOfValues->notEmpty and self.listOfValues <> self.immediateParent )

[C-11] A StructureMap referenced as a \"list of values\" StructureMap must not reside outside of the DimensionDeployment?s collection of StructureMaps.
context DimensionDeployment inv:
self.listOfValues->notEmpty implies self.structureMap->includes( self.listOfValues )

[C-12] A StructureMap referenced as an \"immediate parent\" StructureMap must not reside outside of the DimensionDeployment?s collection of StructureMaps.
context DimensionDeployment inv:
self.immediateParent->notEmpty implies
self.structureMap->includes( self.immediateParent )

[C-13] The currentLevel of each HierarchyLevelAssociation must refer to a Level owned by the Dimension of the LevelBasedHierarchy containing the HierarchyLevelAssociation.
context LevelBasedHierarchy inv:
self.hierarchyLevelAssociation->notEmpty implies
self.hierarchyLevelAssociation->forAll( h |
self.dimension.memberSelection
->select( oclType = Olap::Level )->includes( h.currentLevel ) )

[C-14] No two HierarchyLevelAssociations may designate the same Level instance as their \"current level\".
context LevelBasedHierarchy inv:
self.hierarchyLevelAssociation->forAll( h1, h2 | h1 <> h2 implies
h1.currentLevel <> h2.currentLevel )")
    @namespace(uri="http:///orgomg/cwm/analysis/olap.ecore", prefix="orgomg.cwm.analysis.olap")
    package olap {
      @GenModel(documentation="ContentMap is a subclass of TransformationMap that maps CubeRegion attributes to their physical data sources.")
      class ContentMap extends transformation.TransformationMap {

        @GenModel(documentation="The CubeDeployment owning a ContentMap.")
        transient ref CubeDeployment[1]#contentMap cubeDeployment;
      }

      @GenModel(documentation="A Cube is a collection of analytic values (i.e., measures) that share the same dimensionality.  This dimensionality is specified by a set of unique Dimensions from the Schema.  Each unique combination of members in the Cartesian product of the Cube?s Dimensions identifies precisely one data cell within a multidimensional structure.

Synonyms: Multidimensional Array, Hypercube, Hypervolume.
")
      class Cube extends objectmodel.core.Class {

        @GenModel(documentation="If true, then this Cube is a Virtual Cube (i.e., it has no physical realization).")
        attr objectmodel.core.Boolean isVirtual;

        @GenModel(documentation="CubeDimAssocs owned by the Cube.")
        val CubeDimensionAssociation[*]#cube cubeDimensionAssociation;

        @GenModel(documentation="The Schema owning a Cube.")
        transient ref Schema[1]#cube schema;

        @GenModel(documentation="CubeRegions owned by the Cube.")
        val CubeRegion[*]#cube cubeRegion;
      }

      @GenModel(documentation="CubeDeployment represents a particular implementation strategy for the data portions of an OLAP model.  It does so by organizing a collection of ContentMaps, which in turn define a mapping to an implementation model.")
      class CubeDeployment extends objectmodel.core.Class {

        @GenModel(documentation="The CubeRegion owning a CubeDeployment.")
        transient ref CubeRegion[1]#cubeDeployment cubeRegion;

        @GenModel(documentation="The DeploymentGroups referencing a CubeDeployment.")
        ref DeploymentGroup[1]#cubeDeployment deploymentGroup;

        @GenModel(documentation="The collection of ContentMaps owned by a CubeDeployment.")
        val ContentMap[*]#cubeDeployment contentMap;
      }

      @GenModel(documentation="CubeDimensionAssociation relates a Cube to the Dimensions that define it.  Features relevant to Cube-Dimension relationships (e.g., calcHierarchy) are exposed by this class.
")
      class CubeDimensionAssociation extends objectmodel.core.Class {

        @GenModel(documentation="The Cube owning CubeDimAssocs.")
        transient ref Cube[1]#cubeDimensionAssociation cube;

        @GenModel(documentation="The Dimension referenced by CubeDimAssocs.")
        ref Dimension[1]#cubeDimensionAssociation dimension;

        @GenModel(documentation="The Hierarchy designated by a CubeDimAssoc as the default Hierarchy to be used in consolidation calculations performed on the Cube.")
        ref Hierarchy#cubeDimensionAssociation calcHierarchy;
      }

      @GenModel(documentation="CubeRegion models a sub-unit of a Cube of the same dimensionality as the Cube itself, with each Dimension optionally subsetted in its list of members.

When mapped to its physical source, a CubeRegion contains data cells identified by the member combinations of the Cartesian product of the CubeRegion's associated Dimensions and Measures.

The relative ordering of CubeDeployment classes optionally implies a desired order of selection of the CubeDeployments, based on implementation-specific considerations (e.g., optimized access of aggregate data).

Synonyms: Sub-Cube, Partition, Slice, Region, Area.

Misc. notes:
1.  A CubeRegion is not a Cube, and a Cube is not a CubeRegion.
2.  A Cube has a Measure and CubeRegion may have a corresponding measure (Measures are Attributes).
3.  A Cube may or may not have CubeRegions.
4.  If a Cube does not have a CubeRegion, then it's not physically mapped (it's virtual).  All physical mapping is based on the CubeRegion , not the Cube.")
      class CubeRegion extends objectmodel.core.Class {

        @GenModel(documentation="If true, then the CubeRegion content is read-only (i.e., may not be written or updated through the CubeRegion -- e.g., a CubeRegion implemented via an SQL view may not permit updates to the underlying base table).")
        attr objectmodel.core.Boolean isReadOnly;

        @GenModel(documentation="If true, then this CubeRegion has a direct physical realization and is not bound by any MemberSelections.")
        attr objectmodel.core.Boolean isFullyRealized;

        @GenModel(documentation="The Cube owning CubeRegions.")
        transient ref Cube[1]#cubeRegion cube;

        @GenModel(documentation="MemberSelectionGroups owned by the CubeRegion.")
        val MemberSelectionGroup[*]#cubeRegion memberSelectionGroup;

        @GenModel(documentation="The CubeDeployments owned by a CubeRegion.")
        val CubeDeployment[*]#cubeRegion cubeDeployment;
      }

      @GenModel(documentation="DeploymentGroup represents a logical grouping of model elements defining a single, complete deployment of an instance of Olap Schema (i.e., CubeDeployments and DimensionDeployments).

The usage of DeploymentGroup is as follows: A user may specify a particular DeploymentGroup as the session-wide, default deployment for all metadata queries performed throughout the session. Alternatively, for queries involving some particular deployed object (e.g., a Cube or a Dimension), the user may be asked to choose from a list of deployments.  This either becomes the default deployment for the remainder of the session, or the user may continue to be asked to specify a deployment for each  subsequent query against deployed objects.")
      class DeploymentGroup extends objectmodel.core.Package {

        @GenModel(documentation="The Schema owning a DeploymentGroup.")
        transient ref Schema[1]#deploymentGroup schema;

        @GenModel(documentation="The CubeDeployments referenced by a DeploymentGroup.")
        ref CubeDeployment[*]#deploymentGroup cubeDeployment;

        @GenModel(documentation="The DimensionDeployments referenced by a DeploymentGroup.")
        ref DimensionDeployment[*]#deploymentGroup dimensionDeployment;
      }

      @GenModel(documentation="A Dimension is an ordinate within a multidimensional structure, and consists of an ordered list of values (i.e.,  members) that share a common semantic meaning within the domain being modeled.  Each member designates a unique position along its ordinate.

Typical Dimensions are: Time, Product, Geography, Scenario (e.g., actual, budget, forecast), Measure (e.g., sales, quantity).
")
      class Dimension extends objectmodel.core.Class {

        @GenModel(documentation="If true, then this Dimension is a Time Dimension (i.e., its members collectively represent a time series).")
        attr objectmodel.core.Boolean isTime;

        @GenModel(documentation="If true, then this Dimension is a Measure Dimension (i.e., its members represent Measures).")
        attr objectmodel.core.Boolean isMeasure;

        @GenModel(documentation="MemberSelections owned by the Dimension.")
        val MemberSelection[*]#dimension memberSelection;

        @GenModel(documentation="CubeDimAssocs referencing the Dimension.")
        ref CubeDimensionAssociation[*]#dimension cubeDimensionAssociation;

        @GenModel(documentation="Hierarchies owned by the Dimension.")
        val Hierarchy[*]#dimension hierarchy;

        @GenModel(documentation="The Hierarchy designated by the Dimension as its default Hierarchy for display purposes.")
        ref Hierarchy#defaultedDimension displayDefault;

        @GenModel(documentation="The Schema owning a Dimension")
        transient ref Schema[1]#dimension schema;
      }

      @GenModel(documentation="DimensionDeployment represents a particular implementation strategy for the dimensional/hierarchical portions of an OLAP model.  It does so by organizing a collection of StructureMaps, which in turn define a mapping to an implementation model.
")
      class DimensionDeployment extends objectmodel.core.Class {

        @GenModel(documentation="The HierarchyLevelAssociation owning DimensionDeployments.")
        transient ref HierarchyLevelAssociation#dimensionDeployment hierarchyLevelAssociation;

        @GenModel(documentation="The ValueBasedHierarchy owning a DimensionDeployment.")
        transient ref ValueBasedHierarchy#dimensionDeployment valueBasedHierarchy;

        @GenModel(documentation="The StructureMaps owned by a DimensionDeployment.")
        val StructureMap[*]#dimensionDeployment structureMap;

        @GenModel(documentation="The StructureMap referenced by a DimensionDeployment as its \"list of values\" StructureMap.")
        ref StructureMap#dimensionDeploymentLV listOfValues;

        @GenModel(documentation="The StructureMap referenced by a DimensionDeployment as its \"immediate parent\".")
        ref StructureMap#dimensionDeploymentIP immediateParent;

        @GenModel(documentation="The DeploymentGroups referencing a DimensionDeployment.")
        ref DeploymentGroup[1]#dimensionDeployment deploymentGroup;
      }

      @GenModel(documentation="A Hierarchy is an organizational structure that imposes a parent/child ordering on the members of the Dimension, usually to define either a navigational or consolidation/computational paths through the Dimension (i.e., a value associated with a child member is aggregated into one or more parents). ")
      abstract class Hierarchy extends objectmodel.core.Class {

        @GenModel(documentation="The Dimension owning Hierarchies.")
        transient ref Dimension[1]#hierarchy dimension;

        @GenModel(documentation="The Dimension designating the Hierarchy as its default Hierarchy for display purposes.")
        ref Dimension#displayDefault defaultedDimension;

        @GenModel(documentation="CubeDimAssocs designating the default Hierarchy to be used in consolidation calculations performed on the Cube.")
        ref CubeDimensionAssociation[*]#calcHierarchy cubeDimensionAssociation;
      }

      @GenModel(documentation="HierarchyLevelAssociation is a class that orders Levels within a LevelBasedHierarchy, and provides a means of mapping Level/Hierarchy-oriented  Dimension attributes to one or more physical deployments.

The relative ordering of DimensionDeployment classes optionally implies a desired order of selection of DimensionDeployments, based on implementation-specific considerations (e.g., optimized access of aggregate data).")
      class HierarchyLevelAssociation extends objectmodel.core.Class {

        @GenModel(documentation="The LevelBasedHierarchy owning HierarchyLevelAssocs.")
        transient ref LevelBasedHierarchy[1]#hierarchyLevelAssociation levelBasedHierarchy;

        @GenModel(documentation="The Level designated by a HierarchyLevelAssoc as its current level.")
        ref Level[1]#hierarchyLevelAssociation currentLevel;

        @GenModel(documentation="The DimensionDepolyments owned by a HierarchyLevelAssociation.")
        val DimensionDeployment[*]#hierarchyLevelAssociation dimensionDeployment;
      }

      @GenModel(documentation="A LevelBasedHierarchy is a hierarchy that describes relationships between specific levels of a Dimension. LevelBasedHierarchy can be used to model to \"pure level\" hierarchies (e.g., dimension-level tables) and \"mixed\" hierarchies (i.e., levels + linked nodes).
")
      class LevelBasedHierarchy extends Hierarchy {

        @GenModel(documentation="HierarchyLevelAssocs owned by the LevelBasedHierarchy.")
        val HierarchyLevelAssociation[*]#levelBasedHierarchy hierarchyLevelAssociation;
      }

      @GenModel(documentation="MemberSelectionGroup enables the grouping together of semantically-related MemberSelections.")
      class MemberSelectionGroup extends objectmodel.core.Class {

        @GenModel(documentation="MemberSelections referenced by MemberSelGrps.")
        ref MemberSelection[+]#memberSelectionGroup memberSelection;

        @GenModel(documentation="The CubeRegion owning MemberSelectionGroups.")
        transient ref CubeRegion[1]#memberSelectionGroup cubeRegion;
      }

      @GenModel(documentation="MemberSelection represents an arbitrary subset of the members of a Dimension.")
      class MemberSelection extends objectmodel.core.Class {

        @GenModel(documentation="The Dimension owning MemberSelections.")
        transient ref Dimension[1]#memberSelection dimension;

        @GenModel(documentation="MemberSelGrps referencing MemberSelections.")
        ref MemberSelectionGroup[*]#memberSelection memberSelectionGroup;
      }

      @GenModel(documentation="Schema contains all elements comprising an OLAP model.  A Schema may also contain any number of DeploymentGroups, representing the various physical deployments of the logical Schema.")
      class Schema extends objectmodel.core.Package {

        @GenModel(documentation="The Cubes owned by a Schema.")
        val Cube[*]#schema cube;

        @GenModel(documentation="The Dimension owned by a Schema.")
        val Dimension[*]#schema dimension;

        @GenModel(documentation="The DeploymentGroups owned by a Schema.")
        val DeploymentGroup[*]#schema deploymentGroup;
      }

      @GenModel(documentation="ValueBasedHierarchy is a subclass of Hierarchy that ranks Dimension members according to their relative distance from the root.  Each member of a ValueBasedHierarchy has a specific \"metric\" or \"value\" associated with it.
ValueBasedHierarchy is used to model pure \"linked node\" hierarchies (e.g., parent-child tables).")
      class ValueBasedHierarchy extends Hierarchy {

        @GenModel(documentation="The DimensionDepolyments owned by a ValueBasedHierarchy.")
        val DimensionDeployment[*]#valueBasedHierarchy dimensionDeployment;
      }

      @GenModel(documentation="Level is a subclass of MemberSelection that assigns each member of a Dimension to a specific hierarchical level within the Dimension.")
      class Level extends MemberSelection {

        @GenModel(documentation="The HierarchyLevelAssocs designating this Level as their current level.")
        ref HierarchyLevelAssociation[*]#currentLevel hierarchyLevelAssociation;
      }

      @GenModel(documentation="CodedLevel is a subclass of Level that assigns a unique encoding, or label, to each of its Dimension members.")
      class CodedLevel extends Level {

        @GenModel(documentation="Encoding is an expression that generates a unique encoding, or label, for each member of a CodedLevel.")
        !resolve val foundation.expressions.ExpressionNode encoding;
      }

      @GenModel(documentation="Measure is a subclass of Attribute representing Dimension Measures (e.g., Sales, Quantity, Weight).  Synonym: Variable.")
      class Measure extends objectmodel.core.Attribute {
      }

      @GenModel(documentation="StructureMap is a subclass of TransformationMap that maps Dimension attributes to their physical data sources.

(Note: Multiple StructureMaps may be grouped together into single, cohesive unit via TransformationTask.)")
      class StructureMap extends transformation.TransformationMap {

        @GenModel(documentation="The DimensionDeployment owning a StructureMap.")
        transient ref DimensionDeployment[1]#structureMap dimensionDeployment;

        @GenModel(documentation="The DimensionDeployment referencing a \"list of values\" StructureMap.")
        ref DimensionDeployment#listOfValues dimensionDeploymentLV;

        @GenModel(documentation="The DimensionDeployment referencing an \"immedate parent\" StructureMap.")
        ref DimensionDeployment#immediateParent dimensionDeploymentIP;
      }

    }

    @GenModel(documentation="Data mining is the application of mathematical or statistical processes for the purpose of extracting hidden knowledge from large data sets. This knowledge is subsequently used as actionable business intelligence.

Data mining techniques provide descriptive information that is manifest in inherent patterns or relations between the data. This can be achieved, for example, with algorithms for clustering or association rules detection (link analysis).

They also uncover correlations, often due to causal relationships, between the data and a specific target property. This information is used to make predictions about unknown data or future behavior. Techniques generating these models are known as supervised learning algorithms, and include classification and numeric prediction algorithms.

Whereas most analysis tools support the retrospective analysis of data sets by verifying a user?s hypotheses, data mining attempts to discover trends and behaviors without the need for guessing about possible relationships.

Data mining tools are particularly effective in the data warehouse environment, because data warehouses offer large quantities of cleansed business data for consumption by data mining tools. Also, the advanced query and analytical capabilities available in most data warehouses (e.g., relational databases, OLAP servers, and information visualization tools) can be used to great advantage by data mining tools in their formulation of models, and in the evaluation of those models by human users.

The Data Mining package depends on the following packages:

    org.omg::CWM::ObjectModel::Core
    org.omg::CWM::ObjectModel::Instance

The CWM Data Mining metamodel represents three conceptual areas: The overall Model description itself, Settings, and Attributes. Each area is represented by the diagrams in Figs. 15-1, 15-2, and 15-3, respectively.

The Model conceptual area consists of a generic representation of a data mining model (that is, a mathematical model produced or generated by the execution of a data mining algorithm). This consists of MiningModel, a representation of the mining model itself, MiningSettings, which drive the construction of the model, ApplicationInputSpecification, which specifies the set of input attributes for the model, and MiningModelResult, which represents the result set produced by the testing or application of a generated model.

The Settings conceptual area elaborates further on the Mining Settings and their usage relationships to the attributes of the input specification.

Mining Settings has four subclasses representing settings for StatisticsSettings, ClusteringSettings, SupervisedMiningSettings and AssociationRulesSettings. The SupervisedMiningSettings are further subclassed as ClassificationSettings and RegressionSettings, and a CostMatrix is defined for representing cost values associated with misclassifications.

AttributeUsageRelation consists of attributes that further classify the usage of MiningAttributes by MiningSettings (e.g., relative weight).  Several association are also used to explicitly define requirements placed on attributes by certain subclasses of settings (e.g., target, transactionId and itemId).

The Attributes conceptual area defines two subclasses of Mining Attribute:

NumericAttribute and CategoricalAttribute. Category represents the category properties and values that either a CategoricalAttribute or OrdinalAttribute might possess, while CategoryHierarchy represents any taxonomy that a CategoricalAttribute might be associated with.

The inheritance of the Data Mining metamodel from the CWM ObjectModel is shown in Fig. 15-4.

OCL Representation of Data Mining Constraints

[C-1] Function must specify \"AssociationRules.
context AssociationRulesSettings inv:
self.function = \"AssociationRules

[C-2] Category values must be unique.
context CategoricalAttribute inv:
self.category->forAll( c1, c2 | c1.value = c2.value implies c1 = c2 )

[C-3] An instance of Category must be owned by precisely one instance of
CategoricalAttribute or any of its subclasses.
context Category inv:
self.categoricalAttribute->isEmpty xor self.ordinalAttribute->isEmpty

[C-4] Function must specify \"Classification\".
context ClassificationSettings inv:
self.function = \"Classification\"

[C-5] Function must specify \"Clustering\".
context ClusteringSettings inv:
self.function = \"Clustering\"

[C-6] maxNumberOfClusters must be positive.
context ClusteringSettings inv:
self.maxNumberOfClusters > 0

[C-7] Attributes must have unique names.
context MiningDataSpecification inv:
self.attribute->forAll( a1, a2 | a1.name = a2.name implies a1 = a2 )

[C-8] Function and algorithm must be equal to function and algorithm of
MiningSettings, respectively.
context MiningModel inv:
self.settings->isEmpty or (self.function = self.settings.function and
self.algorithm = self.settings.algorithm)

[C-9] lowerBound must be less than or equal to upperBound.
context NumericAttribute inv:
self.lowerBound <= self.upperBound

[C-10] Function must specify \"Regression\".
context RegressionSettings inv:
self.function = \"Regression\"

[C-11] Function must specify \"StatisticalAnalysis\".
context StatisticsSettings inv:
self.function = \"StatisticalAnalysis\"")
    @namespace(uri="http:///orgomg/cwm/analysis/datamining.ecore", prefix="orgomg.cwm.analysis.datamining")
    package datamining {
      @GenModel(documentation="ApplicationInputSpecification is a collection of ApplicationAttributes that drive the MiningModel.")
      class ApplicationInputSpecification extends objectmodel.core.Class {

        @GenModel(documentation="ApplicationAttributes owned by the ApplicationInputSpecification.")
        val ApplicationAttribute[+]#inputSpec inputAttribute;

        @GenModel(documentation="The MiningModel owning an ApplicationInputSpecification.")
        transient ref MiningModel#inputSpec miningModel;
      }

      @GenModel(documentation="Defines the possible Attribute types.")
      enum AttributeType {

        @GenModel(documentation="Categorical attribute type.")
        categorical = 0;

        @GenModel(documentation="Numeric attribute type.")
        numerical = 1;
      }

      @GenModel(documentation="Ways to use an attribute as part of a mining operation.")
      enum AttributeUsage {

        @GenModel(documentation="Active attributes contribute to the model building process")
        active = 0;

        @GenModel(documentation="Inactive attributes provide supplementary data that may be useful as part of the analysis.")
        inactive = 1;

        @GenModel(documentation="Supplementary attributes provide any other supplementary data useful to the analysis.")
        supplementary = 2;
      }

      @GenModel(documentation="Parameters for mining activities that are specific for an attribute. Mining attribute usage is intended as a specification apart from the mining input specification itself to enable reuse of the mining input specification for different mining settings.")
      class AttributeUsageRelation extends objectmodel.core.ModelElement {

        @GenModel(documentation="Indicates how the attribute is used by the mining function.")
        attr AttributeUsage usageType;

        @GenModel(documentation="Indicates whether the attribute is included in the output.")
        attr objectmodel.core.Boolean includeInApplyResult;

        @GenModel(documentation="Relative weight of the attribute.")
        attr objectmodel.core.Float weight;

        @GenModel(documentation="Indicates whether normalization is to be suppressed.")
        attr objectmodel.core.Boolean suppressNormalization;

        @GenModel(documentation="The Settings owning AttributeUsageRelations.")
        transient ref MiningSettings[1]#attributeUsage settings;

        @GenModel(documentation="The MiningAttribute referenced by AttributeUsageRelations")
        ref MiningAttribute[1]#attributeUsage attribute;
      }

      @GenModel(documentation="A potential value of categoricalAttribute. For a given categoricalAttribute, all categories must be of the same Category subclass.")
      class Category extends objectmodel.core.ModelElement {

        @GenModel(documentation="A string used when the category is displayed.")
        attr objectmodel.core.String displayValue;

        @GenModel(documentation="Categories with \"missing\" property represent that no information is available. If there are categories with property \"invalid\" then other categories are valid by default. If there are categories with property \"valid\" then other categories are invalid by default. Positive and negative define allowed values of a binary attribute.")
        attr CategoryProperty property;

        @GenModel(documentation="Value holder for the Category.")
        attr objectmodel.core.Any value;

        @GenModel(documentation="The CategoricalAttribute owning Categories.")
        transient ref CategoricalAttribute#category categoricalAttribute;
      }

      @GenModel(documentation="Defines a hierarchical ordering (aka taxonomy) between groups of items.")
      class CategoryHierarchy extends objectmodel.core.Class {

        @GenModel(documentation="The CategoricalAttributes referencing a taxonomy.")
        ref CategoricalAttribute[*]#taxonomy categoricalAttribute;
      }

      enum CategoryProperty {

        @GenModel(documentation="Represents that there is no information.")
        missing = 0;

        @GenModel(documentation="Represents that value must be treated as invalid.")
        invalid = 1;

        @GenModel(documentation="Represents a regular value.")
        valid = 2;

        @GenModel(documentation="Represents the logical 1 of a Boolean attribute.")
        positive = 3;

        @GenModel(documentation="Represents the logical 0 of a Boolean attribute.")
        negative = 4;
      }

      @GenModel(documentation="Defines cost of misclassifications.")
      class CostMatrix extends objectmodel.core.Class {

        @GenModel(documentation="ClassificationSettings referencing the CostMatrix")
        ref ClassificationSettings[*]#costMatrix settings;
      }

      @GenModel(documentation="An attribute (aka field or variable). It carries the following user specifications:

    valid values
    ordering
    taxonomy
    normalization")
      class MiningAttribute extends objectmodel.core.Attribute {

        @GenModel(documentation="The MiningDataSpecification owning MiningAttributes.")
        transient ref MiningDataSpecification[1]#attribute dataSpecification;

        @GenModel(documentation="AttributeUsageRelations referencing the MiningAttribute.")
        ref AttributeUsageRelation[*]#attribute attributeUsage;

        @GenModel(documentation="The AssociationRulesSettings referencing the MiningAttribute as an Item ID.")
        ref AssociationRulesSettings[*]#itemId settings;
      }

      @GenModel(documentation="The collection of mining attributes specifying how to interpret the input data attributes.
A description of the attributes accepted by the model for scoring data.
")
      class MiningDataSpecification extends objectmodel.core.Class {

        @GenModel(documentation="MiningAttributes owned by the MiningDataSpecification.")
        val MiningAttribute[+]#dataSpecification attribute;

        @GenModel(documentation="MiningSettings referencing the MiningAttribute.")
        ref MiningSettings[*]#dataSpecification settings;
      }

      @GenModel(documentation="Description of the data produced by a mining function.
")
      class MiningModel extends objectmodel.core.Class {

        @GenModel(documentation="Names the mining function. The following functions are predefined:  StatisticalAnalysis, FeatureSelection, AssociationRules, Classification, Clustering, Regression.")
        attr objectmodel.core.String function;

        @GenModel(documentation="Names the algorithm used to perform the mining function. The following algorithms are predefined: decisionTree, neuralNetwork, naiveBayes, selfOrganizingMap, centerBasedClustering, distributionBasedClustering, associationRules, polynomialRegression, radialBasisFunction, ruleBasedClassification, principalComponentAnalysis, factorAnalysis, bivariateAnalysis, descriptiveAnalysis, geneticAlgorithm")
        attr objectmodel.core.String algorithm;

        @GenModel(documentation="The settings used to derive the mining model.")
        ref MiningSettings#miningModel settings;

        @GenModel(documentation="The result set produced by the mining model.")
        ref MiningModelResult[*]#model miningResult;

        @GenModel(documentation="An ApplicationInputSpecification owned by a MiningModel.")
        val ApplicationInputSpecification[+]#miningModel inputSpec;
      }

      @GenModel(documentation="Describes the result set produced by a run of a MiningModel.")
      class MiningModelResult extends objectmodel.core.Class {

        @GenModel(documentation="Type of information contained in mining result. The following types are predefined: sensitivityResult, liftResult, classificationEvalResult, regressionEvalResult")
        attr objectmodel.core.String type;

        @GenModel(documentation="The mining model that produced the result set.")
        ref MiningModel[1]#miningResult model;
      }

      @GenModel(documentation="Attribute containing numbers, for which numeric operations are meaningful.

")
      class NumericAttribute extends MiningAttribute {

        @GenModel(documentation="Least non-outlier value.")
        attr objectmodel.core.Float lowerBound;

        @GenModel(documentation="Greatest non-outlier value.")
        attr objectmodel.core.Float upperBound;

        @GenModel(documentation="Indicates attributes with cyclic value range such as angles or numbers representing the day of the week. If true, lowerBound and upperBound define the base interval.")
        attr objectmodel.core.Boolean isCyclic;

        @GenModel(documentation="Tells the algorithms whether to deal with the numbers as discrete values.")
        attr objectmodel.core.Boolean isDiscrete;
      }

      @GenModel(documentation="Description of data produced by a predictive mining function.")
      class SupervisedMiningModel extends MiningModel {

        @GenModel(documentation="The \"target\" ApplicationAttribute referenced by SupervisedMiningModels.")
        ref ApplicationAttribute[1]#supervisedMiningModel target;
      }

      @GenModel(documentation="An attribute with discrete values upon which performing numeric operations is typically not meaningful.
")
      class CategoricalAttribute extends MiningAttribute {

        @GenModel(documentation="The taxonomy referenced by CategoricalAttributes")
        ref CategoryHierarchy#categoricalAttribute taxonomy;

        @GenModel(documentation="Categories owned by the CategoricalAttribute.")
        val Category[*]#categoricalAttribute category;
      }

      @GenModel(documentation="Ways to define an ordering on a set of string values.")
      enum OrderType {

        @GenModel(documentation="Alphabetic order.")
        alphabetic = 0;

        @GenModel(documentation="Interprets the strings as dates and orders accordingly.")
        date = 1;

        @GenModel(documentation="Interprets the strings as numbers and orders accordingly.")
        numeric = 2;

        @GenModel(documentation="As specified by the order of the aggregation of categories in CategoricalAttribute.")
        inSequence = 3;
      }

      @GenModel(documentation="Subclass of CategoricalAttribute that represents ordinal attributes.")
      class OrdinalAttribute extends CategoricalAttribute {

        @GenModel(documentation="Indicates ordinal attributes with cyclic value ranges, in which case the first and last attributes in the ordered sequence of attributes define the base interval.")
        attr objectmodel.core.Boolean isCyclic;

        @GenModel(documentation="Indicates if categories are ordered. If orderingType is inSequence then the aggregation of categories defines the ordering relation.")
        attr OrderType orderingType;
      }

      @GenModel(documentation="Parameters for mining activities. Mining settings indicate how the model should be or was built.")
      class MiningSettings extends objectmodel.core.Class {

        @GenModel(documentation="Names the mining function. The following functions are predefined: StatisticalAnalysis, FeatureSelection, AssociationRules, Classification, Clustering, Regression")
        attr objectmodel.core.String function;

        @GenModel(documentation="Names the algorithm used to perform the mining function. The following algorithms are predefined: decisionTree, neuralNetwork, naiveBayes, selfOrganizingMap, centerBasedClustering, distributionBasedClustering associationRules, polynomialRegression, radialBasisFunction, ruleBasedClassification, principalComponentAnalysis, factorAnalysis, bivariateAnalysis, descriptiveAnalysis, geneticAlgorithm")
        attr objectmodel.core.String algorithm;

        @GenModel(documentation="The mining model derived from its settings.")
        ref MiningModel[1]#settings miningModel;

        @GenModel(documentation="AttributeUsageRelations owned by the Settings.")
        val AttributeUsageRelation[+]#settings attributeUsage;

        @GenModel(documentation="The MiningAttribute referenced by MiningSettings.")
        ref MiningDataSpecification[1]#settings dataSpecification;
      }

      @GenModel(documentation="Parameters for computing a clustering model partitioning the input records into segments.
")
      class ClusteringSettings extends MiningSettings {

        @GenModel(documentation="Upper limit for the number of computed clusters.")
        attr objectmodel.core.Integer maxNumberOfClusters;

        @GenModel(documentation="Attribute name for output of cluster id values.")
        attr objectmodel.core.String clusterIdAttributeName;
      }

      @GenModel(documentation="Parameters for computing statistics-based models.
")
      class StatisticsSettings extends MiningSettings {
      }

      @GenModel(documentation="Parameters for computing a supervised model, i.e., one that requires a target attribute against which to measure model accuracy.")
      class SupervisedMiningSettings extends MiningSettings {

        @GenModel(documentation="Attribute name for output of confidence values of the prediction.")
        attr objectmodel.core.String confidenceAttributeName;

        @GenModel(documentation="Attribute name for output of predicted values.")
        attr objectmodel.core.String predictedAttributeName;

        @GenModel(documentation="Function specifying the cost of incorrect predictions. Predefined methods are:  entropy, Gini, costMatrix, pnorm, none.")
        attr objectmodel.core.String costFunction;
      }

      @GenModel(documentation="Parameters for computing a classification model.
")
      class ClassificationSettings extends SupervisedMiningSettings {

        @GenModel(documentation="The CostMatrix referenced by ClassificationSettings.")
        ref CostMatrix#settings costMatrix;
      }

      @GenModel(documentation="Parameters for computing a regression model.
")
      class RegressionSettings extends SupervisedMiningSettings {
      }

      @GenModel(documentation="Parameters for computing association rules.

")
      class AssociationRulesSettings extends MiningSettings {

        @GenModel(documentation="The minimum support required for association rules.")
        attr objectmodel.core.Float minimumSupport;

        @GenModel(documentation="The minimum confidence required for association rules.")
        attr objectmodel.core.Float minimumConfidence;

        @GenModel(documentation="The MiningAttribute referenced by AssociationRulesSettings as an Item ID.")
        ref MiningAttribute[1]#settings itemId;
      }

      @GenModel(documentation="Attribute used when the model was generated.")
      class ApplicationAttribute extends objectmodel.core.Attribute {

        @GenModel(documentation="Indicates whether attribute was actively used when the model was generated.")
        attr AttributeUsage usageType;

        @GenModel(documentation="Type of ApplicationAttribute.")
        attr AttributeType attributeType;

        @GenModel(documentation="The ApplicationInputSpecification owning ApplicationAttributes.")
        transient ref ApplicationInputSpecification[1]#inputAttribute inputSpec;

        @GenModel(documentation="SupervisedMiningModels referencing the ApplicationAttribute as their \"target\".")
        ref SupervisedMiningModel[*]#target supervisedMiningModel;
      }

    }

    @GenModel(documentation="The CWM Information Visualization metamodel defines metadata supporting the problem domain of \"information publishing\" or, more generally, \"information visualization\".

Within the data warehousing environment, data is collected from numerous, diverse sources and transformed into a unified representation that facilitates the analysis of data for purposes of gaining business insight. Robust and flexible information visualization tools are key to the effective analysis of this information. Information visualization tools must be capable of understanding and preserving the \"logical structure\" of data warehouse information, while enabling the user to perform any number of \"rendering transformations\" on information content (e.g., displaying the same query result set in several different formats, such as a printed report, Web page, pie chart, bar graph, etc.).

Since information visualization is a very broad problem domain, with a diverse set of possible solutions and many evolving standards, the CWM Information Visualization metamodel defines very generic, container-like metadata constructs that either contain or reference more complex visualization mechanisms at the M1-level. These metadata structures are intended to support the minimal metadata required to interchange more complex M1 models of visualization mechanisms.

The Information Visualization package depends on the following packages:

    org.omg.cwm.objectmodel.core
    org.omg.cwm.foundation.expressions

RenderedObject is the logical proxy for an arbitrary ModelElement that is to be rendered via some rendering transformation or process. A RenderedObject may be composed of an arbitrary number of other RenderedObjects (i.e., components), and may have topological relationships to still other RenderedObjects. The formula attribute allows for the specification of any implementation-dependent expression that completes the definition of a RenderedObject. For example, the formula might specify the position of the RenderedObject within a two-dimensional grid, or in relation to one of its neighbors; e.g., formula = \"neighbor(x, y) + (delta-x, delta-y)\".

A RenderedObject generally references one or more Renderings that specify how the enderedObject is actually presented. One of these associated Renderings may optionally be designated as a default Rendering. 

A Rendering is semantically equivalent to a transformation, in that it transforms a source RenderedObject to some target \"displayed\" (or otherwise \"presented\" object -- e.g., a displayed image or an audio clip) . An instance of Rendering is fully specified via its formula attribute, which, like RenderedObject, contains an implementation-dependent expression.

Thus, a RenderedObject may be viewed as the \"logical description\" of an object to be rendered, independently of how it is actually presented by any of its associated Renderings, and Renderings may be viewed as transformations that control the presentation of the RenderedObject while preserving its logical structure. 

Note that a RenderedObject may be the target of a complex transformation (i.e., utilizing the CWM Transformation package). For example, an N-dimensional OLAP cube might be transformed into an equivalent, two-dimensional, composite RenderedObject, with several dimensions mapped to row and column edges, respectively, and all other dimensions constrained to single member values. Several Renderings may then be defined and associated with the resultant RenderedObject, mapping the two-dimensional logical structure to the surface of a display screen in various different formats (e.g., spreadsheet, pie chart, bar graph, etc.).

Possible types of Renderings include: Screen, paper, voice, Web, HTML documents, XML/XSL, languages based on extensions to XML, SVG, visual objects, responses to keying (e.g., keying interception plus rules), etc. 

XSLRendering represents a useful subtype of Rendering that?s based on XSL (e.g., this subtype?s formula might contain a procedure that uses XSL to create an HTML document).

Finally, RenderedObjectSet represents a simple container of both logical RenderedObjects and available Renderings.

The inheritance of the Information Visualization metamodel from the Object Model is shown in Fig. 16-2.

OCL Representation of Information Visualization Constraints

[C-1] The set of Renderings includes the default Rendering.
context RenderedObject inv:
self.defaultRendering->notEmpty implies
self.rendering->includes( self.defaultRendering )

[C-2] A RenderedObject may not reference itself as a Neighbor nor as a Component.
context RenderedObject
inv: self.neighbor->excludes( self )
inv: self.component->excludes( self )

[C-3] A RenderedObject may not reference one of its Neighbors as a Component (and vice versa).
context RenderedObject inv:
(self.neighbor->notEmpty and self.component->notEmpty) implies
self.neighbor->intersection( self.component )->isEmpty

The transitive closure of Neighbors of an instance of RenderedObject must not include the RenderedObject instance.

The transitive closure of Components of an instance of RenderedObject must not include the RenderedObject instance.")
    @namespace(uri="http:///orgomg/cwm/analysis/informationvisualization.ecore", prefix="orgomg.cwm.analysis.informationvisualization")
    package informationvisualization {
      @GenModel(documentation="RenderedObject serves as a logical \"proxy\" for an arbitrary ModelElement that is to be
rendered.")
      class RenderedObject extends objectmodel.core.Classifier {

        @GenModel(documentation="Allows for the specification of any implementation-dependent expression that completes the definition of a RenderedObject.")
        !resolve val foundation.expressions.ExpressionNode formula;

        @GenModel(documentation="Specifies some implementation-dependent action associated with a RenderedObject.")
        attr objectmodel.core.String action;

        @GenModel(documentation="Specifies the name of a file persisting an instance of RenderedObject.")
        attr objectmodel.core.String fileName;

        @GenModel(documentation="Specifies some implementation-dependent type associated with a RenderedObject")
        attr objectmodel.core.String type;

        @GenModel(documentation="Specifies a URL identifying some instance of RenderedObject.")
        attr objectmodel.core.String url;

        @GenModel(documentation="\"Composite\" RenderedObjects referencing \"component\" RenderedObjects.")
        ref RenderedObject[*]#component composite;

        @GenModel(documentation="\"Component\" RenderedObjects referenced by \"composite\" RenderedObjects.")
        ref RenderedObject[*]#composite component;

        @GenModel(documentation="The Rendering referenced by one or more RenderedObjects as the default Rendering.")
        ref Rendering#defaultedRenderedObject defaultRendering;

        @GenModel(documentation="The Model Element referenced by Rendered Objects.")
        ref objectmodel.core.ModelElement#renderedObject modelElement;

        @GenModel(documentation="RenderedObjects referenced by this RenderedObject as its \"neighbor\" (or neighboring object).")
        ref RenderedObject[*]#referencingNeighbor neighbor;

        @GenModel(documentation="RenderedObjects referencing this RenderedObject as its \"neighbor\".")
        ref RenderedObject[*]#neighbor referencingNeighbor;
      }

      @GenModel(documentation="RenderedObjectSet is a container of RenderedObjects and available Renderings.")
      class RenderedObjectSet extends objectmodel.core.Package {

        @GenModel(documentation="Renderings owned by a RenderedObjectSet.")
        val Rendering[*]#renderedObjectSet rendering;
      }

      @GenModel(documentation="Rendering is a specification of how an associated RenderedObject is to be \"rendered\" in some medium.  This usually consists of a projection of an object of arbitrary dimensionality onto a 2-dimensional surface, but it may also include non-physical representations as well (such as audio).

A Rendering is semantically equivalent to a Transformation, in that it transforms a source RenderedObject to some target \"presented\" object.  An instance of Rendering is fully specified via its formula attribute, which contains an implementation-dependent expression that defines the transformation and tracks transformation lineage.

Possible types of instances of Rendering:
Screen, Paper, Voice, Web, HTML Document, XML/XSL, languages based on extensions to XML, SVG, Visual objects, responses to keying (keying interception plus rules), etc.")
      class Rendering extends objectmodel.core.Feature {

        @GenModel(documentation="Implementation-dependent procedure for generating the Rendering (e.g., a usage of XSL to generate an HTML document).  Tracks the transformation lineage of the Rendering.")
        !resolve val foundation.expressions.ExpressionNode formula;

        @GenModel(documentation="Specifies some implementation-dependent action associated with a Rendering.")
        attr objectmodel.core.String action;

        @GenModel(documentation="Specifies the name of a file persisting an instance of Rendering.")
        attr objectmodel.core.String fileName;

        @GenModel(documentation="Specifies some implementation-dependent type associated with a Rendering.")
        attr objectmodel.core.String type;

        @GenModel(documentation="Specifies a URL identifying some instance of Rendering.")
        attr objectmodel.core.String url;

        @GenModel(documentation="RenderedObjects referencing this Rendering as the default Rendering.")
        ref RenderedObject[*]#defaultRendering defaultedRenderedObject;

        @GenModel(documentation="RenderedObjectSet owning Renderings.")
        transient ref RenderedObjectSet#rendering renderedObjectSet;
      }

      @GenModel(documentation="XSLRendering represents a useful subclass of Rendering based on XSL (i.e., this subclass' formula might contain a procedure that uses XSL to create an HTML document).")
      class XSLRendering extends Rendering {
      }

    }

    @GenModel(documentation="Business users of data warehouses need to have a good understanding of what information and tools exist in a data warehouse. They need to understand what the information means from a business perspective, how it is derived, from what data resources it is derived, and what analysis and reporting tools exist for manipulating and reporting the information. They may also need to subscribe to analysis and reporting tools, and have them run with results delivered to them on a regular basis.
 
The BusinessNomenclature package contains classes and associations that can be used to represent business metadata. Easy access to this business metadata enables business users to exploit the value of the information in a data warehouse. It can also aid technical users in certain tasks. An example is the use of common business terms and concepts for discussing information requirements with business users. Another example is accessing business intelligence tools for analyzing the impact of warehouse design changes.

The scope of the BusinessNomenclature package is restricted to the domain of data warehousing and business intelligence.

This section provides a description of the main features of the BusinessNomenclature package.

The BusinessNomenclature package provides two main constructs to represent business terms and concepts and related semantics:

    Taxonomy is a collection of concepts that provide the context for the meaning of a particular term.
    Glossary is a collection of terms and various related forms of the term.

A taxonomy is a collection of concepts. Concepts represent semantic information and relationships. Concepts are identified by terms, which in turn are manifested by a word or phrase. More than one term may describe the same concept and a given term may describe more than one concept.
A glossary is a collection of terms that are related through explicit or implicit relationships. Terms may be preferred (the term best representing its concept) and thus represent the vocabulary of a business domain or user. Terms may be synonyms and point at the preferred term. A preferred term and its synonyms represent the fact that several terms describe the same concept although with different shades of meaning.

Terms may be arranged into a hierarchy of more generic and more specific elements. This relationship allows substituting a narrower term, such as \"USA\", for a wider term, such as \"country\".

The BusinessNomenclature package depends on the following packages:

    omg.org::CWM::ObjectModel::Core

The metamodel diagram for the BusinessNomenclature package is split into two parts. The first diagram shows the BusinessNomenclature classes and associations, while the second shows the inheritance hierarchy.

OCL Representation of Business Nomenclature Constraints
[C-1] A Concept may not relate to itself.
context Concept
inv: self.relatedConcept->forAll ( p | p <> self )

[C-2] The parent of a Glossary must be a Glossary.
context Glossary
inv: self.parent.oclIsKindOf( Glossary )

[C-3] The child of a Glossary must be a Glossary.
context Glossary
inv: self.child->forAll( p | p.oclIsKindOf( Glossary ) )

[C-4] The parent of a Taxonomy must be a Taxonomy.
context Taxonomy
inv: self.parent.oclIsKindOf( Taxonomy )

[C-5] The child of a Taxonomy must be a Taxonomy.
context Taxonomy
inv: self.child->forAll( p | p.oclIsKindOf( Taxonomy ) )

[C-6] A Term may not relate to itself.
context Term
inv: self.relatedTerm->forAll ( p | p <> self )

[C-7] A VocabularyElement may not relate to itself.
context Vocabulary
inv: self.relatedElement->forAll ( p | p <> self )

[C-8] The RelatedConcepts association is derived from the RelatedVocabularyElements association. All ends of the RelatedConcepts association must be Concepts.
context RelatedConcepts
inv: RelatedVocabularyElements.allInstances.select( element.oclIsKindOf( Concept )
and relatedElement.oclIsKindOf( Concept ) )

[C-9] The RelatedTerms association is derived from the RelatedVocabularyElements association. All ends of the RelatedTerms association must beTerms.
context RelatedTerms
inv: RelatedVocabularyElements.allInstances.select( element.oclIsKindOf( Term ) and
relatedElement.oclIsKindOf( Term ) )")
    @namespace(uri="http:///orgomg/cwm/analysis/businessnomenclature.ecore", prefix="orgomg.cwm.analysis.businessnomenclature")
    package businessnomenclature {
      @GenModel(documentation="This represents a common superclass for Concepts and Terms.")
      class VocabularyElement extends objectmodel.core.ModelElement {

        @GenModel(documentation="Provides the definition of the VocabularyElement.")
        attr objectmodel.core.String definition;

        @GenModel(documentation="Provides examples of the VocabularyElement.")
        attr objectmodel.core.String example;

        @GenModel(documentation="Identifies typical usage of the VocabularyElement.")
        attr objectmodel.core.String usage;

        @GenModel(documentation="Identifies the related VocabularyElements.")
        ref VocabularyElement[*]#element relatedElement;

        @GenModel(documentation="Identifies a VocabularyElement.")
        ref VocabularyElement[*]#relatedElement element;

        @GenModel(documentation="Identifies the ModelElements for which the VocabularyElement provides business meaning.")
        ref objectmodel.core.ModelElement[*]#vocabularyElement modelElement;
      }

      @GenModel(documentation="This represents a common superclass for Taxonomy and Glossary.")
      class Nomenclature extends objectmodel.core.Package {

        @GenModel(documentation="Identifies the parent Nomenclature.")
        transient ref Nomenclature#child parent;

        @GenModel(documentation="Identifies the child Nomenclatures.")
        val Nomenclature[*]#parent child;
      }

      @GenModel(documentation="This represents a collection of Concepts that form an ontology.")
      class Taxonomy extends Nomenclature {

        @GenModel(documentation="Identifies a Glossary.")
        ref Glossary[*]#taxonomy glossary;
      }

      @GenModel(documentation="This represents a collection of Terms.")
      class Glossary extends Nomenclature {

        @GenModel(documentation="Identifies the language that the Glossary is represented in.")
        attr objectmodel.core.String language;

        @GenModel(documentation="Identifies the Taxonomies from which the Glossary is derived.")
        ref Taxonomy[*]#glossary taxonomy;
      }

      @GenModel(documentation="This represents a business domain.")
      class BusinessDomain extends objectmodel.core.Package {
      }

      @GenModel(documentation="This represents a business idea or notion. 

Concepts are represented by Terms. Users use Terms that are familiar to them in their business environment to refer to Concepts.")
      class Concept extends VocabularyElement {

        @GenModel(documentation="Identifies a Term.")
        ref Term[*]#concept term;

        @GenModel(documentation="Identifies the related Concepts.")
        ref Concept[*]#concept relatedConcept;

        @GenModel(documentation="Identifies a Concept.")
        ref Concept[*]#relatedConcept concept;
      }

      @GenModel(documentation="This represents words or phrases used by business users to refer to Concepts.

A Term has a definition in a specific context. The context is provided by the referenced Concept that describes the underlying semantics.")
      class Term extends VocabularyElement {

        @GenModel(documentation="Identifies the Concepts from which the Term is derived.")
        ref Concept[*]#term concept;

        @GenModel(documentation="Identifies the related Terms.")
        ref Term[*]#term relatedTerm;

        @GenModel(documentation="Identifies a Term.")
        ref Term[*]#relatedTerm term;

        @GenModel(documentation="Identifies the preferred term for the synonym.")
        ref Term#synonym preferredTerm;

        @GenModel(documentation="Identifies a Term.")
        ref Term[*]#preferredTerm synonym;

        @GenModel(documentation="Identifies a Term.")
        ref Term[*]#narrowerTerm widerTerm;

        @GenModel(documentation="Identifies the narrower terms for the wider term.")
        ref Term[*]#widerTerm narrowerTerm;
      }

    }

  }

  @namespace(uri="http:///orgomg/cwm/management.ecore", prefix="orgomg.cwm.management")
  package management {
    @GenModel(documentation="The Warehouse Process package documents the process flows used to execute transformations. These process flows may be documented at the level of a complete TransformationActivity or its individual TransformationSteps. A WarehouseProcess object associates a transformation with a set of events which will be used to trigger the execution of the transformation.

The Warehouse Process package depends on the following packages:

    org.omg::CWM::ObjectModel::Core
    org.omg::CWM::ObjectModel::Behavioral
    org.omg::CWM::Analysis::Transformation

A WarehouseProcess object represents the processing of a transformation. It is instantiated as one of its subtypes WarehouseActivity or WarehouseStep, depending on whether it represents the processing of a TransformationActivity or a Transformation Step.

A WarehouseProcess may be associated with one or more WarehouseEvents, each identifying events that cause the processing to be initiated. It may also be associated with one or more internal events that will be triggered when processing terminates. A ProcessPackage may be used to group together related WarehouseActivities.

WarehouseEvents are divided into three categories: scheduled, external and internal. Scheduled events can either be defined as a point in time (each Wednesday at 2 pm) or be defined by intervals (every five minutes). A point in time event can be defined as a custom calendar which contains a set of calendar dates. This allows a series of dates to be reused across several WarehouseProcesses.

External events are triggered by something happening outside the data warehouse, for example by a batch process which is not described as a WarehouseProcess. Internal events are triggered by the termination of a WarehouseProcess. They can be either retry events or cascade events. Retry events normally trigger a rerun of the same WarehouseProcess, whereas cascade events normally trigger a different WarehouseProcess. An internal event may define a condition that determines whether or not the event is triggered. This condition can use details of the execution of the triggering WarehouseProcess recorded in the relevant ActivityExecution and StepExecution objects.

OCL Representation of Warehouse Process Constraints

[C-1] month must be specified when recurringType is everyYear.
context RecurringPointInTimeEvent inv:
self.recurringType=everyYear implies self.month->notEmpty

[C-2] month must be between 1 and 12 (inclusive) when specified.
context RecurringPointInTimeEvent inv:
self.month->notEmpty implies 1 <= self.month <= 12

[C-3] dayOfMonth must be specified when recurringType is everyYear or
everyMonth.
context RecurringPointInTimeEvent inv:
self.recurringType=everyYear or self.recurringType=everyMonth
implies self.dayOfMonth->notEmpty

[C-4] dayOfMonth must be between 1 and 31 (inclusive) when specified.
context RecurringPointInTimeEvent inv:
self.dayOfMonth->notEmpty implies 1 <= self.dayOfMonth <= 31

[C-5] dayOfWeek must be specified when recurringType is everyWeek.
context RecurringPointInTimeEvent inv:
self.recurringType=everyWeek implies self.dayOfWeek->notEmpty

[C-6] hour must be specified when recurringType is everyYear or everyMonth or
everyWeek or everyDay.
context RecurringPointInTimeEvent inv:
self.recurringType=everyYear or self.recurringType=everyMonth or
self.recurringType=everyWeek or self.recurringType=everyDay
implies self.hour->notEmpty

[C-7] hour must be between 0 and 23 (inclusive) when specified.
context RecurringPointInTimeEvent inv:
self.hour->notEmpty implies 0 <= hour <= 23

[C-8] minute must be specified when recurringType is not everyMinute.
context RecurringPointInTimeEvent inv:
self.recurringType<>everyMinute implies self.minute->notEmpty

[C-9] minute must be between 0 and 59 (inclusive) when specified.
context RecurringPointInTimeEvent inv:
self.minute->notEmpty implies 0 <= self.minute <= 59

[C-10] second must be between 0 and 59 (inclusive).
context RecurringPointInTimeEvent inv:
0 <= self.second <= 59")
    @namespace(uri="http:///orgomg/cwm/management/warehouseprocess.ecore", prefix="orgomg.cwm.management.warehouseprocess")
    package warehouseprocess {
      @GenModel(documentation="A WarehouseProcess represents the processing of a transformation. It is instantiated as one of its subtypes WarehouseActivity or WarehouseStep, depending on whether it represents the processing of a TransformationActivity or a Transformation Step.
A WarehouseProcess may be associated with one or more WarehouseEvents, each identifying events that cause the processing to be initiated. It may also be associated with one or more internal events that will be triggered when processing terminates.")
      abstract class WarehouseProcess extends objectmodel.core.ModelElement {

        @GenModel(documentation="When a WarehouseProcess is a constant mapping (such as a Relational View of legacy data or a continuous data propagation process), this flag indicates that the mapping does not require to be run for the target to be up-to-date and in sync with
the source.

")
        attr objectmodel.core.Boolean staticDefinition;

        @GenModel(documentation="This flag indicates if more than one instance of this WarehouseProcess may run at a time. If this flag is true, the scheduler should fail any attempt to trigger this WarehouseProcess while an instance is already in progress.")
        attr objectmodel.core.Boolean isSequential;

        @GenModel(documentation="Identifies a set of events of various types, which will be used to trigger the execution of the warehouse process and its associated transformations.	
")
        val events.WarehouseEvent[*]#warehouseProcess warehouseEvent;

        @GenModel(documentation="Identifies an internal event triggered by the termination of the WarehouseProcess. ")
        ref events.InternalEvent[*]#triggeringWP internalEvent;
      }

      @GenModel(documentation="A WarehouseStep is a component of a WarehouseActivity. It represents the processing of an individual TransformationStep. It may be used to identify WarehouseEvents that trigger the processing of the TransformationStep and/or InternalEvents that are
triggered by the conclusion of the processing of the TransformationStep.

For example, a WarehouseStep may be used to document how a specific TransformationStep should be retried upon failure.")
      class WarehouseStep extends WarehouseProcess {

        @GenModel(documentation="Associates a WarehouseStep with the TransformationStep it performs.")
        ref analysis.transformation.TransformationStep[1]#warehouseStep transformationStep;

        @GenModel(documentation="Identifies the WarehouseActivity of which a WarehouseStep is a component.")
        transient ref WarehouseActivity[1]#warehouseStep warehouseActivity;
      }

      @GenModel(documentation="A group of related WarehouseActivities.")
      class ProcessPackage extends objectmodel.core.Package {
      }

      @GenModel(documentation="A WarehouseActivity is a subtype of WarehouseProcess that represents the processing of a TransformationActivity. It may identify WarehouseEvents that trigger the processing of the TransformationActivity and InternalEvents that are triggered by the
conclusion of this processing. It may contain a set of WarehouseSteps that define in more detail the processing of the individual TransformationSteps of the TransformationActivity.")
      class WarehouseActivity extends WarehouseProcess {

        @GenModel(documentation="Identifies a WarehouseStep that is a component of the WarehouseActivity.")
        val WarehouseStep[*]#warehouseActivity warehouseStep;

        @GenModel(documentation="Identifies the TransformationActivity run by the WarehouseActivity.")
        ref analysis.transformation.TransformationActivity[1]#warehouseActivity transformationActivity;
      }

      @namespace(uri="http:///orgomg/cwm/management/warehouseprocess/datatype.ecore", prefix="orgomg.cwm.management.warehouseprocess.datatype")
      package ~datatype {
        @GenModel(documentation="everyYear, everyMonth, everyWeek, everyDay, everyHour, everyMinute")
        enum RecurringType {
          everyYear = 0;
          everyMonth = 1;
          everyWeek = 2;
          everyDay = 3;
          everyHour = 4;
          everyMinute = 5;
        }

        @GenModel(documentation="Monday, Tuesday, Wednesday, Thursday, Friday, Saturday, Sunday, workingDay, nonworkingDay")
        enum DayOfWeek {
          monday = 0;
          tuesday = 1;
          wednesday = 2;
          thursday = 3;
          friday = 4;
          saturday = 5;
          sunday = 6;
          workingDay = 7;
          nonworkingDay = 8;
        }

        @GenModel(documentation="waitForAll, waitForAny")
        enum WaitRuleType {
          waitForAll = 0;
          waitForAny = 1;
        }

      }

      @namespace(uri="http:///orgomg/cwm/management/warehouseprocess/events.ecore", prefix="orgomg.cwm.management.warehouseprocess.events")
      package events {
        @GenModel(documentation="A virtual class to refer to any Event.

A WarehouseEvent (or its derivations) represents what triggers the running of a WarehouseProcess. An event can be initiated by a clock, by an external trigger, or by an internal trigger (the conclusion of some WarehouseProcess).")
        abstract class WarehouseEvent extends objectmodel.behavioral.Event {

          @GenModel(documentation="Identifies the warehouse process which will triggered by the event.")
          transient ref WarehouseProcess[1]#warehouseEvent warehouseProcess;
        }

        @GenModel(documentation="A ScheduleEvent is an abstract class which covers all the clock based events.")
        abstract class ScheduleEvent extends WarehouseEvent {
        }

        @GenModel(documentation="A PointInTime event is triggered at a fixed time, independently of any external context.

The triggering time can be either defined functionally (as in the RecurringPointInTimeEvent extension of this class), or by an explicit list of times (CustomCalendarEvent).")
        class PointInTimeEvent extends ScheduleEvent {
        }

        @GenModel(documentation="This event is controlled by a list of dates and times. To make the list easily shareable between multiple WarehouseProcesses the calendar itself is in a separate class.")
        class CustomCalendarEvent extends PointInTimeEvent {

          @GenModel(documentation="Indicates which custom calendar is used for this event.
")
          ref CustomCalendar[1]#customCalendarEvent customCalendar;
        }

        @GenModel(documentation="A named list of dates and times. ")
        class CustomCalendar extends objectmodel.core.Package {

          @GenModel(documentation="Indicates which event uses this custom calendar.")
          ref CustomCalendarEvent[*]#customCalendar customCalendarEvent;
        }

        @GenModel(documentation="An entry in a CustomCalendar representing a specific date and time.")
        class CalendarDate extends objectmodel.core.ModelElement {

          @GenModel(documentation="The value of the date. ")
          attr objectmodel.core.Time specificDate;
        }

        @GenModel(documentation="An IntervalEvent controls a continuous run of a WarehouseProcess. The Warehouse Process will run, then wait for the duration specified in the event, then run again.

An IntervalEvent is not affected by the result of the WarehouseProcess.

")
        class IntervalEvent extends ScheduleEvent {

          @GenModel(documentation="Indicates the length of time (in seconds) to wait after a run of the WarehouseProcess before triggering the next one.
")
          attr objectmodel.core.Float duration;
        }

        @GenModel(documentation="An ExternalEvent allows the description of the triggering of a WarehouseProcess by a task which is not described in the model. This is merely a place holder. The actual behavior and the connection with the external trigger is left to the implementation of
the scheduler.")
        class ExternalEvent extends WarehouseEvent {
        }

        @GenModel(documentation="An event which may be triggered, depending on whether or not a condition is satisfied, by the conclusion of one or more WarehouseProcess runs.

There are two types of InternalEvents, depending whether the event triggers a series of different WarehouseProcesses, or whether the event triggers the same WarehouseProcess in an attempt to retry a failed run.")
        class InternalEvent extends WarehouseEvent {

          @GenModel(documentation="Identifies the triggering warehouse process. ")
          ref WarehouseProcess[+]#internalEvent triggeringWP;

          @GenModel(documentation="Indicates what condition the triggering WarehouseProcess run must meet to be considered (success, failure, warnings, etc.).

How the condition is expressed, and how the result of a Transform is generated is left to the implementation of the scheduler and the transformation, respectively.")
          !resolve val objectmodel.core.BooleanExpression condition;
        }

        @GenModel(documentation="A CascadeEvent indicates that completion of one or more triggering WarehouseProcesses triggers another WarehouseProcess.")
        class CascadeEvent extends InternalEvent {

          @GenModel(documentation="Indicates if the event should be triggered as soon as any of the triggering WarehouseProcesses has completed that satisfies the condition (inherited from InternalEvent) or only when all the triggering WarehouseProcesses have completed (provided the condition is satisfied).")
          attr ~datatype.WaitRuleType waitRule;
        }

        @GenModel(documentation="Indicates that a WarehouseProcess should be retried upon failure. This type of event is used for example when a WarehouseProcess relies on sources with uncertain availability (connection or uptime).

In general, the triggering WarehouseProcess and the triggered WarehouseProcess are the same, and only one WarehouseProcess is involved. But this is not an imposed limitation. It is left to the schedulers to decide on the implementation behavior for complex cases.")
        class RetryEvent extends InternalEvent {

          @GenModel(documentation="Indicates the length of time (in seconds) to wait before retrying the triggered WarehouseProcess.")
          attr objectmodel.core.Float waitDuration;

          @GenModel(documentation="Indicates how many times the triggered WarehouseProcess should be retried before being declared failed.")
          attr objectmodel.core.Integer maxCount;
        }

        @GenModel(documentation="This event triggers a WarehouseProcess on a regular basis such as a specific date or time (for example, the Wednesday of every other week, at 2:30 pm).")
        class RecurringPointInTimeEvent extends PointInTimeEvent {

          @GenModel(documentation="Indicates how often the event should be triggered (weekly, daily, etc.).")
          attr ~datatype.RecurringType recurringType;

          @GenModel(documentation="Indicates the repetition of the event. For example, for a weekly recurringType, a value of 1 will mean that it is to be triggered every week, a value of 2 will mean that it is to be triggered every other week, etc.")
          attr objectmodel.core.Integer frequencyFactor;

          @GenModel(documentation="Indicates which month of the year (from 1 to 12) an annual event is to be triggered.
")
          attr objectmodel.core.Integer month;

          @GenModel(documentation="Indicates which day of the month (from 1 to 31) a monthly or annual event is to be triggered. For a monthly event, if the day of the month is greater than the number of days in the month, it is assumed that the scheduler will run the WarehouseProcess on the last day of the month.
")
          attr objectmodel.core.Integer dayOfMonth;

          @GenModel(documentation="Indicates which day of the week a weekly schedule is running.
")
          attr ~datatype.DayOfWeek dayOfWeek;

          @GenModel(documentation="Indicates at what hour (from 0 to 23) an annual, monthly, weekly, or daily event is being triggered.
")
          attr objectmodel.core.Integer hour;

          @GenModel(documentation="Indicates at what minute (from 0 to 59) an event is triggered. Applies to all events except the \"everyMinute\" ones.")
          attr objectmodel.core.Integer minute;

          @GenModel(documentation="Indicates at what second (from 0 to 59) an event must be run. Applies to all events.
")
          attr objectmodel.core.Integer second;
        }

      }

    }

    @GenModel(documentation="The Warehouse Operation package contains classes recording the day-to-day operation of the warehouse processes.

The package covers three separate areas:

    Transformation Executions
    Measurements
    Change Requests

Details of the most recent executions of transformations can be recorded, identifying when they ran and whether they completed successfully. This can be used to determine how complete and up-to-date specific information in the data warehouse is.

An ActivityExecution represents an execution of a whole TransformationActivity, and a StepExecution object represents an execution of an individual TransformationStep. If a TransformationStep involves the use of an Operation , an associated StepExecution may reference a CallAction that records the actual arguments passed to the Operation. These classes allow the lineage of data in a data warehouse to be preserved, by recording when and how it was derived, and where it came from.

Measurement objects allow metrics to be held for any ModelElement. For example, they may be used to hold actual, estimated or planned values for the size of a table.

ChangeRequests allow details of proposed changes affecting any ModelElement to be recorded. They may also be used to keep a historical record of changes implemented or rejected. 

The Warehouse Operation package depends on the following packages:

    org.omg::CWM::ObjectModel::Core
    org.omg::CWM::ObjectModel::Behavioral
    org.omg::CWM::Analysis::Transformation

Separate model diagrams are shown below for each of the three main areas supported by the package.

OCL Representation of Warehouse Operation Constraints

[C-1] A ChangeRequest instance must not apply to itself.
context ChangeRequest
inv: self.modelElement -> forAll (element | element <> self)

[C-2] A completionDate may only be provided for a completed ChangeRequest.
context ChangeRequest
inv: self.completionDate->notEmpty implies self.completed

[C-3] A Measurement instance must not apply to itself.
context Measurement
inv: self.modelElement <> self

[C-4] If the TransformationExecution is not inProgress, the successful, status and endDate attributes must be present, and endDate must not be earlier than startDate.
context TransformationExecution
inv: self.inProgress=false implies (self.successful->notEmpty and
self.status->notEmpty and self.endDate->notEmpty and
self.endDate >= self.startDate)
")
    @namespace(uri="http:///orgomg/cwm/management/warehouseoperation.ecore", prefix="orgomg.cwm.management.warehouseoperation")
    package warehouseoperation {
      @GenModel(documentation="A Measurement object indicates the value of some attribute of an object. It can be the number of rows in a table, the number of pages in an index, the number of different values in a column, etc. 

The flexibility of this class allows for product specific extensions, without changing the model. ")
      class Measurement extends objectmodel.core.ModelElement {

        @GenModel(documentation="The value of this Measurement.")
        attr objectmodel.core.Float value;

        @GenModel(documentation="The unit of measurement.")
        attr objectmodel.core.String unit;

        @GenModel(documentation="Identifies how the value was computed.

The following values have specific meanings:

   measure (measured value)
   estimate (estimated value)
   plan (planned value)
   minimum (minimum value)
   maximum (maximum value)
   average (average value)")
        attr objectmodel.core.String type;

        @GenModel(documentation="When the value has been computed (see also effectiveDate).")
        attr objectmodel.core.Time creationDate;

        @GenModel(documentation="When the value is effective. For measured values, effective and creation dates should be the same. For estimated actual values, the creation date may be later than the effective date. For plan values, the effective date is normally later than the creation date.")
        attr objectmodel.core.Time effectiveDate;

        @GenModel(documentation="Identifies the ModelElement to which a Measurement relates.")
        ref objectmodel.core.ModelElement[1]#measurement modelElement;
      }

      @GenModel(documentation="This represents a request for change affecting one or more ModelElements. The change request may represent a proposed change or one that has been implemented or rejected.")
      class ChangeRequest extends objectmodel.core.ModelElement {

        @GenModel(documentation="A description of the change.")
        attr objectmodel.core.String changeDescription;

        @GenModel(documentation="The reason or justification for the ChangeRequest.")
        attr objectmodel.core.String changeReason;

        @GenModel(documentation="The status of the ChangeRequest. This would normally contain a string such as proposed, agreed, implemented or rejected.")
        attr objectmodel.core.String status;

        @GenModel(documentation="Indicates that no further action is required for this change request, i.e. it has either
been implemented or been rejected.")
        attr objectmodel.core.Boolean completed;

        @GenModel(documentation="When the change request was raised.")
        attr objectmodel.core.Time requestDate;

        @GenModel(documentation="The date when all action on the change request was completed (i.e. when implementation was completed or it was rejected).")
        attr objectmodel.core.Time completionDate;

        @GenModel(documentation="Identifies a ModelElement affected by a ChangeRequest.")
        ref objectmodel.core.ModelElement[+]#changeRequest modelElement;
      }

      @GenModel(documentation="A TransformationExecution is used to record details of a specific execution.")
      class TransformationExecution extends objectmodel.core.ModelElement {

        @GenModel(documentation="The date and time when the execution started.")
        attr objectmodel.core.Time startDate;

        @GenModel(documentation="The date and time when the execution ended.")
        attr objectmodel.core.Time endDate;

        @GenModel(documentation="A boolean indicating whether or not the execution is in progress.")
        attr objectmodel.core.Boolean inProgress;

        @GenModel(documentation="A boolean indicating whether or not the execution completed successfully.")
        attr objectmodel.core.Boolean successful;

        @GenModel(documentation="An expression that may be used to provide status details of the execution. For example it could provide comments for a successful execution, or details of errors for an unsuccessful execution.")
        !resolve val objectmodel.core.Expression status;
      }

      @GenModel(documentation="An ActivityExecution is used to record details of a specific execution of a TransformationActivity.")
      class ActivityExecution extends TransformationExecution {

        @GenModel(documentation="Identifies the TransformationActivity.")
        ref analysis.transformation.TransformationActivity[1]#execution transformationActivity;

        @GenModel(documentation="Identifies the StepExecutions recording the results of executing the individual
TransformationSteps.")
        val StepExecution[*]#activityExecution stepExecution;
      }

      @GenModel(documentation="A StepExecution is used to record details of a specific execution of a TransformationStep.")
      class StepExecution extends TransformationExecution {

        @GenModel(documentation="Identifies the TransformationStep.")
        ref analysis.transformation.TransformationStep[1]#execution transformationStep;

        @GenModel(documentation="Identifies the ActivityExecution of which the StepExecution is a part.")
        transient ref ActivityExecution#stepExecution activityExecution;

        @GenModel(documentation="Identifies the CallAction for a StepExecution.")
        ref objectmodel.behavioral.CallAction#stepExecution callAction;
      }

    }

  }

  @GenModel(documentation="CWMComplete is a package that invokes all other CWM packages.  It does this by listing all of the other CWM metamodel packages in declaration order in the uml2mof.clusteredImport property of the MOF tab.  

CWMComplete is included as a convenience for software that wants to generate the entire CWM package.  It is non-normative, is not included in any normative CWM dtd file, and is not documented in either volume of the CWM specification.")
  @namespace(uri="http:///orgomg/cwm/cwmcomplete.ecore", prefix="orgomg.cwm.cwmcomplete")
  package cwmcomplete {
  }

}

@GenModel(documentation="CWM provides interchange for the common portions of data warehouse tool metamodels. However, the CWM metamodel is also intended to be a foundation for tool-specific metamodels and may be extended to be a tool-specific metamodel.

There are two general extension techniques to CWM:

1. Use of the general extension mechanisms provided by the UML Object Model, namely Tagged Values and Stereotypes. This approach is normally used for minor extensions (for example additional attributes of model objects) that are not significant enough to require the production of a tool-specific model.

2. Non-normative model extensions documented as additional metamodel packages that extend the CWM metamodel.

In both cases, tools must share a common understanding of the extension to be able to interchange the extended information.

The chapters provided in this volume represent examples of non-normative model extensions to the CWM metamodel. They should be treated only as examples, and may be changed or updated by the vendors without notice or revision to this volume.

(Text appearing in the CWMX package is taken from Volume 2 of the Common Warehouse Metamodel specification, document number ad/2001-02-02, published by the Object Management Group.  The complete document is available from the OMG web site at www.omg.org)")
@namespace(uri="http:///orgomg/cwmx.ecore", prefix="orgomg.cwmx")
package cwmx {
  @namespace(uri="http:///orgomg/cwmx/foundation.ecore", prefix="orgomg.cwmx.foundation")
  package foundation {
    @GenModel(documentation="Entity Relationship (ER) models are used frequently as a means of describing business processes and the data on which they operate. The ER model was a precursor of today?s object models and is probably the first data model to have the adjective \"semantic\" applied to it.

Although the ER model is widely used to capture some aspects of application logic and data structure, there have been surprisingly few implementations of the model as data resources. Most development teams have preferred to map their ER models to existing data systems such as relational database management systems. This dearth of physical implementations has meant that modelers have been free to elaborate the basic ER model in any (and all) convenient directions with little or no impact on deployed information systems. Consequently, variants of the ER model abound.

Because of its importance as a design and tool model, the CWM includes a foundational ER model from which individual tool models may derive their specific extensions. Doing so will improve the extent to which ER models can be interchanged between various tooling environments.

The ER package depends on the following packages:

    org.omg::CWM::Core
    org.omg::CWM::Relationships
    org.omg::CWM::Foundation::Expressions
    org.omg::CWM::Foundation::KeysIndexes

Many ER model concepts map directly onto equivalent CWM concepts, making the ER classes seem to be little more than renamings of CWM classes. However, the renaming provided by deriving ER model classes from appropriate CWM classes is considered valuable to promote understanding. In such cases, the discussion of the role of ER classes has been kept minimal. However, when important modeling choices were required, they are discussed in the following class descriptions.

OCL Representation of Entity Relationship Constraints

[C-1] A Domain instance may not be its own base type.
context Domain inv:
self.baseType <> self
")
    @namespace(uri="http:///orgomg/cwmx/foundation/er.ecore", prefix="orgomg.cwmx.foundation.er")
    package er {
      @GenModel(documentation="Instances of the Entity class are the primary objects in a ER model. They represent ideas, processes, and things of interest in an application system or tool model.")
      class Entity extends cwm.objectmodel.core.Class {
      }

      @GenModel(documentation="A NonUniqueKey in the ER model is equivalent to a CWM Index. Values of the keys are not necessarily either unique or required.")
      class NonuniqueKey extends cwm.foundation.keysindexes.Index {
      }

      @GenModel(documentation="Candidate keys are keys that meet the requirements for being a primary key. However, only keys that are members of the PrimaryKey subclass have actually been identified as primary keys.")
      class CandidateKey extends cwm.foundation.keysindexes.UniqueKey {
      }

      @GenModel(documentation="A ForeignKey instance identifies a set of attributes in one Entity instance that uniquely identifies an instance of another Entity containing a matching primary or candidate key value.")
      class ForeignKey extends cwm.foundation.keysindexes.KeyRelationship {

        @GenModel(documentation="Identifies the RelationshipEnd instance that this ForeignKey instance implements.")
        ref RelationshipEnd#foreignKey relationshipEnd;
      }

      @GenModel(documentation="Domain instances represent restrictions on data types declared elsewhere and can be used as the type of Attribute instances. Domains restrict, in a manner described by their validationRule attribute, the values of the type identified via the baseType reference that can be stored in the Attribute. Because the baseType reference is optional, Domains are not required to have a base type; in such cases, the type of the Domain is the type of the default expression.

The following figures illustrate ways that Domains can be used to subset a enumerated and numeric data types.")
      class Domain extends cwm.objectmodel.core.Classifier {

        @GenModel(documentation="An expression indicating the default value of Attributes for which this Domain serves as the type.")
        !resolve val cwm.foundation.expressions.ExpressionNode default;

        @GenModel(documentation="Contains an expression that describes the valid values for this attribute. If the baseType reference is not empty, the expression restricts the values of the base type indicated by it.")
        !resolve val cwm.foundation.expressions.ExpressionNode validationRule;

        @GenModel(documentation="Identifies the Classifier instance that is the type upon which the Domain is based.")
        ref cwm.objectmodel.core.Classifier#domain baseType;
      }

      @GenModel(documentation="Instances of the ER model Attribute class represent characteristics of some Entity or Relationship instance.")
      class Attribute extends cwm.objectmodel.core.Attribute {
      }

      @GenModel(documentation="ER Relationship instances represent links between Entity instances. Because they derive from AssociationClass, Relationships can have attributes as allowed by some ER model extensions. This derivation also allows Relationship instances to be used as the end points of other Relationship instances.")
      class Relationship extends cwm.objectmodel.relationships.Association {
      }

      @GenModel(documentation="The RelationshipEnd class extends CWM?s AssociationEnd class to permit the definition of separate delete, update, and insert rules on each end of a Relationship.

An ER model Relationship instance owns two or more RelationshipEnds via an inherited CWM association between the Association and AssociationEnd classes.")
      class RelationshipEnd extends cwm.objectmodel.relationships.AssociationEnd {

        @GenModel(documentation="An expression describing the integrity constraint rule for deletes on this RelationshipEnd instance.")
        !resolve val cwm.foundation.expressions.ExpressionNode delete;

        @GenModel(documentation="An expression describing the integrity constraint rule for updates on this RelationshipEnd instance.")
        !resolve val cwm.foundation.expressions.ExpressionNode update;

        @GenModel(documentation="An expression describing the integrity constraint rule for inserts on this RelationshipEnd instance. ")
        !resolve val cwm.foundation.expressions.ExpressionNode insert;

        @GenModel(documentation="Identifies the ForeignKey instance that implements the RelationshipEnd instance.")
        ref ForeignKey#relationshipEnd foreignKey;
      }

      @GenModel(documentation="A collection of ER models and model libraries. Model libraries can be nested using the inherited CWM ElementOwnership association between Namespace and ModelElement. The same inherited CWM association is used to define ER package Model instances that reside in the current model library.")
      class ModelLibrary extends cwm.objectmodel.core.Subsystem {
      }

      @GenModel(documentation="Instances of this class represent ER models. Models are collected together by ModelLibrary instances.")
      class Model extends cwm.objectmodel.core.Model {
      }

      @GenModel(documentation="A meaningful subset of the instances in an ER Model instance. Normally, a SubjectArea instance will consist of the Entity and Relationship instances it owns or imports. The inherited CWM ElementOwnership association between ModelElement and Namespace is used to link SubjectArea instances to their owning Model instances.")
      class SubjectArea extends cwm.objectmodel.core.Package {
      }

      @GenModel(documentation="PrimaryKey instances identify a key that uniquely identifies each instance of an Entity and that is distinguished by the modeler as the Entity?s primary key.")
      class PrimaryKey extends CandidateKey {
      }

    }

  }

  @namespace(uri="http:///orgomg/cwmx/resource.ecore", prefix="orgomg.cwmx.resource")
  package resource {
    @GenModel(documentation="The concepts and ideas implicit in the definition of the COBOL language?s DATA DIVISION were one of the earliest (if not the first) formalizations of the ubiquitous record model. A COBOL program contains much more than just record descriptions.

However, because neither CWM nor UML attempt to describe programming languages directly, only the DATA DIVISION is described here. The model presented here is  compliant to the COBOL 85 language standard [COBOL].

The primary purpose of the COBOL DATA DIVISION metamodel extension package in CWM is to allow the structure of DATA DIVISIONs to be captured so that their usage of other model elements (such as RecordDefs and Fields) can be modeled. This allows definition of files and databases created by COBOL programs as well as direct support for tools that attempt to track the lineage and determine the impact of proposed changes to COBOL application programs. The metamodel does not, however, provide sufficient structure to support tools that want to capture the structure of a DATA DIVISION source into a CWM repository and then be able to faithfully reproduce the source on demand.

The COBOL DATA DIVISION metamodel extension also serves as an example of the use of the CWM Record metamodel. The CWM Record package is intended as a foundation upon which many record-oriented programming languages can be described. The COBOL Data Division extension package is provided as example demonstrating appropriate usage of CWM and UML classes in modeling the data structure representation parts of this and similar programming language environments.

The COBOL Data Division package depends on the following packages:

    org.omg::CWM::ObjectModel::Core
    org.omg::CWM::Foundation::KeysIndexes

OCL Representation of COBOLData Constraints

[C-1] The presence of a padding character can be indicated either by a constant (in the padLiteral attribute) or by a reference to another field via the padField reference but not by both.
context COBOLFD inv:
self.padLiteral <> \"\" implies self.padField->isEmpty

[C-2] Level 77 fields must be owned by the Working Storage or the Linkage sections and may not have children.
context COBOLField inv:
self.level = 77 implies (self.classifier.oclIsKindOf(WorkingStorageSection) or
self.classifier.oclIsKindOf(LinkageSection) and self.type.feature->isEmpty

[C-3] Field level must be 01 to 49, 77.
context COBOLField inv:
(self.level >= 1 and self.level <= 49) or self.level = 77

[C-4] A COBOLField can only be redefined by fields at the same level.
context COBOLField inv:
self.redefinedByField->NotEmpty implies self.level = self.redefinedByField.level

[C-5] The RecordDef instances defined within each COBOLFD in a FileSection instance must belong to the FileSection instance.
context FileSection inv:
self.cobolFD.record->exists(p | p = self.record)

[C-6] LinageInfo must either have a value or reference a COBOLItem, but not both.
context LinageInfo inv:
self.value->isEmpty implies not self.cobolItem->isEmpty")
    @namespace(uri="http:///orgomg/cwmx/resource/coboldata.ecore", prefix="orgomg.cwmx.resource.coboldata")
    package coboldata {
      @GenModel(documentation="Represents COBOL FD definitions. FDs describe files that are used in COBOL programs. 

The size of COBOLFD records may vary within a range bounded by the contents of the minRecords and maxRecords attributes and with a current size given by the field identified by the dependsOn reference. Two attributes and a reference are used to represent the necessary information. To illustrate the roles they play, the names of the attributes and the reference are substituted into the following COBOL syntax fragment:

   RECORD IS VARYING FROM minRecords TO maxRecords DEPENDING ON dependsOn")
      class COBOLFD extends cwm.objectmodel.core.Class, cwm.resource.record.RecordFile {

        @GenModel(documentation="Contains the physical organization of the file.")
        attr FileOrganization organization;

        @GenModel(documentation="Contains the access mode of the file.")
        attr AccessType accessMode;

        @GenModel(documentation="If True, the file is optional at runtime.")
        attr cwm.objectmodel.core.Boolean isOptional;

        @GenModel(documentation="Contains the number of buffer areas reserved for the file.")
        attr cwm.objectmodel.core.Integer reserveAreas;

        @GenModel(documentation="Contains the name of the storage medium the file is assigned to.")
        attr cwm.objectmodel.core.String assignTo;

        @GenModel(documentation="Contains the name of the code set.")
        attr cwm.objectmodel.core.String codeSetLit;

        @GenModel(documentation="Contains the unit type for the contents of the minBlocks and maxBlocks fields.")
        attr BlockKind blockSizeUnit;

        @GenModel(documentation="Contains the minimum number of <units> per block, where <unit> is specified by the blockSizeUnit attribute.")
        attr cwm.objectmodel.core.Integer minBlocks;

        @GenModel(documentation="Contains the maximum number of <units> per block, where <unit> is specified by the blockSizeUnit attribute.")
        attr cwm.objectmodel.core.Integer maxBlocks;

        @GenModel(documentation="Contains the minimum number of characters per record.")
        attr cwm.objectmodel.core.Integer minRecords;

        @GenModel(documentation="Contains the maximum number of characters per record.")
        attr cwm.objectmodel.core.Integer maxRecords;

        @GenModel(documentation="Contains the label kind of the file.")
        attr LabelKind labelKind;

        @GenModel(documentation="If True, the file is external.")
        attr cwm.objectmodel.core.Boolean isExternal;

        @GenModel(documentation="If True, the file is global.")
        attr cwm.objectmodel.core.Boolean isGlobal;

        @GenModel(documentation="If not an empty string, contains the pad character. If an empty string, the padField reference may point to a COBOLField instance that contains the pad character.")
        attr cwm.objectmodel.core.String padLiteral;

        @GenModel(documentation="Identifies the COBOLItem instance that contains the status ID for this COBOLFD instance.")
        ref COBOLItem#statusFD statusID;

        @GenModel(documentation="Identifies the LinageInfo instances for this COBOLFD instance.")
        val LinageInfo[0..4]#cobolFD linageInfo;

        @GenModel(documentation="Identifies the FileSection instances that contain this COBOLFD instance.")
        transient ref FileSection[1]#cobolFD fileSection;

        @GenModel(documentation="Identifies the COBOLItem instance that contains the current size of the COBOLFD instance?s records.")
        ref COBOLItem#dependingFD dependsOn;

        @GenModel(documentation="Identifies the COBOLField instance that contains the pad character for this COBOLFD.")
        ref COBOLItem#paddedFD padField;

        @GenModel(documentation="Identifies the COBOLField instance containing the current relative record offset in the file represented by the COBOLFD instance.")
        ref COBOLItem#relativeFD relativeField;
      }

      @GenModel(documentation="The COBOLItem class is an abstract metaclass that represents the commonalities shared by both the COBOLField and Renames metaclasses.")
      abstract class COBOLItem extends cwm.resource.record.Field {

        @GenModel(documentation="Identifies the field that occurs (i.e., the array).")
        ref COBOLField[*]#dependingOnField occurringField;

        @GenModel(documentation="Identifies the COBOLFD instance for which this COBOLItem instance contains status ID information.")
        ref COBOLFD[*]#statusID statusFD;

        @GenModel(documentation="Identifies the linageInfo instances that reference a COBOLItem instance.")
        ref LinageInfo[*]#cobolItem linageInfo;

        @GenModel(documentation="Identifies the COBOLFD instances for which the COBOLItem instance contains the current record size.")
        ref COBOLFD[*]#dependsOn dependingFD;

        @GenModel(documentation="Identifies the COBOLFD instance that is padded by this field.")
        ref COBOLFD[*]#padField paddedFD;

        @GenModel(documentation="Identifies the COBOLFD instances for which this COBOLField instance acts as a relative record offset.")
        ref COBOLFD[*]#relativeField relativeFD;
      }

      @GenModel(documentation="Represents fields that appear in COBOL record descriptions. COBOLField instances are associated with their owning RecordDef or Group instances via the UML owner/feature association between Feature and Classifier.

The VALUE IS clause for a COBOLField instance is stored in the initialValue attribute inherited from the UML Attribute superclass.

The \"occurs-depending\" syntax that may be attached to a COBOLField instance is addressed by a collection of attributes (occursLower and occursUpper) and a reference (dependingOnField). To illustrate the roles these attributes and references play, their names can be substituted into the following COBOL syntax fragment: 

    OCCURS occursLower TO occursUpper TIMES DEPENDING ON dependingOnField")
      class COBOLField extends COBOLItem {

        @GenModel(documentation="The level number of a COBOLField.
")
        attr cwm.objectmodel.core.Integer level;

        @GenModel(documentation="The type of sign for the field.")
        attr SignKindType signKind;

        @GenModel(documentation="If True, the field is a filler field.")
        attr cwm.objectmodel.core.Boolean isFiller;

        @GenModel(documentation="If True, the content of the field is right justified.")
        attr cwm.objectmodel.core.Boolean isJustifiedRight;

        @GenModel(documentation="If True, the field is interpreted as having the numeric value zero when the field contains blanks.")
        attr cwm.objectmodel.core.Boolean isBlankWhenZero;

        @GenModel(documentation="If True, the field is synchronized.")
        attr cwm.objectmodel.core.Boolean isSynchronized;

        @GenModel(documentation="Contains the picture specification for the field.")
        attr cwm.objectmodel.core.String picture;

        @GenModel(documentation="If the field occurs, contains the lower bound of the number of possible occurrences.")
        attr cwm.objectmodel.core.Integer occursLower;

        @GenModel(documentation="If the field occurs, contains the upper bound of the number of possible occurrences.")
        attr cwm.objectmodel.core.Integer occursUpper;

        @GenModel(documentation="A list of strings that are the names obtained from the INDEXED BY clause.")
        attr cwm.objectmodel.core.String indexName;

        @GenModel(documentation="If True, the field is external.")
        attr cwm.objectmodel.core.Boolean isExternal;

        @GenModel(documentation="If True, the field is global.")
        attr cwm.objectmodel.core.Boolean isGlobal;

        @GenModel(documentation="Identifies the COBOLField instance that contains the number of occurrences.")
        ref COBOLItem#occurringField dependingOnField;

        @GenModel(documentation="Identifies the COBOLField instance that is redefined.")
        ref COBOLField#redefinedByField redefinedField;

        @GenModel(documentation="Identifies the COBOLField instances that redefine this field.")
        ref COBOLField[*]#redefinedField redefinedByField;

        @GenModel(documentation="Identifies the OccursKey instances relevant for this field.")
        val OccursKey[*]#occursKeyOf occursKeyInfo;

        @GenModel(documentation="Identifies the OccursKey instances relevant to this COBOLField instance.")
        ref OccursKey[*]#occursKeyField occursKeyFieldInfo;

        @GenModel(documentation="Identifies the Renames instances in which this COBOLField instance is the first renamed field.")
        ref Renames[*]#firstField firstRenames;

        @GenModel(documentation="Identifies the Renames instances in which this COBOLField instance is the last renamed field in a range of renamed fields.")
        ref Renames[*]#thruField thruRenames;
      }

      @GenModel(documentation="Renames instances define alternate identifiers for one or more contiguous COBOLField instances. Although they are not truly COBOL fields, Renames must be ordered in a record along with true COBOL fields. Because they are ObjectModel Features, they can be ordered among COBOL fields via the ClassifierFeature association.
")
      class Renames extends COBOLItem {

        @GenModel(documentation="Identifies the COBOLField instance that is the first renamed field.")
        ref COBOLField[1]#firstRenames firstField;

        @GenModel(documentation="Identifies the COBOLField instance that is the last field in a range of renamed fields.")
        ref COBOLField#thruRenames thruField;
      }

      @GenModel(documentation="Instances of Section describe the various sections of a COBOL Data Division.  Section instances are use primarily as collection containers for the RecordDefs that a Section may contain.")
      class Section extends cwm.objectmodel.core.Classifier {

        @GenModel(documentation="Identifies the RecordDef instances that are defined in the Section instance.")
        ref cwm.resource.record.RecordDef[*]#section record;
      }

      @GenModel(documentation="Represents the Working Storage section of a COBOL Data Division.")
      class WorkingStorageSection extends Section {
      }

      @GenModel(documentation="Represents the File section of a COBOL Data Division.")
      class FileSection extends Section {

        @GenModel(documentation="Identifies the COBOLFD instances that this FileSection instance contains.")
        val COBOLFD[*]#fileSection cobolFD;
      }

      @GenModel(documentation="Represents the Report Writer section of a COBOL Data Division. Although a metaclass for this section remains in the standard, the section itself appears to be deprecated.")
      class ReportWriterSection extends Section {
      }

      @GenModel(documentation="Instances of Section describe the various sections of a COBOL Data Division. Section instances are use primarily as collection containers for the RecordDefs that a Section may contain.")
      class LinkageSection extends Section {
      }

      @GenModel(documentation="This intersection class identifies the COBOLField instances that are parts of occurs keys and contains attributes relevant to the fields? roles in the occurs key.")
      class OccursKey extends cwm.objectmodel.core.ModelElement {

        @GenModel(documentation="If True, the COBOLField on the occursKeyField end is maintained in an ascending order in the occurs key. If False, the occursKeyField is maintained in descending order. ")
        attr cwm.objectmodel.core.Boolean isAscending;

        @GenModel(documentation="Identifies the COBOLField instance that owns the occurs key.")
        transient ref COBOLField[1]#occursKeyInfo occursKeyOf;

        @GenModel(documentation="Identifies the COBOLField instance that participates in this occurs key.")
        ref COBOLField[1]#occursKeyFieldInfo occursKeyField;
      }

      @GenModel(documentation="LinageInfo instances are used to record the individual components of a LINAGE clause for a COBOLFD. A LINAGE clause is used to specify a page layout for a sequential file.")
      class LinageInfo extends cwm.objectmodel.core.ModelElement {

        @GenModel(documentation="Contains the value of the LinageInfo. If the value is empty, the cobolField reference must identify a COBOLField instance that contains the value.")
        attr cwm.objectmodel.core.Integer value;

        @GenModel(documentation="Identifies the COBOLItem instance that contains the linage information. If thisreference is empty, the value attribute must contain the linage information.")
        attr LinageInfoType type;

        @GenModel(documentation="Identifies the COBOLItem instance to which the LinageInfo instance applies.")
        ref COBOLItem#linageInfo cobolItem;

        @GenModel(documentation="Identifies the COBOLFD instance that owns this LinageInfo instance.")
        transient ref COBOLFD[1]#linageInfo cobolFD;
      }

      @GenModel(documentation="A COBOLFDIndex instance represents a RECORD KEY or ALTERNATE RECORD KEY for an INDEXED file.")
      class COBOLFDIndex extends cwm.foundation.keysindexes.Index {

        @GenModel(documentation="If True, this is an alternate index.")
        attr cwm.objectmodel.core.Boolean isAlternate;
      }

      @GenModel(documentation="A subclass of UML?s DataType class representing valid COBOL usage types. The type attribute that a COBOLField inherits from StructuralFeature should point to one of the instances of Usage defined here.

Defined M1 instances of the Usage class have the names: COMP, DISPLAY, and INDEX. Common extension data types (such as BINARY, PACKEDDECIMAL, COMP-1, COMP-2, COMP-3, etc.) can be easily added by creating addition M1 instances of Usage without the need to change the metamodel change.")
      class Usage extends cwm.objectmodel.core.DataType {
      }

      @GenModel(documentation="An enumeration representing the values that a COBOLFD access mode may take.")
      enum AccessType {
        at_unspecified = 0;
        at_dynamic = 1;
        at_random = 2;
        at_sequential = 3;
      }

      @GenModel(documentation="An enumeration representing the values that COBOLFD block size fields may take.")
      enum BlockKind {
        bk_records = 0;
        bk_characters = 1;
      }

      @GenModel(documentation="An enumeration representing the values that a COBOLFD  file organization may take.")
      enum FileOrganization {
        fo_unspecified = 0;
        fo_indexed = 1;
        fo_relative = 2;
        fo_sequential = 3;
      }

      @GenModel(documentation="An enumeration representing the values that a COBOLFD label kind may take.")
      enum LabelKind {
        lk_unspecified = 0;
        lk_standard = 1;
        lk_omitted = 2;
      }

      @GenModel(documentation="An enumeration representing the types of linage information the are maintained for a COBOLFD.")
      enum LinageInfoType {
        li_linage = 0;
        li_linageFooting = 1;
        li_linageTop = 2;
        li_linageBottom = 3;
      }

      @GenModel(documentation="An enumeration representing the values that a COBOLField sign may take.")
      enum SignKindType {
        sk_unsigned = 0;
        sk_leadingSign = 1;
        sk_trailingSign = 2;
        sk_leadingSepSign = 3;
        sk_trailingSepSign = 4;
      }

    }

    @GenModel(documentation="The CWM DMSII extension package contains classes supporting the description of DMS II database schemata and their deployment. DMS II is a database system available on Unisys ClearPath NX servers. DMS II is a non-CODASYL, network model database management system. The DMS II extension package is provided as example demonstrating appropriate usage of CWM classes in modeling this and similar DBMS environments.

Because DMSII database schemas are normally stored in record-based source files written in a data definition language called DASDL, the CWM DMSII extension package contains constructs allowing the declaration-order sequence of the DASDL source file to be preserved in the model. The goal of this is to allow a DASDL source to be stored into the DMSII model and subsequently regenerated from the model by a
suitably designed utility program. To achieve this ordering, the DMSII model represents ownership using the CWM ClassifierFeature association which is ordered, rather than the alternate technique using the ElementOwnership association which is unordered. A side-effect of this choice is that any DMSII class that can be ordered must be subclass of the CWM ObjectModel?s Feature class; this is the reason for the
multiple inheritance required to define the SetStructure, DataSet, Database and Remap classes.

For convenience, utilities may chose to store the text of the DASDL file from which the database was created in a CWM Description instance attached to particular instances of DMSII model classes. The names of DMSII model elements are stored in the name attribute that every DMSII instance inherits from CWM?s ModelElement class.

The DMS II package depends on the following packages:

    org.omg::CWM::ObjectModel::Core
    org.omg::CWM::Foundation::BusinessInformation
    org.omg::CWM::Foundation::Expressions
    org.omg::CWM::Foundation::KeyIndexes
    org.omg::CWM::Foundation::Record

OCL Representation of DMSII Constraints

[C-1] An Access must span a DataSet.
context Access inv:
self.spannedClass->size = 1 and self.spannedClass.oclIsKindOf(DataSet)

[C-2] The types of ModelElements that may own DASDLProperties is limited by the
following OCL.
context DASDLProperty inv:
self.owner.oclIsKindOf(DataSet) or self.owner.oclIsKindOf(SetStructure) or
self.owner.oclIsKindOf(Database) or self.owner.oclIsKindOf(PhysicalDatabase) or
self.owner.oclIsKindOf(PhysicalDataset) or self.owner.oclIsKindOf(PhysicalSet) or
self.owner.oclIsKindOf(PhysicalDatasetOverride) or
self.owner.oclIsKindOf(PhysicalSetOverride) or
self.owner.oclIsKindOf(PhysicalAccessOverride)

[C-3] An independent database may not be owned.
context Database inv:
not self.isLogical implies self.classifier->isEmpty

[C-4] A logical database must be owned by an independent database.
context Database inv:
self.isLogical implies (self.classifier->size = 1 and
self.classifier.oclIsTypeOf(Database) and not self.classifier.isLogical)

[C-5] A database can own SetStructure, DataSet, Remark, and Database, Remap,
PhysicalDataSetOverride, PhysicalSetOverride, and PhysicalAccessOverride
instances.
context Database inv:
self.feature->forAll(x | x.oclIsTypeOf(SetStructure) or x.oclIsTypeOf(DataSet) or
x.oclIsTypeOf(Remark) or x.oclIsTypeOf(Database) or
x.oclIsTypeOf(PhysicalDataSetOverride) or x.oclIsTypeOf(Remap) or
x.oclIsTypeOf(PhysicalSetOverride) or x.oclIsTypeOf(PhysicalAccessOverride))

[C-6] A DataItem that owns FieldBit instances must have a data type of FIELD.
context DataItem inv:
self.fieldBit.notEmpty implies self.type.name = \"FIELD\"

[C-7] A reference to a StructuralFeature must refer to a DataSet or a SetStructure
instance.
context DataItem inv:
self.structure.notEmpty implies self.structure.type.oclIsKindOf(DataSet) or
self.structure.type.oclIsKindOf(SetStructure)

[C-8] A DataItem may not be its own occursDataItem.
context DataItem inv:
self.occursDataItem <> self

[C-9]A DataItem may not be its own occuringDataItem.
context DataItem inv:
self.occuringDataItem <> self

[C-10] A DataSet may have one of the following organizations.
context DataItem inv:
self.organization = \"COMPACT\" or self.organization = \"DIRECT\" or
self.organization = \"ORDERED\" or self.organization = \"RANDOM\" or
self.organization = \"RESTART\" or self.organization = \"STANDARD\" or
self.organization = \"UNORDERED\"

[C-11] The reorganize attribute, if present, must be one of the allowed values from
the DASDL manual.
context DataSet inv:
self.reorganize <> \"\" implies self.reorganize = \"ITEMS SAME\" or self.reorganize =
\"ITEMS CHANGED\"

[C-12] The partitioningSet, if present, must span the DataSet.
context DataSet inv:
self.partitioningSet->size = 1 implies self.partitioningSet.namespace = self

[C-13] If the DataSet has VariableFormatParts, it must also have an attribute of the
type \"RECORD TYPE\".
context DataSet inv:
self.ownedElement->exists(oclIsKindOf(VariableFormatPart)) implies
self.feature.oclAsType(StructuralFeature)->exists(type.name = \"RECORD TYPE\")

[C-14] The collation clause, if present, must be one of the allowed values from the
DASDL manual.
context KeyItem inv:
self.collation = \"BINARY\" or self.collation = \"EQUIVALENT\" or self.collation = \"LOGICAL\"

[C-15] PhysicalAccessOverride instances must be owned by an Access instance.
context PhysicalAccessOverride inv:
self.namespace.oclIsKindOf(Access)

[C-16] A PhysicalDatabase instance must be owned by a Database instance.
context PhysicalDatabase inv:
self.namespace->size = 1 and self.namespace.oclIsKindOf(Database)

[C-17] A PhysicalDataSet instance must be owned by a DataSet instance.
context PhysicalDataSet inv:
self.namespace->size = 1 and self.namespace.oclIsKindOf(DataSet)

[C-18] A PhysicalDataSetOverride instance must be owned by a DataSet instance.
context PhysicalDataSetOverride inv:
self.namespace.oclIsKindOf(DataSet)

[C-19] A PhysicalSet instance must be owned by a Set instance.
context PhysicalSet inv:
self.namespace->size = 1 and self.namespace.oclIsKindOf(Set)

[C-20] PhysicalSetOverride instances must be owned by a Set instance.
context PhysicalSetOverride inv:
self.namespace.oclIsKindOf(Set)

[C-21] The features of a Remap must be RemapItem instances.
context Remap inv:
self.feature.oclIsKindOf(RemapItem)

[C-22] Remap instances may remap only DataSet and Set instances.
context Remap inv:
self.structure.oclIsKindOf(DataSet) or self.structure.oclIsKindOf(Set)

[C-23] The GIVING EXCEPTION clause is valid only if READONLY ALL was
specified.
context Remap inv:
self.isGivingException->notEmpty implies self.isReadOnlyAll

[C-24] The GIVING EXCEPTION clause is valid only if READONLY was
specified.
context RemapItem inv:
self.isGivingException->notEmpty implies self.isReadOnly

[C-25] The setType attribute must contain one of the allowed values for set
organization from DASDL.
context Set inv:
self.setType = \"BITVECTOR\" or self.setType = \"UNORDERED LIST\" or
self.setType = \"INDEX RANDOM\" or self.setType = \"INDEX SEQUENTIAL\" or
self.setType = \"ORDERED LIST\"

[C-26] The reorganize clause, if present, must be one of the allowed values from the
DASDL manual.
context Set inv:
self.reorganize <> \"\" implies self.reorganize = \"KEY CHANGED\" or
self.reorganize = \"KEY SAME\"

[C-27] The items in the Set?s key data must be owned by the DataSet that the Set
spans.
context Set inv:
self.keyDataItem->forAll(self.keyDataItem.namespace = self.spannedClass)

[C-28] A Set may not partition itself.
context Set inv:
self.partitionedSet <> self

[C-29] A Set may not be partitioned by itself.
context Set inv:
self.partitioningSet <> self

[C-30] A SetStructure must span one and only one DataSet instance.
context SetStructure inv:
self.spannedClass->size = 1 and self.spannedClass.oclIsKindOf(DataSet)

[C-31] Value of the duplicates attribute must be one of the allowed values from the
DASDL manual.
context SetStructure inv:
self.duplicates = \"DUPLICATES\" or self.duplicates = \"DUPLICATES FIRST\" or
self.duplicates = \"DUPLICATES LAST\" or self.duplicates = \"NO DUPLICATES\"
or self.duplicates = \"NO DUPLICATES KEY CHANGE OK\"")
    @namespace(uri="http:///orgomg/cwmx/resource/dmsii.ecore", prefix="orgomg.cwmx.resource.dmsii")
    package dmsii {
      @GenModel(documentation="For a given DASDL source, there can be at most one Database instance with isLogical = False (representing an independent, free standing database) and zero or more with isLogical = True (each representing a Logical Database declared within the physical database). A logical database can be owned by at most one database.")
      class Database extends cwm.objectmodel.core.StructuralFeature, cwm.objectmodel.core.Package {

        @GenModel(documentation="If True, this Database instance is a logical database.

")
        attr cwm.objectmodel.core.Boolean isLogical;

        @GenModel(documentation="Contains the name of the database guard file that contains access control information for the database.")
        attr cwm.objectmodel.core.String guardFile;

        @GenModel(documentation="Contains the text of the DASDL source from which the database was created.")
        attr cwm.objectmodel.core.String source;
      }

      @GenModel(documentation="Contains information identifying a Remap of a DMSII DataSet or Set. The features of a Remap instance must be RemapItem instances.")
      class Remap extends cwm.resource.record.RecordDef {

        @GenModel(documentation="If True, all items in the remap are required to be non-null.")
        attr cwm.objectmodel.core.Boolean isRequiredAll;

        @GenModel(documentation="If True, the READONLY ALL clause was specified.")
        attr cwm.objectmodel.core.Boolean isReadOnlyAll;

        @GenModel(documentation="The isGivingException boolean is meaningful only if isReadOnlyAll = True. If the isGivingException boolean is absent, no exception clause was specified. If it is present, False indicates that the NO EXCEPTION clause was specified whereas True indicates the GIVING EXCEPTION clause.")
        attr cwm.objectmodel.core.Boolean isGivingException;

        @GenModel(documentation="Contains the expression specified in a remap's SELECT clause.")
        !resolve val cwm.objectmodel.core.Expression selectCondition;

        @GenModel(documentation="Identifies the structure that is remapped by the Remap instance.")
        ref cwm.objectmodel.core.StructuralFeature[1]#remap structure;
      }

      @GenModel(documentation="A DataSet is the primary container of data records in a DMS II database. A DataSet instance that is owned by another DataSet instance is embedded in its owner.

If the isGlobal attribute is True, the DataSet instance is the global data set -- a special data set with a single instance that contains database global data items.")
      class DataSet extends cwm.resource.record.RecordDef {

        @GenModel(documentation="If isGlobal = True, the DataSet instance represents the database?s global data record. There can be at most one DataSet instance with isGlobal = True for a given database, but multiple with isGlobal = False.
")
        attr cwm.objectmodel.core.Boolean isGlobal;

        @GenModel(documentation="Identifies the structural organization of the DataSet.

")
        attr cwm.objectmodel.core.String organization;

        @GenModel(documentation="Contains the reorganization clause attached the DataSet instance.

")
        attr cwm.objectmodel.core.String reorganize;

        @GenModel(documentation="If True, the REQUIRED ALL clause was specified in the DASDL for this DataSet instance.")
        attr cwm.objectmodel.core.Boolean isRequiredAll;

        @GenModel(documentation="Identifies the partitioning set for this DataItem instance.")
        ref Set#partitionedDataSet partitioningSet;
      }

      @GenModel(documentation="Instances of DataItem represent the individual data fields within a DataSet. The Group class in the CWM Foundation?s DataTypes package is also available for constructing collections of fields in a DataSet.

The interpretation of the contents of some attributes of a DataItem instance are dependent upon the DataItem?s type. For example, the size attribute represents the maximum number of characters in ALPHA and KANJI items, the number of digits of
precision in a NUMERIC or REAL items, and the number of bits in a FIELD item. Refer to the definition of individual attributes for specifics.")
      class DataItem extends cwm.resource.record.Field {

        @GenModel(documentation="Identifies a value of a data item that is treated as representing a null value.")
        !resolve val cwm.foundation.expressions.ExpressionNode nullValue;

        @GenModel(documentation="If True, the data item must have a value when the corresponding Dataset record is stored.")
        attr cwm.objectmodel.core.Boolean isRequired;

        @GenModel(documentation="Contains the declared size of a data type. The precise meaning of the attribute depends on the type of the DMS II data type being declared.")
        attr cwm.objectmodel.core.Integer size;

        @GenModel(documentation="Contains the <scale factor> value for DMS II data types.")
        attr cwm.objectmodel.core.Integer scaleFactor;

        @GenModel(documentation="Contains the state of the signed indication (\"S\") for REAL and NUMERIC data types. Not relevant for other data types.")
        attr cwm.objectmodel.core.Boolean isSigned;

        @GenModel(documentation="Indicates the number of times the data item occurs in the DataSet record. The occurs attribute is optional, existing only for data items that have an OCCURS clause in their definition.")
        attr cwm.objectmodel.core.Integer occurs;

        @GenModel(documentation="If True, the DataItem instance is calculated when accessed using the expression stored in the virtualExpression attribute.")
        attr cwm.objectmodel.core.Boolean isVirtual;

        @GenModel(documentation="The expression used to calculate the value of a virtual DataItem.")
        !resolve val cwm.foundation.expressions.ExpressionNode virtualExpression;

        @GenModel(documentation="True if the USAGE=KANJI clause was used. Otherwise USAGE=EBCDIC is assumed. Relevant only for ALPHA data items.")
        attr cwm.objectmodel.core.Boolean isKanji;

        @GenModel(documentation="Identifies the CCSVersion specification of a data item.")
        attr cwm.objectmodel.core.String ccsVersion;

        @GenModel(documentation="If True, the DataItem instance was defined with the GEMCOS LITERAL clause.")
        attr cwm.objectmodel.core.Boolean isGemcosLiteral;

        @GenModel(documentation="If True, the DataItem instance was defined with the GEMCOS DATA clause.")
        attr cwm.objectmodel.core.Boolean isGemcosData;

        @GenModel(documentation="If True, the DataItem instance was defined with the GEMCOS SSN clause.")
        attr cwm.objectmodel.core.Boolean isGemcosSSN;

        @GenModel(documentation="If True, the DataItem instance was defined with the GEMCOS DBSN clause.")
        attr cwm.objectmodel.core.Boolean isGemcosDBSN;

        @GenModel(documentation="If True, the DataItem instance was defined with the COMS PROGRAM clause.")
        attr cwm.objectmodel.core.Boolean isComsProgram;

        @GenModel(documentation="If True, the DataItem instance was defined with the COMS ID clause.")
        attr cwm.objectmodel.core.Boolean isComsID;

        @GenModel(documentation="If True, the DataItem instance was defined with the COMS LOCATOR clause.")
        attr cwm.objectmodel.core.Boolean isComsLocator;

        @GenModel(documentation="If True, the DataItem instance was defined with the COMS OUTPQ clause.")
        attr cwm.objectmodel.core.Boolean isComsOutpQ;

        @GenModel(documentation="Identifies the occurring DataItem (i.e., the array).")
        ref DataItem[*]#occursDataItem occuringDataItem;

        @GenModel(documentation="Identifies the DataItem that contains the number of elements in the array.")
        ref DataItem#occuringDataItem occursDataItem;

        @GenModel(documentation="Identifies the Set instances in which this DataItem instance participates in the Set's key data.")
        ref Set[*]#keyDataItem keyDataSet;

        @GenModel(documentation="Identifies the FieldBits for a dataItem whose type is BIT.")
        val FieldBit[0..48]#dataItem fieldBit;

        @GenModel(documentation="Identifies the feature referenced by the data item.")
        ref cwm.objectmodel.core.StructuralFeature#dataItem structure;
      }

      @GenModel(documentation="Represents the VariableFormatParts that can be associated with a DataSet.")
      class VariableFormatPart extends cwm.resource.record.RecordDef {

        @GenModel(documentation="Contains the value of <integer label> identifying this variable format part. <integer label>s are the values of the DMS II data item in the fixed part of the owning DataSet instance with the type RECORD TYPE.")
        attr cwm.objectmodel.core.Integer vfLabel;

        @GenModel(documentation="A boolean expression determining which records appear in the Remap.")
        !resolve val cwm.objectmodel.core.BooleanExpression selectCondition;
      }

      @GenModel(documentation="SetStructure instances represent access paths in DMS II. SetStructures are connected to the DataSet instances that they span via the ElementOwnership association inherited from the Index class in the CWM Foundation?s KeysIndexes package.
")
      class SetStructure extends cwm.objectmodel.core.StructuralFeature {

        @GenModel(documentation="Indicates the duplicates clause associated with the SetStructure instance.
")
        attr cwm.objectmodel.core.String duplicates;
      }

      @GenModel(documentation="Represents a DMS II Set that spans some DataSet. Sets are represented by a physical file in a deployed DMSII database.")
      class Set extends SetStructure {

        @GenModel(documentation="Contains the set organization for this Set instance.")
        attr cwm.objectmodel.core.String setType;

        @GenModel(documentation="Contains the content of the reorganization clause, if any, that was specified for the Set instance.")
        attr cwm.objectmodel.core.String reorganize;

        @GenModel(documentation="Identifies the DataItem instances that participate in the Set instance?s key data.")
        ref DataItem[*]#keyDataSet keyDataItem;

        @GenModel(documentation="Identifies the partitioned set.")
        ref Set[*]#partitioningSet partitionedSet;

        @GenModel(documentation="Identifies the partitioning set.")
        ref Set#partitionedSet partitioningSet;

        @GenModel(documentation="Identifies the DataSet instances which the Set instance partitions.")
        ref DataSet#partitioningSet partitionedDataSet;
      }

      @GenModel(documentation="Represents a DMSII Access which is used to specify the physical ordering of records in the DataSet that the Access spans. Unlike a Set instance, there is no separate physical file associated with an Access in a deployed database.")
      class Access extends SetStructure {
      }

      @GenModel(documentation="Represents a subset of a DataSet instance. Because Subset instances have no membership expression, they are equivalent to DMS II's notion of a \"manual\" subset.")
      class Subset extends Set {
      }

      @GenModel(documentation="A Subset that has a membership expression. Records in the spanned DataSet instance are part of the AutomaticSubset instance if the expression in the condition attribute evaluates to True.")
      class AutomaticSubset extends Subset {

        @GenModel(documentation="Contains the text of an expression that determines membership of the spanned DataSet's records in this AutomaticSubset instance.")
        !resolve val cwm.objectmodel.core.BooleanExpression condition;
      }

      @GenModel(documentation="KeyItem instances correspond to DASDL's <key item> construct. Every Key instance has the inherited attribute isSorted = True and the inherited isAscending attribute set as indicated in the DASDL <key item>. By default, isAscending = True.")
      class KeyItem extends cwm.foundation.keysindexes.IndexedFeature {

        @GenModel(documentation="Identifies the value of the collation clause specified for a KeyItem instance.")
        attr cwm.objectmodel.core.String collation;
      }

      @GenModel(documentation="Maps a Remap instance?s field to its source, which may be some DataItem or an expression.

The name attribute of a RemapItem instance defaults to the name attribute of the associated DataItem instance. If changed in the Remap definition by a \"<identifier> =\" clause, the name attribute of the Remap instance is simply set to <identifier>.

The RemapItem instance?s initial value is stored in the initialValue attribute inherited from the CWM ObjectModel?s Attribute class.")
      class RemapItem extends cwm.resource.record.Field {

        @GenModel(documentation="If specified, overrides the occurs attribute of the associated DataItem instance.")
        attr cwm.objectmodel.core.Integer occurs;

        @GenModel(documentation="If True, overrides the isRequired attribute of the associated DataItem instance.")
        attr cwm.objectmodel.core.Boolean isRequired;

        @GenModel(documentation="If True, the corresponding DataItem is not visible to the user of the Remap.")
        attr cwm.objectmodel.core.Boolean isHidden;

        @GenModel(documentation="If True, the RemapItem is readonly.")
        attr cwm.objectmodel.core.Boolean isReadOnly;

        @GenModel(documentation="The isGivingException boolean is meaningful only if isReadOnly = True. If the isGivingException boolean is absent, no exception clause was specified. If it is present, False indicates that the NO EXCEPTION clause was specified whereas True indicates the GIVING EXCEPTION clause.")
        attr cwm.objectmodel.core.Boolean isGivingException;

        @GenModel(documentation="If True, the RemapItem instance is calculated when accessed using the expression stored in the virtualExpression attribute.")
        attr cwm.objectmodel.core.Boolean isVirtual;

        @GenModel(documentation="The expression used to calculate the value of a virtual RemapItem.")
        !resolve val cwm.foundation.expressions.ExpressionNode virtualExpression;
      }

      @GenModel(documentation="FieldBit instances name the individual bits in a DMS II field data item.")
      class FieldBit extends cwm.objectmodel.core.ModelElement {

        @GenModel(documentation="Identifies the FIELD data item for which a FieldBit is relevant.")
        transient ref DataItem[1]#fieldBit dataItem;
      }

      @GenModel(documentation="Contains the text of a % comment embedded anywhere within a DASDL source (except at places where the Comment class should be used). Making Remarks a subtype of StructuralFeature allows their location and order within a DASDL source to be preserved.")
      class Remark extends cwm.objectmodel.core.StructuralFeature {

        @GenModel(documentation="Contains the text of the Remark.")
        attr cwm.objectmodel.core.String text;
      }

      @GenModel(documentation="Instances represent deployed physical DMS II databases.

The INITIALIZE and MODEL statements are directives to the DASDL compiler and do not need to be modeled here. Rather, they cause specific actions to happen within a CWM repository. INITIALIZE causes the creation of the first PhysicalDatabase instance; MODEL causes the creation of additional PhysicalDatabase instances after the first.")
      class PhysicalDatabase extends cwm.objectmodel.core.Package {
      }

      @GenModel(documentation="Identifies a physical deployment of a DMS II DataSet.")
      class PhysicalDataSet extends cwm.objectmodel.core.ModelElement {
      }

      @GenModel(documentation="Contains the text of the single DASDL <comment> that nearly every object in a DASDL source may have. These comments differ from Remarks in that there is only one instance per DASDL object, their position in the source is constrained, and they
are stored in the database description files. Remarks are not tied to particular database objects, can occur anywhere in a DASDL source, and exist only in the DASDL source itself. 

For all DASDLComments, the language attribute contains the string \"DASDL\".")
      class DASDLComment extends cwm.foundation.businessinformation.Description {
      }

      @GenModel(documentation="Identifies a physical deployment of a DMS II Set.")
      class PhysicalSet extends cwm.objectmodel.core.ModelElement {
      }

      @GenModel(documentation="Collects together DASDLProperty instances associate with a physical data set specification in the DASDL source.")
      class PhysicalDataSetOverride extends cwm.objectmodel.core.Feature {
      }

      @GenModel(documentation="Collects together DASDLProperty instances associate with a physical set specification in the DASDL source.")
      class PhysicalSetOverride extends cwm.objectmodel.core.Feature {
      }

      @GenModel(documentation="Collects together DASDLProperty instances associate with a physical access specification in the DASDL source.")
      class PhysicalAccessOverride extends cwm.objectmodel.core.Feature {
      }

      @GenModel(documentation="The DASDL language source file from which DMS II databases are built contains a large number (>100) of options related primarily to the physical characteristics or deployment of DMS II databases and the data and set structures they contain.
Generally, these ?DASDL properties? are of the form <name> = <string>, where the meaning of the contents of <string> is specific to the property that is being described (i.e., knowing the content of <name>). Also, new DASDL properties are added from time to time. Capturing these DASDL properties as <name>/<string> pairs has several important side-effects, including 

    a much simplified DMS II model overall,
    addition of new properties without having to change the model, and
    maintenance of the order (because of the ordered nature of the association to 
        ModelElement) in which the property values were supplied in the DASDL source.

Note that allowing a DASDL remark (i.e., a %-comment) to be a DASDL property in this case allows preservation of the order remarks with respect to other DASDL properties.")
      class DASDLProperty extends cwm.objectmodel.core.ModelElement {

        @GenModel(documentation="Contains the text of the DASDL property. The precise content of the string is dependent upon the name of the DASDL property defined in the name attribute inherited from ModelElement.")
        attr cwm.objectmodel.core.String text;

        @GenModel(documentation="Identifies the owning ModelElement.")
        ref cwm.objectmodel.core.ModelElement[1]#dasdlProperty owner;
      }

    }

    @GenModel(documentation="This package contains a model for IMS database definitions that is an extension of the Record package. This package also uses classes found in the ObjectModel Core package.

The fundamental objects in IMS databases are DBD (Data Base Definition), PCB (Process Contol Block) and PSB (Program Specification Block).

PSBs are the connection between an IMS system and application programs. PSBs contain PCBs which come in three varieties:

    TP (Teleprocessing) PCBs describe a connection to a terminal
    GSAM PCBs connect a PSB to a input or output file.
    DB PCBs connect a PSB to the data defined by a DBD.

DBDs describe the organization of data and the pathways by which an application program can retrieve or store Records. A Record within a DBD is called a Segment. Segments are connected by parent-child relationships to create the information hierarchy.

A Segment can be fully described through the Fields contained within it. However, it is also valid for the Segments within a DBD to contain only a single key field. In this case, the detailed layout of information within Records is described by data structures used by the application program.

Most Data Warehouse applications are concerned only with Segments and Fields. This model contains classes to cover the rest of IMS to support potential tools that might export more of the IMS structure.

The IMS package depends on the following packages:

    org.omg::CWM::ObjectModel::Core
    org.omg::CWM::Resource::Record

OCL Representation of IMS Constraints

	(None)
")
    @namespace(uri="http:///orgomg/cwmx/resource/imsdatabase.ecore", prefix="orgomg.cwmx.resource.imsdatabase")
    package imsdatabase {
      @GenModel(documentation="An instance of this object class represents an IMS Data Base Description, which is the Root entity for a DBD object.

DBDs describe the organization of data and the pathways by which an application program can retrieve or store Records. A Record within a DBD is called a Segment. Segments are connected by parent-child relationships to create the information hierarchy.")
      class DBD extends cwm.resource.record.RecordFile {

        @GenModel(documentation="This attribute holds the access method of the DBD. PSINDEX, PHDAM, and PHIDAM are new valid values added for IMS V6.")
        attr imstypes.AccessMethodType dliAccess;

        @GenModel(documentation="This attribute indicates whether the operating system access method for the DBD is VSAM. It affects the string in the ACCESS keyword in the generated DBD when dliAccess=GSAM, HDAM,or HIDAM.")
        attr cwm.objectmodel.core.Boolean isVSAM;

        @GenModel(documentation="This attribute is a flag to indicate whether PASSWD=YES should be specified on the DBD macro.")
        attr cwm.objectmodel.core.Boolean passwordFlag;

        @GenModel(documentation="This is a 255-character string that is generated with the VERSION keyword to serve as a descriptive label on the DBD.")
        attr cwm.objectmodel.core.String versionString;

        @GenModel(documentation="Connection to additional attributes and relationships that apply to a specific access method.")
        val AccessMethod#dbd accessMethod;

        @GenModel(documentation="The ACBLIB(s) in which the DBD is used.")
        ref ACBLIB[*]#dbd acblib;

        @GenModel(documentation="The set of Dataset instances used by this DBD.")
        val Dataset[*]#dbd dataset;

        @GenModel(documentation="Segments that are part of this DBD.")
        val Segment[*]#dbd segment;

        @GenModel(documentation="The PCBs that are based on this DBD.")
        ref PCB[*]#dbd pcb;

        @GenModel(documentation="Data capture exit used by this DBD.")
        val Exit[*]#dbd exit;

        @GenModel(documentation="DBDLIB(s) in which DBD is stored.")
        ref DBDLib[*]#dbd library;
      }

      @GenModel(documentation="An instance of this object class represents the root entity of a PSB user object. Within IMS, a PSB (Program Specification Block) is a series of PCB macro instructions that describe an application program?s I/O operations and its view and use of segments and fields in IMS databases. The types of PCBs are TP PCB which describes interactions with logical terminals, GSAM PCB which is based on a GSAM DBD used as an input or output dataset, and DB PCB which can relate to segments and fields in its base DBD.")
      class PSB extends cwm.resource.record.RecordFile {

        @GenModel(documentation="The value in this attribute provides for compatibility between BMP or MSG and Batch-DL/I parameter lists. When TRUE, the PSB is always treated as if there were an I/O PCB, no matter how it is used. When FALSE, the PSB has an I/O PCB added only when run in a BMP or MSG region.")
        attr cwm.objectmodel.core.Boolean compatibility;

        @GenModel(documentation="The value in this attribute represents the condition code returned to the operating system when IMS/VS terminates normally and one or more input or output errors occurred on any data base during the application program execution.")
        attr cwm.objectmodel.core.Integer ioErrorOption;

        @GenModel(documentation="This attribute holds the size of the largest I/O area to be used by the application program. The size specification is used to determine the amount of main storage reserved in the PSB pool to hold the control region?s copy of the user?s I/O area data during scheduling of this application program. If this value is not specified, the ACB utility program calculates a maximum I/O area size to be used as a
default. The size calculated is the total length of all sensitive segments in the longest possible path call. The value specified is in bytes.")
        attr cwm.objectmodel.core.Integer ioaSize;

        @GenModel(documentation="This attribute holds the language label used on the PSBGEN statement.")
        attr imstypes.PSBLanguageType language;

        @GenModel(documentation="The value in this attribute indicates the maximum number of locks an application program can get at one time. The value is specified in units of 1000. For example, a lockMaximum value of 5 indicates a maximum of 5000 locks at one time. A value of 0 turns off the limit.")
        attr cwm.objectmodel.core.Integer lockMaximum;

        @GenModel(documentation="The value in this attribute represents the maximum number of data base calls with Qx command codes which may be issued between synchronization points. If this number is exceeded, the application program will abend.")
        attr cwm.objectmodel.core.Integer maximumQxCalls;

        @GenModel(documentation="This attribute specifies whether the user of this PSB is authorized to execute the Online Data Base Image Copy utility or the Surveyor utility feature run as a BMP against a data based named in this PSB. When TRUE, use of the Online Image Copy and the Surveyor utility feature is allowed; When FALSE, use of the Online Image copy and the Surveyor utility feature is prohibited.")
        attr cwm.objectmodel.core.Boolean onlineImageCopy;

        @GenModel(documentation="The value in this attribute represents the maximum total length of all SSAs to be used by the application program. The size specification is used to determine the amount of main storage reserved in the PSB pool to hold the control region?s copy of the user?s SSA string during scheduling of this application program. If not specified, the ACB utility program calculates the maximum SSA size to be used as a default. The size calculated is the maximum number of levels in any PCB within this PSB times 280. The value specified is in bytes.")
        attr cwm.objectmodel.core.Integer ssaSize;

        @GenModel(documentation="This attributes holds a subparameter of the IOEROPN parameter. It is tied to the \"write-to-operator-with-reply\" function in the Utility Control facility. When TRUE, a WTOR for the DFS0451A I/O error message is issued, and DL/I waits for the operator to respond before continuing.")
        attr cwm.objectmodel.core.Boolean writeToOperator;

        @GenModel(documentation="The ACBLIB(s) that use this PSB.")
        ref ACBLIB[*]#psb acblib;

        @GenModel(documentation="The PCBs used by this PSB.")
        ref PCB[*]#psb pcb;

        @GenModel(documentation="The PSBLIB(s) in which this PSB is stored.")
        ref PSBLib[*]#psb library;
      }

      @GenModel(documentation="A PCB is a series of macro instructions contained in a PSB. PCBs which come in three varieties:

    TP (Teleprocessing) PCBs describe a connection to a terminal
    GSAM PCBs connect a PSB to a input or output file.
    DB PCBs connect a PSB to the data defined by a DBD.")
      class PCB extends cwm.resource.record.RecordFile {

        @GenModel(documentation="The type of PCB - whether GSAM, DB or TP")
        attr imstypes.PCBType pcbType;

        @GenModel(documentation="This attribute specifies whether a named PCB is included in the PCB list passed to the application program at entry. TRUE includes the PCB in the PCB list, FALSE excludes it from the PCB list.")
        attr cwm.objectmodel.core.Boolean list;

        @GenModel(documentation="The value specified in bytes of the longest concatenated key for a hierarchic path of sensitive segments used by the application program in the logical data structure.")
        attr cwm.objectmodel.core.Integer keyLength;

        @GenModel(documentation="This attribute holds a string that represents the processing options on either the sensitive segments or the data set declared in this PCB and which can be used in an associated application program.")
        attr cwm.objectmodel.core.String processingOptions;

        @GenModel(documentation="This attribute specifies whether single or multiple positioning is desired for the logical data structure. Single or multiple positioning provides a functional variation in the call. Multiple positioning is not supported by HSAM.")
        attr imstypes.PositioningType positioning;

        @GenModel(documentation="The value in this attribute specifies if this PCB will be buffered using sequential buffering (SB). True means the SB should be activated conditionally (COND); False means that SB should not be used for this DB PCB (NO).")
        attr cwm.objectmodel.core.Boolean sequentialBuffering;

        @GenModel(documentation="This attribute specifies whether this PCB can be used instead of the I/O PCB for responding to terminal in response mode, conversational mode, or exclusive mode.")
        attr cwm.objectmodel.core.Boolean alternateResponse;

        @GenModel(documentation="This attribute specifies whether messages from this alternate PCB are to be sent (TRUE) or are to be backed out (FALSE) if the application program should terminate abnormally.")
        attr cwm.objectmodel.core.Boolean express;

        @GenModel(documentation="This attribute specifies whether the alternate PCB is modifiable. This feature allows for the dynamic modification of the destination name associated with this PCB.")
        attr cwm.objectmodel.core.Boolean modify;

        @GenModel(documentation="This attribute specifies whether IMS should verify that the logical terminal named in the response alternate PCB is assigned to the same physical terminal as the logical terminal that originated the input message.")
        attr cwm.objectmodel.core.Boolean sameTerminal;

        @GenModel(documentation="The attribute specifies whether the ltermName attribute signifies a logical terminal (LTERM) or a transaction code (NAME). This attribute maps to the LTERM or NAME keyword on the PCB macro statement.")
        attr imstypes.LTermType destinationType;

        @GenModel(documentation="This attribute specifies the name of the actual destination of the message and is either a logical terminal name or a transaction-code name. When the name is a transaction-code name, output messages to this PCB are queued for input to the program used to process the transaction-code named by the NAME attribute. The name must be specified in the user?s IMS/VS system definition as a logical terminal name or transaction code. This attribute maps to the LTERM/NAME keyword on the PCB macro statement.")
        attr cwm.objectmodel.core.String ltermName;

        @GenModel(documentation="The secondary index that this PCB uses as a processing sequence.")
        ref INDEX#sequencedPCB procSeq;

        @GenModel(documentation="The DBD on which this PCB is based.")
        ref DBD#pcb dbd;

        @GenModel(documentation="The PSB(s) that use this PCB.")
        ref PSB[*]#pcb psb;

        @GenModel(documentation="The sensitive segments included in this PCB.")
        val SenSegment[*]#pcb senSegment;
      }

      @GenModel(documentation="An instance of this object class represents a segment within a DBD user object. A segment is the IMS-view of a data structure that maps the fields in the segment.")
      class Segment extends cwm.resource.record.RecordDef {

        @GenModel(documentation="This attribute is a flag to indicate whether a segment will use the data capture exits specified on the DBD. A valid of FALSE maps to use of EXIT=NONE parameter on the SEGM macro. This flag has no meaning when exits points to any instances of PropagatedBy.")
        attr cwm.objectmodel.core.Boolean exitFlag;

        @GenModel(documentation="This attribute holds estimated number of times that this segment will occur for each occurrence of its physical parent.")
        attr cwm.objectmodel.core.String frequency;

        @GenModel(documentation="This attribute holds the length of a fixed-length segment, or the maximum length of a variable length segment.")
        attr cwm.objectmodel.core.Integer maximumLength;

        @GenModel(documentation="This attribute holds the minimum length of a variable length segment.")
        attr cwm.objectmodel.core.Integer minimumLength;

        @GenModel(documentation="This attributes holds the value that indicates where to place new occurrences of this segment type in the physical database.")
        attr imstypes.RulesType rules;

        @GenModel(documentation="This attribute holds the number of subset pointers in a direct dependent segment in a DEDB DBD. Valid values are 0-8.")
        attr cwm.objectmodel.core.String subsetPointers;

        @GenModel(documentation="This attribute indicates whether the segment is direct dependent or sequential. A value of TRUE specifies use of DIR as the segment type on the generated DBD. A value of FALSE specifies use of SEQ on the generated DBD. This attribute is ignored for the root segment of the DBD user object.")
        attr cwm.objectmodel.core.Boolean directDependent;

        @GenModel(documentation="This attribute describes the type of physical child pointer to be stored in the prefix area of the segment in the DBD. Valid Values are SNGL, DBLE, null")
        attr imstypes.ChildPointerType pcPointer;

        @GenModel(documentation="The logical segment that is based on this physical segment.")
        ref SegmentLogical[*]#physical logical;

        @GenModel(documentation="DBD that owns this segment.")
        transient ref DBD[1]#segment dbd;

        @GenModel(documentation="The sensitive segments that use this segment.")
        ref SenSegment[*]#segment senseg;

        @GenModel(documentation="The physical child segment.")
        ref Segment[*]#parent child;

        @GenModel(documentation="The physical parent segment.")
        ref Segment#child parent;

        @GenModel(documentation="Data capture exit used by this Segment.")
        val Exit[*]#segment exit;
      }

      @GenModel(documentation="This subclass of Segment supports the full-function features that are limited to HDAM, HIDAM and HISAM databases: specifically logical children and secondary indexes.")
      class SegmentComplex extends Segment {

        @GenModel(documentation="This attribute holds the value used for the delete rule.")
        attr imstypes.FlagsType deleteFlag = "76";

        @GenModel(documentation="This attribute holds the value used for the insert rule. bidirectional is not used for the insert flag.")
        attr imstypes.FlagsType insertFlag = "76";

        @GenModel(documentation="This attribute holds the value used for the replace rule. bidirectional is not used for the replace flag.")
        attr imstypes.FlagsType replaceFlag = "76";

        @GenModel(documentation="This attribute holds the string used for pointer keyword value.")
        attr imstypes.PointerType segmPointer;

        @GenModel(documentation="This is used to arrange the segments in a partitioned database in a manner comparable to arranging them within datasets in earlier versions of IMS")
        attr cwm.objectmodel.core.String dsGroup = "A";

        @GenModel(documentation="The secondary index relationships that would be represented as LCHILD/XDFLD statement sets.")
        val SecondaryIndex[0..32]#segment secondaryIndex;

        @GenModel(documentation="The relationship to the logical children relationships.")
        val LCHILD[*]#lparent lchild;

        @GenModel(documentation="The index that uses fields in this segment.")
        ref SecondaryIndex[*]#indexSource sourcedIndex;

        @GenModel(documentation="The relationship to the logical parent relationship instance.")
        ref LCHILD#lchild lparent;

        @GenModel(documentation="The pair relationship to a logical child of the physical parent segment")
        ref LCHILD#pairedSegment pairedLCHILD;

        @GenModel(documentation="Reference to a physical dataset in which this segments physical data is stored.")
        ref Dataset#segment dataset;
      }

      @GenModel(documentation="An instance of this object class represents a segment in a DBD user object that has access method of LOGICAL. Segments in a logical DBD use segments in other DBDs instead of defining physical data.")
      class SegmentLogical extends Segment {

        @GenModel(documentation="This attribute indicates how segment data will be handled when the logical DBD is processed.

A value of TRUE specifies use of \"DATA\" as the type in the first parameter of the SOURCE keyword in the generated DBD, which directs the segment key to be placed in the key feedback area and the segment data to be placed in the user?s I/O area.

A value of FALSE specified use of \"KEY\" as the type, which directs only the key to be placed in the key feedback area.")
        attr cwm.objectmodel.core.Boolean keyData1;

        @GenModel(documentation="This attribute indicates how segment data will be handled when the logical DBD is processed.

A value of TRUE specifies use of \"DATA\" as the type in the second parameter of the SOURCE keyword in the generated DBD, which directs the segment key to be placed in the key feedback area and the segment data to be placed in the user?s I/O area.

A value of FALSE specified use of \"KEY\" as the type, which directs only the key to be placed in the key feedback area. A value of NULL indicates that there is no second SOURCE parameter.")
        attr cwm.objectmodel.core.Boolean keyData2;

        @GenModel(documentation="The real segment that is the basis of the logical segment.")
        ref Segment[0..2]#logical physical;
      }

      @GenModel(documentation="This sub-type is used to add the attributes that apply to a Record Field only within the context of a specific DBD. One or more Fields within a Segment can be defined as a Sequence Field, which is the Key for the segment. A Sequence Field can be defined as Unique or Multiple. A Segment description does not have to include all of the Fields defined within the data structure.")
      class Field extends cwm.resource.record.FixedOffsetField {

        @GenModel(documentation="This attribute is a flag to indicate whether the dataItem instance should be generated as a sequence field or not.")
        attr cwm.objectmodel.core.Boolean sequenceField;

        @GenModel(documentation="This attribute is a flag to indicate whether the dataItem instance should be generated as a unique sequence field.")
        attr cwm.objectmodel.core.Boolean uniqueSequence;

        @GenModel(documentation="The attribute holds the length of the data item. This value should come from the data item itself.")
        attr cwm.objectmodel.core.Integer fieldLength;

        @GenModel(documentation="Indicates if the field has been generated by analyzing the \"copybook\" associated with the structure/segment, or if the field is coming directly from the IMS catalog")
        attr cwm.objectmodel.core.Boolean generated;

        @GenModel(documentation="The index that uses this field for a search field.")
        ref SecondaryIndex[*]#searchFields searchIndex;

        @GenModel(documentation="The index that uses this field as duplicate data.")
        ref SecondaryIndex[*]#ddataFields ddataIndex;

        @GenModel(documentation="The index that uses this field as a subsequence field.")
        ref SecondaryIndex[*]#subseqFields subseqIndex;

        @GenModel(documentation="The sensitive field that depends on this field.")
        ref SenField[*]#field senField;
      }

      @GenModel(documentation="Instances of this object type are used to hold attributes for the DATASET and AREA macro statements.

DATASET and AREA macro statements describe the physical storage of the DBD in MVS datasets that are connected to an application by use of DD Statements in the JCL.")
      class Dataset extends cwm.objectmodel.core.ModelElement {

        @GenModel(documentation="Name of the primary or input dataset")
        attr cwm.objectmodel.core.String dd1name;

        @GenModel(documentation="This attribute is the DEVICE specified on the DATASET statement.")
        attr imstypes.DeviceType device;

        @GenModel(documentation="This attribute holds the model part of the DEVICE attribute on the DATASET statement. The value is not relevant for most device types.")
        attr imstypes.ModelType model;

        @GenModel(documentation="Name of overflow or output dataset.")
        attr cwm.objectmodel.core.String dd2name;

        @GenModel(documentation="Size of area or primary or input dataset. For DEDB databases, valid values are: 512, 1024, 2048, 4096, 8192, 12288, 16384, 20480, 24576, 28672, and the Default value is 4096")
        attr cwm.objectmodel.core.Integer size1;

        @GenModel(documentation="Size of overflow or output dataset")
        attr cwm.objectmodel.core.Integer size2;

        @GenModel(documentation="Record length in primary or input dataset.")
        attr cwm.objectmodel.core.Integer recordLength1;

        @GenModel(documentation="Record length in primary or input dataset.")
        attr cwm.objectmodel.core.Integer recordLength2;

        @GenModel(documentation="Blocking factor in primary or input dataset")
        attr cwm.objectmodel.core.Integer blockingFactor1;

        @GenModel(documentation="Blocking factor in overflow or output dataset.")
        attr cwm.objectmodel.core.Integer blockingFactor2;

        @GenModel(documentation="This attribute holds a label used for reverse referencing of datasets in a HDAM or HIDAM database.")
        attr cwm.objectmodel.core.String datasetLabel;

        @GenModel(documentation="This attribute describes the frequency of free blocks in the initial dataset layout. Valid Values are 0, 2-100, null")
        attr cwm.objectmodel.core.Integer freeBlockFrequency;

        @GenModel(documentation="This attribute describes the percentage of free space in the initial dataset layout. Valid Values are 0-99, null")
        attr cwm.objectmodel.core.Integer freeSpacePercentage;

        @GenModel(documentation="This attribute describes the record format for a GSAM database. Valid Values are F, FB, V, VB, U, null")
        attr imstypes.RECFMType recordFormat;

        @GenModel(documentation="This attribute describes the number of cylinders to be scanned to find space for new data. Valid values are 0-255")
        attr cwm.objectmodel.core.Integer scanCylinders;

        @GenModel(documentation="This attribute specifies where should IMS look for space in which to put new data. Valid Values are 0, 1, 2, null")
        attr imstypes.AlgorithmType searchAlgorithm;

        @GenModel(documentation="This attribute holds total space allocated to the root addressable part of the AREA in terms of UOWs. A value of 0 represents a null value. Valid Values are 0 or 2-32767")
        attr cwm.objectmodel.core.Integer root;

        @GenModel(documentation="This attribute holds the amount of space reserved for independent overflow in terms of units of work. A value of 0 represents a null value. Valid values are 0 or 1-32767.

Constraints:

    root and rootOverflow must be specified together.
    The value in rootOverflow must be less than the value in root.")
        attr cwm.objectmodel.core.Integer rootOverflow;

        @GenModel(documentation="This attribute holds the number of control intervals in a unit of work. A value of 0 represents a null value. Valid values: 0 or 2-32767")
        attr cwm.objectmodel.core.Integer uow;

        @GenModel(documentation="This attribute holds the number of control intervals in overflow section of a unit of work. A value of 0 represents a null value.")
        attr cwm.objectmodel.core.Integer uowOverflow;

        @GenModel(documentation="The DBD instance that owns this Dataset instance.")
        transient ref DBD[1]#dataset dbd;

        @GenModel(documentation="Segment whose physical data is stored in the physical dataset represented by the DATASET statement.")
        ref SegmentComplex[*]#dataset segment;
      }

      @GenModel(documentation="The type holds the attributes that apply to a PCB?s use of a specific segment within a DBD. Application programs using a PCB can only access the segments to which that PCB is sensitive, protecting an hiding some of the data covered by the DBD.")
      class SenSegment extends cwm.resource.record.RecordDef {

        @GenModel(documentation="This attribute holds the processing options allowable for use of this sensitive segment by an associated application program. It has the same meaning as the same attribute in the PCB, plus other options may be specified here which are not allowed on the PCB. This PROCOPT overrides the PCB PROCOPT.")
        attr cwm.objectmodel.core.String procoptSENSEG;

        @GenModel(documentation="This attribute specifies sensitivity to the array of subset pointers, each of which may be R (read sensitive), U (update sensitive), or N (not sensitive).")
        attr cwm.objectmodel.core.String subsetPointers;

        @GenModel(documentation="The PCB that includes this sensitive segment.")
        transient ref PCB[1]#senSegment pcb;

        @GenModel(documentation="The field to which the segment is sensitive.")
        val SenField[*]#senSegment senField;

        @GenModel(documentation="One segment to which the PCB is sensitive.")
        ref Segment[1]#senseg segment;
      }

      @GenModel(documentation="This relationship associates a SensitiveSegment instance to the Field instances that represent the fields in the segment to which the PCB must be sensitive.

Field level sensitivity provides an increased level of data independence by isolating application programs from changes in the arrangement of fields within a segment and addition or deletion of data within a segment. Additionally, it enhances data security by limiting an application program to a subset of fields within a segment and controlling replace operations at the field level.
")
      class SenField extends cwm.resource.record.FixedOffsetField {

        @GenModel(documentation="The value of this attribute specifies whether this field may be altered on a replace call.")
        attr cwm.objectmodel.core.Boolean replace;

        @GenModel(documentation="The segment that is sensitive to this field.")
        transient ref SenSegment[1]#senField senSegment;

        @GenModel(documentation="The field to which the PCB is sensitive.")
        ref Field[1]#senField field;
      }

      @GenModel(documentation="This class represents the collection of components needed for an IMS ACB (Application Control Block).

An IMS application will use one or more PSBs. For an application to be compiled successfully, all of the PSBs and all of the DBDs referenced by those PSBs must be collected into an ACBLIB.")
      class ACBLIB extends cwm.objectmodel.core.Package {

        @GenModel(documentation="The PSBs used in this ACBLIB.")
        ref PSB[*]#acblib psb;

        @GenModel(documentation="The DBDs used in the ACBLIB.")
        ref DBD[*]#acblib dbd;
      }

      @GenModel(documentation="An instance of a subtype of this virtual class holds access-method-specific attributes of a DBD user object. DBDs with access methods MSDB, INDEX, HIDAM, DEDB or HDAM will use instances of the subclasses of this object class.")
      class AccessMethod extends cwm.objectmodel.core.ModelElement {

        @GenModel(documentation="DBD extended by this access method instance.")
        transient ref DBD[1]#accessMethod dbd;
      }

      @GenModel(documentation="An instance of the DBDindex object class represents a DBD user object that can be used to index a HIDAM database or a segment in a HDAM, HIDAM or HISAM database. The indexing relationship maps to the LCHILD statement in the macro language description of an index DBD. An INDEX DBD can also be treated as a normal single-segment DBD.")
      class INDEX extends AccessMethod {

        @GenModel(documentation="This attribute indicates whether the index DBD was created with DLI/DOS with a segment code as part of the prefix.")
        attr cwm.objectmodel.core.Boolean dosCompatibility;

        @GenModel(documentation="This attribute is a flag for data integrity in index pointer segments.")
        attr cwm.objectmodel.core.Boolean protect;

        @GenModel(documentation="The HIDAM DBD for which this Index is the primary index.")
        ref HIDAM#index primaryTarget;

        @GenModel(documentation="The secondary index relationship to a complex segment.")
        ref SecondaryIndex#index secondaryTarget;

        @GenModel(documentation="The second and later Index DBDs that share a dataset.")
        ref INDEX[0..16]#sharedIndex sharingIndex;

        @GenModel(documentation="The first DBD that defines the Dataset shared by the rest of the index DBDs.")
        ref INDEX#sharingIndex sharedIndex;

        @GenModel(documentation="The PCB(s) that use this secondary index for processing sequence.")
        ref PCB[*]#procSeq sequencedPCB;
      }

      @GenModel(documentation="An instance of this object class represents a DBD user object with an access method of HIDAM. A HIDAM DBD must have a primary index relationship to be valid. The relationship maps to an LCHILD statement under the root segment that has POINTER=INDX and no associated XDFLD statement. A HIDAM DBD is a full function DBD with indexing and logical relationships.")
      class HIDAM extends AccessMethod {

        @GenModel(documentation="The primary index for this HIDAM DBD")
        ref INDEX#primaryTarget index;
      }

      @GenModel(documentation="An instance of this object class represents a DBD user object that has access=DEDB. A DEDB DBD is a Fast Path DBD designed for very fast transactions. It must have a randomizing module name to be valid. STAGE and XCI (Extended Call Interface) were new parameters added with IMS 5.")
      class DEDB extends AccessMethod {

        @GenModel(documentation="This attribute is the name of the executable module used to randomize the database.")
        attr cwm.objectmodel.core.String rmName;

        @GenModel(documentation="This attribute specifies whether or not the randomizer is a 1 or 2 stage process (default is 1).")
        attr cwm.objectmodel.core.Integer stage;

        @GenModel(documentation="This attribute specifies whether or not the ramdomizer should use the extended call interface.")
        attr cwm.objectmodel.core.Boolean extendedCall;
      }

      @GenModel(documentation="An instance of this object class represents a DBD user object that has access=HDAM. These attributes are part of the randomizing module information that a valid HDAM DBD must have. HDAM is a full-function DBD with indexing and logical relationships.")
      class HDAM extends AccessMethod {

        @GenModel(documentation="This attribute is the name of the executable module used to randomize the database.")
        attr cwm.objectmodel.core.String rmName;

        @GenModel(documentation="The maximum relative block number that the user wishes to allow a randomizing module to produce for a database. This attributes determines the number of control intervals or blocks in the root-addressable area of a HDAM database. Valid Values: 0 or 1-16777215")
        attr cwm.objectmodel.core.Integer relativeBlockNumber;

        @GenModel(documentation="The number of root anchor points desired in each control interval of block in the root addressable area. Valid Values: 0 or 1-255")
        attr cwm.objectmodel.core.Integer rootAnchorPoints;

        @GenModel(documentation="The maximum number of bytes of database record that can be stored in the root-addressable
area in a series of inserts unbroken by a call to another database record.")
        attr cwm.objectmodel.core.Integer rootMaxBytes;
      }

      @GenModel(documentation="A DBD with access=MSDB (Mass Storage Data Base) has msdbField and msdbType information instead of physical datasaet information.")
      class MSDB extends AccessMethod {

        @GenModel(documentation="This attribute holds a search field name for a Mass Storage Data Base.

Update Constraints

    A string is required in msdbField when msdbType=FIXED, TERM,or DYNAMIC for the DBD user object to be valid.
    The string in msdbField must not be the same as the name on any FIELD statement in this DBD.
msdbField must be null when msdbType=NO.")
        attr cwm.objectmodel.core.String msdbField;

        @GenModel(documentation="This attribute specifies the type of Mass Storage Data Base. It may be NO (nonterminal-related without terminal-related keys which has key and sequence field as part of the segment), FIXED (terminal-related fixed), TERM (nonterminal-related with terminal-related keys), DYNAMIC (terminal-related dynamic) or null")
        attr imstypes.MSDBtype msdbType;
      }

      @GenModel(documentation="This type holds the attributes on the relationships between a SegmentComplex instance and the INDEX instances that act as secondary indexes for the DBD (maps to combination of LCHILD and XDFLD statements).")
      class SecondaryIndex extends cwm.objectmodel.core.ModelElement {

        @GenModel(documentation="This attribute holds a character string that defines a one-byte self-defining term with which every index pointer segment in a particular secondary index is identified. It is used to identify index pointer segments for a specific secondary index when multiple secondary indexes reside in the same database.")
        attr cwm.objectmodel.core.String constant;

        @GenModel(documentation="This attribute is the name of the executable module that suppresses creation of index pointer segments.")
        attr cwm.objectmodel.core.String exitRoutine;

        @GenModel(documentation="This attribute holds a character string that is a one-byte self-defining term. The creation of index pointer segments is suppressed when the specified value is contained in the search field of an index pointer segment.")
        attr cwm.objectmodel.core.String nullValue;

        @GenModel(documentation="The index used in the secondary index relationship.")
        ref INDEX[1]#secondaryTarget index;

        @GenModel(documentation="The segment that is being indexed.")
        transient ref SegmentComplex[1]#secondaryIndex segment;

        @GenModel(documentation="The fields used for search fields by the secondary index.")
        ref Field[0..5]#searchIndex searchFields;

        @GenModel(documentation="Fields used for duplicate data in the index relationship.")
        ref Field[0..5]#ddataIndex ddataFields;

        @GenModel(documentation="The fields used as subsequence fields by the secondary index.")
        ref Field[0..5]#subseqIndex subseqFields;

        @GenModel(documentation="The segment that contains the Search, Subsequence and Duplicate data fields for the index relationship.")
        ref SegmentComplex#sourcedIndex indexSource;
      }

      @GenModel(documentation="This class represents a Data Capture exit routine, which is specified to enable DB2 applications and end users to access updated IMS data. Data Capture exits can apply to an entire DBD or to a specific segment.")
      class Exit extends cwm.objectmodel.core.ModelElement {

        @GenModel(documentation="Specifies whether the exit routine is passed the physical concatenated key. This key identifies the physical segment updated by the application. A value of TRUE makes to KEY, a value of FALSE maps to NOKEY.")
        attr cwm.objectmodel.core.Boolean key;

        @GenModel(documentation="This attribute specifies whether the physical segment data is passed to the exit routine for updating. When DATA is specified and a Segment Edit/Compression exit routine is also used, the data passed is expanded data. A value of TRUE maps to DATA, a value of FALSE maps to NODATA.")
        attr cwm.objectmodel.core.Boolean data;

        @GenModel(documentation="This attribute specifies whether the data from each segment in the physical root?s hierarchical path must be passed to the exit routine for an updated segment. A value of TRUE maps to PATH; a value of FALSE maps to NOPATH.")
        attr cwm.objectmodel.core.Boolean path;

        @GenModel(documentation="This attribute specifies whether the data capture control blocks and data should be written to the IMS system log. A value of TRUE maps to LOG; a value of FALSE maps to NOLOG.")
        attr cwm.objectmodel.core.Boolean log;

        @GenModel(documentation="This attribute specifies whether the exit routine is called when DL/I deletes this segment because the application deleted a parent segment. Using CASCADE ensures that data is captured for the defined segment. A value of TRUE maps to CASCADE; a value of FALSE maps to NOCASCADE.")
        attr cwm.objectmodel.core.Boolean cascade;

        @GenModel(documentation="This attribute specifies whether to pass the physical concatenated key to the exit. This key identifies the segment being deleted by a cascade delete. A value of TRUE maps to PATH; a value of FALSE maps to NOPATH.")
        attr cwm.objectmodel.core.Boolean cascadeKey;

        @GenModel(documentation="The attribute specifies whether to pass segment data to the exit routine for a cascade delete. DATA also identifies the segment being deleted when the physical concatenated key is unable to do so.")
        attr cwm.objectmodel.core.Boolean cascadeData;

        @GenModel(documentation="This attribute specifies whether to allow an application to separately access several segments for a cascade delete. A value of TRUE maps to PATH; a value of FALSE maps to NOPATH.")
        attr cwm.objectmodel.core.Boolean cascadePath;

        @GenModel(documentation="DBD that uses and owns this data capture exit.")
        transient ref DBD#exit dbd;

        @GenModel(documentation="Segment that uses this data capture exit.")
        transient ref Segment#exit segment;
      }

      @GenModel(documentation="This type holds the attributes that apply to the relationship used to connect a SegmentComplex instance to the SegmentComplex instances for which it is the logical parent (maps to LCHILD statement and to the PARENT keyword on the SEGM statement).")
      class LCHILD extends cwm.objectmodel.core.ModelElement {

        @GenModel(documentation="This attribute holds a flag for whether COUNTER keyword is to be used in the POINTER= parameter on the child segment.")
        attr cwm.objectmodel.core.Boolean counter;

        @GenModel(documentation="This attribute holds a value used in the POINTER keyword on the LCHILD macro to specify amount of pointer fields to be reserved in the logical parent segment.")
        attr imstypes.ChildPointerType lcPointer;

        @GenModel(documentation="This attribute holds a flag for whether LPARNT keyword is to be used in the POINTER= parameter on the child segment.")
        attr cwm.objectmodel.core.Boolean lparentFlag;

        @GenModel(documentation="This attribute holds a value to be used in the POINTER= parameter on the child segment in order to specify logical twin pointers.
")
        attr imstypes.LPointerType ltwin;

        @GenModel(documentation="This attribute holds a value used in the RULES keyword on the LCHILD macro to control the logical twin sequence.")
        attr imstypes.RulesType rules;

        @GenModel(documentation="This attribute holds a value used in the PARENT parameter on the logical child segment to specify whether the concatenated key of the logical parent segment is stored with each logical child segment.")
        attr imstypes.ParentType virtualParent;

        @GenModel(documentation="The segment that represents the parent in a logical parent relationship.")
        transient ref SegmentComplex[1]#lchild lparent;

        @GenModel(documentation="The child segment in the logical parent relationship.")
        ref SegmentComplex[1]#lparent lchild;

        @GenModel(documentation="The pair relationship to a physical child of the logical parent segment.")
        ref SegmentComplex#pairedLCHILD pairedSegment;
      }

      @GenModel(documentation="A collection of PSBs - comparable to a COPYlib for data structures.")
      class PSBLib extends cwm.objectmodel.core.Package {

        @GenModel(documentation="The PSBs stored in this PSBLIB.")
        ref PSB[*]#library psb;
      }

      @GenModel(documentation="A DBDLib is a collection of DBDs, comparable to a COPYlib for data structures.")
      class DBDLib extends cwm.objectmodel.core.Package {

        @GenModel(documentation="DBDs stored in the DBDLIB.")
        ref DBD[*]#library dbd;
      }

      @GenModel(documentation="This package contains enumeration types for IMS classes. ")
      @namespace(uri="http:///orgomg/cwmx/resource/imsdatabase/imstypes.ecore", prefix="orgomg.cwmx.resource.imsdatabase.imstypes")
      package imstypes {
        @GenModel(documentation="Access method types")
        enum AccessMethodType {

          @GenModel(documentation="Data Entry Data Base ")
          imsam_DEDB = 0;

          @GenModel(documentation="Generalized Sequential Access Method")
          imsam_GSAM = 1;

          @GenModel(documentation="Hierarchical Direct Access Method")
          imsam_HDAM = 2;

          @GenModel(documentation="Hierarchical Indexed Direct Access Method ")
          imsam_HIDAM = 3;

          @GenModel(documentation="Hierarchical Indexed Sequential Access Method ")
          imsam_HISAM = 4;

          @GenModel(documentation="Hierarchical Sequential Access Method")
          imsam_HSAM = 5;

          @GenModel(documentation="index database ")
          imsam_INDEX = 6;

          @GenModel(documentation="Logical database")
          imsam_LOGICAL = 7;

          @GenModel(documentation="Mass Storage Data Base ")
          imsam_MSDB = 8;

          @GenModel(documentation="Partitioned Index ")
          imsam_PSINDEX = 9;

          @GenModel(documentation="Partitioned HDAM")
          imsam_PHDAM = 10;

          @GenModel(documentation="Partitioned HIDAM")
          imsam_PHIDAM = 11;

          @GenModel(documentation="Simple (single segment) HSAM")
          imsam_SHSAM = 12;

          @GenModel(documentation="Simple (single segment)  HISAM")
          imsam_SHISAM = 13;
        }

        @GenModel(documentation="PSB language types")
        enum PSBLanguageType {

          @GenModel(documentation="Assembler programming language")
          imslt_ASSEM = 0;

          @GenModel(documentation="C programming language")
          imslt_C = 1;

          @GenModel(documentation="COBOL  programming language")
          imslt_COBOL = 2;

          @GenModel(documentation="PL/I programming language")
          imslt_PLI = 3;

          @GenModel(documentation="Pascal programming language")
          imslt_PASCAL = 4;
        }

        @GenModel(documentation="PCB types")
        enum PCBType {

          @GenModel(documentation="database type")
          imspt_DB = 0;

          @GenModel(documentation="GSAM type - connects to a GSAM DBD as a link to a file. ")
          imspt_GSAM = 1;

          @GenModel(documentation="Teleprocessing type ")
          imspt_TP = 2;
        }

        @GenModel(documentation="Positioning types")
        enum PositioningType {

          @GenModel(documentation="Single positioning is desired for the logical data structure")
          imsps_Single = 0;

          @GenModel(documentation="Multiple positioning is desired for the logical data structure")
          imsps_Multiple = 1;
        }

        @GenModel(documentation="LTerm types")
        enum LTermType {

          @GenModel(documentation="The PCB ltermName attribute signifies a logical terminal.
LTERM=ltermName is used in the DL/I macro statement")
          imstp_LTERM = 0;

          @GenModel(documentation="The PCB ltermName attribute signifies a transaction code.
NAME=ltermName is used in the DL/I macro statement")
          imstp_NAME = 1;
        }

        @GenModel(documentation="Rules types")
        enum RulesType {

          @GenModel(documentation="For segments without a sequence field defined, a new occurrence is inserted before all existing physical twins. For segments with a nonunique sequence field defined, a new occurrence is inserted before all existing physical twins with the same sequence field value. ")
          imsrt_FIRST = 0;

          @GenModel(documentation="For segments without a sequence field defined, a new occurrence is inserted after all existing physical twins. For segments with a nonunique sequence field defined, a new occurrence is inserted after all existing physical twins with the same sequence field value. ")
          imsrt_LAST = 1;

          @GenModel(documentation="For segments without a sequence field, a new occurrence is inserted immediately before the physical twin on which position was established. If a position was not established on a physical twin of the segment being inserted, the new occurrence is inserted before all existing physical twins. For segments with a nonunique sequence field defined, a new occurrence is inserted immediately before the physical twin with the same sequence field value on which position was established. If a position was not established on a physical twin with the same sequence field value, the new occurrence is inserted before all physical twins with the same sequence field value. The insert position is dependent on the position established by the previous DL/I call. ")
          imsrt_HERE = 2;
        }

        @GenModel(documentation="Child pointer types")
        enum ChildPointerType {

          @GenModel(documentation="Use single pointers in the prefix area (SNGL parameter). ")
          imscp_SNGL = 0;

          @GenModel(documentation="Use double pointers in the prefix area (DBLE parameter). ")
          imscp_DBLE = 1;

          @GenModel(documentation="Use no pointers in the prefix area. ")
          imscp_NONE = 2;
        }

        @GenModel(documentation="Flag types")
        enum FlagsType {

          @GenModel(documentation="Specifies the path type that must be used to insert, delete, or replace a segment is physical.")
          imsft_P = 0;

          @GenModel(documentation="Specifies the path type that must be used to insert, delete, or replace a segment is logical.")
          imsft_L = 1;

          @GenModel(documentation="Specifies the path type that must be used to insert, delete, or replace a segment is virtual.")
          imsft_V = 2;

          @GenModel(documentation="Specifies the path type that must be used to insert, delete, or replace a segment is bidirectional virtual.")
          imdft_B = 3;
        }

        @GenModel(documentation="Pointer types")
        enum PointerType {

          @GenModel(documentation="Is used to prevent reserving space for a physical twin forward pointer in the prefix of occurrences of the segment type being defined.")
          imspn_NOTWIN = 0;

          @GenModel(documentation="Reserves a 4-byte physical twin forward pointer field in the segment prefix being defined. ")
          imspn_TWIN = 1;

          @GenModel(documentation="Reserves a 4-byte hierarchic forward pointer field in the prefix of occurrences of the segment type being defined. ")
          imspn_HIER = 2;

          @GenModel(documentation="Reserves a 4-byte physical twin forward pointer field and a 4-byte physical twin backward pointer field in the segment prefix being defined.  The twin backward pointers provide increased delete performance. ")
          imspn_TWINBWD = 3;

          @GenModel(documentation="Reserves a 4-byte hierarchic forward pointer field and a 4-byte hierarchic backward pointer field in the prefix of occurrences of the segment type being defined. Hierarchic backward pointers provide increased delete performance. ")
          imspn_HIERBWD = 4;
        }

        @GenModel(documentation="Device types")
        enum DeviceType {
          imsdt_2305 = 0;
          imsdt_2319 = 1;
          imsdt_3330 = 2;
          imsdt_3350 = 3;
          imsdt_3375 = 4;
          imsdt_3380 = 5;
          imsdt_3390 = 6;
          imsdt_2400 = 7;
          imsdt_3400 = 8;
          imsdt_TAPE = 9;
        }

        @GenModel(documentation="Model types")
        enum ModelType {
          imsdt_1 = 0;
          imsdt_2 = 1;
          imsdt_11 = 2;
        }

        @GenModel(documentation="Record format types")
        enum RECFMType {

          @GenModel(documentation="Records are Fixed-length")
          imsrf_F = 0;

          @GenModel(documentation="Records are Fixed length and Blocked.")
          imsrf_FB = 1;

          @GenModel(documentation="Records are Variable length")
          imsrf_V = 2;

          @GenModel(documentation="Records are Variable length and Blocked")
          imsrf_VB = 3;

          @GenModel(documentation="Record format is Undefined")
          imsrf_U = 4;
        }

        @GenModel(documentation="LPointer types")
        enum AlgorithmType {

          @GenModel(documentation="Specifies that IMS chooses which HD space search algorithm to use.  Maps to a value of SEARCHA=0.")
          imsat_0 = 0;

          @GenModel(documentation="Specifies that IMS uses the HD space search algorithm that does not search for space in the second-most desirable block or CI. Maps to SEARCHA=1
")
          imsat_1 = 1;

          @GenModel(documentation="Specifies that IMS uses the HD space search algorithm that includes a search for space in the second-most desirable block or CI. Maps to SEARCHA=2")
          imsat_2 = 2;
        }

        enum LPointerType {

          @GenModel(documentation="Reserves a 4-byte logical twin forward pointer field in the prefix of occurrences of the logical child segment type being defined.")
          imslp_LTWIN = 0;

          @GenModel(documentation="Reserves a 4-byte logical twin forward pointer field and
a 4-byte logical twin backward field in the prefix of occurrences of the logical child segment type being defined.")
          imslp_LTWINBWD = 1;
        }

        @GenModel(documentation="Parent types")
        enum MSDBtype {

          @GenModel(documentation="nonterminal-related without terminal-related keys which has key and sequence field as part of the segment")
          imsmt_NO = 0;

          @GenModel(documentation="nonterminal-related with terminal-related keys")
          imsmt_TERM = 1;

          @GenModel(documentation="terminal-related fixed")
          imsmt_FIXED = 2;

          @GenModel(documentation="terminal-related dynamic")
          imsmt_DYNAMIC = 3;
        }

        enum ParentType {

          @GenModel(documentation="the concatenated key of the logical parent segment is not stored with each logical child segment")
          ims_VIRTUAL = 0;

          @GenModel(documentation="the concatenated key of the logical parent segment is physically stored with each logical child segment")
          ims_PHYSICAL = 1;
        }

      }

    }

    @GenModel(documentation="The Hyperion Essbase package represents the physical data model for a Hyperion Essbase Database. This package extends the Multidimensional package and provides a specific metadata representation for Hyperion?s Essbase multidimensional database.

The classes in this package can be used as either sources or targets of data in the data warehouse, and are available to provide a physical implementation of the OLAP data model.

The Essbase package depends on the following packages:

    org.omg::CWM::ObjectModel::Core
    org.omg::CWM::Foundation::Expressions
    org.omg::CWM::Foundation::SoftwareDeployment
    org.omg::CWM::Resource::Multidimensional
    org.omg::CWM::Analysis::OLAP

Note that the Essbase metamodel is primarily dependent on classes of the Multidimensional model.

OCL Representation of Essbase Constraints

[C-1] Restrict the cardinality of the namespace role to 1 so that a Database must always be owned by an Application.
context Database inv:
self.namespace->notEmpty and self.namespace.oclIsKindOf( Application )

[C-2] Essbase Dimensions are not composed from other Essbase dimensions.
context Dimension
inv: self.component->isEmpty
inv: self.composite->isEmpty

[C-3] The inclusion of certain DimensionedObjects is valid only for certain DimensionTypes.
context Dimension
inv: self.dimensionedObject->includes( TimeBalance ) implies self.type = #ess_accounts
inv: self.dimensionedObject->includes( VarianceReporting ) implies self.type = #ess_accounts
inv: self.dimensionedObject->includes( CurrencyConversion ) implies self.type = #ess_currencyPartition
inv: self.dimensionedObject->includes( UDA ) implies self.type = #ess_attribute

[C-4] The Outline name must be the same as the Database name.
context Outline inv:
self.name = self.database.name

[C-5] Restrict the cardinality of the namespace role to 1 so that a Partition must
always be owned by a Database.
context Partition inv:
self.namespace->notEmpty and self.namespace.oclIsKindOf( Database )

[C-6] Only a source Partition can be shared.
context Partition inv:
self.isShared implies self.isSource")
    @namespace(uri="http:///orgomg/cwmx/resource/essbase.ecore", prefix="orgomg.cwmx.resource.essbase")
    package essbase {
      @GenModel(documentation="An alias name for an Essbase Dimension member.")
      class Alias extends cwm.resource.multidimensional.DimensionedObject {
      }

      @GenModel(documentation="An Essbase Application is a named container of one or more Databases and their related files. In addition to the Database, an Application may include scripts that are used to load data into the database, calculate derived values, and prepare reports.
")
      class Application extends cwm.objectmodel.core.Package {
      }

      @GenModel(documentation="This is a user-defined comment that can be attached to an Essbase Dimension member.")
      class Comment extends cwm.resource.multidimensional.DimensionedObject {
      }

      @GenModel(documentation="Specifies how this Essbase Dimension member is to roll-up into its parent (e.g., attribute instance values include: +, -, *, /, %, ~).")
      class Consolidation extends cwm.resource.multidimensional.DimensionedObject {
      }

      @GenModel(documentation="Currency conversion tag for an Essbase Currency Dimension member (e.g., attribute instance values include: \"None\", \"NoConversion\", \"Category\").")
      class CurrencyConversion extends cwm.resource.multidimensional.DimensionedObject {
      }

      @GenModel(documentation="Data storage tag for an Essbase Dimension member (e.g., attribute instance values include: \"StoreData\", \"DynamicCalc&Store\", \"DynamicCalc\", \"NeverShare\", \"LabelOnly\", \"SharedMember\").")
      class DataStorage extends cwm.resource.multidimensional.DimensionedObject {
      }

      @GenModel(documentation="An Essbase Database is a unique, named multidimensional database implemented by an Essbase server.")
      class Database extends cwm.resource.multidimensional.Schema {

        @GenModel(documentation="If true, then this Database is a Currency Database.")
        attr cwm.objectmodel.core.Boolean isCurrency;

        @GenModel(documentation="The Outline owned by the Database.")
        val Outline[1]#database outline;
      }

      @GenModel(documentation="An Essbase Dimension is the primary physical object used in the construction of Essbase Databases.")
      class Dimension extends cwm.resource.multidimensional.Dimension {

        @GenModel(documentation="The type of the Essbase Dimension.")
        attr DimensionType type;

        @GenModel(documentation="Specifies if this Essbase Dimension is sparse or dense.  Generally affected by Dimension type (e.g., Accounts and Time Dimensions are usually dense).")
        attr cwm.objectmodel.core.Boolean isDense;

        @GenModel(documentation="The Outline that organizes the Dimensions.")
        ref Outline[1]#dimension outline;
      }

      @GenModel(documentation="An enumeration defining possible types of Essbase Dimension.")
      enum DimensionType {

        @GenModel(documentation="Denotes a Dimension of no particular type.")
        ess_none = 0;

        @GenModel(documentation="Denotes an Accounts (i.e., Measures) Dimension.")
        ess_accounts = 1;

        @GenModel(documentation="Denotes a Time Dimension.")
        ess_time = 2;

        @GenModel(documentation="Denotes a Dimension representing a list of country codes or locales.")
        ess_country = 3;

        @GenModel(documentation="Denotes a Dimension used for currency conversions.")
        ess_currencyPartition = 4;

        @GenModel(documentation="Denotes a Dimension of user-defined attributes (UDAs).")
        ess_attribute = 5;
      }

      @GenModel(documentation="Formula used to calculate the value of an Essbase Dimension member.")
      class Formula extends cwm.resource.multidimensional.DimensionedObject {
      }

      @GenModel(documentation="Common name/identifier for members occupying the same generation in the Dimension hierarchy, as defined by the Outline.")
      class Generation extends cwm.resource.multidimensional.DimensionedObject {
      }

      @GenModel(documentation="Represents the immediate parent of an Essbase Dimension member in the Dimension hierarchy defined by the Outline.")
      class ImmediateParent extends cwm.resource.multidimensional.DimensionedObject {
      }

      @GenModel(documentation="Common name/identifier for members occupying the same level in the Dimension hierarchy, as defined by the Outline.")
      class Level extends cwm.resource.multidimensional.DimensionedObject {
      }

      @GenModel(documentation="Name for an Essbase Dimension member.")
      class MemberName extends cwm.resource.multidimensional.DimensionedObject {
      }

      @GenModel(documentation="A software process that implements one or more Essbase Databases.")
      class OLAPServer extends cwm.foundation.softwaredeployment.DataManager {
      }

      @GenModel(documentation="An Essbase Outline defines the structure of an Essbase Database, including the dimensional hierarchies, members, tags, types, consolidations, and mathematical relationships. Data is stored in the Database according to the structure defined in the Outline.")
      class Outline extends cwm.objectmodel.core.Namespace {

        @GenModel(documentation="The name of the Alias Table to be used by this instance of Outline.")
        attr cwm.objectmodel.core.String aliasTableName;

        @GenModel(documentation="The Database that owns the Outline.")
        transient ref Database[1]#outline database;

        @GenModel(documentation="Dimensions organized by the Outline.")
        ref Dimension[*]#outline dimension;
      }

      @GenModel(documentation="Defines an abstract Essbase partition class (the superclass of all Essbase partition types).")
      abstract class Partition extends cwm.analysis.olap.CubeRegion {

        @GenModel(documentation="If true, then this Partition is a source Partition (i.e., a source of data values for some other target Partition).")
        attr cwm.objectmodel.core.Boolean isSource;

        @GenModel(documentation="If true, then this Partition is a shared source Partition (i.e., shared by several targets).")
        attr cwm.objectmodel.core.Boolean isShared;

        @GenModel(documentation="Expression specifying the mapping of source Partition data cells to target Partition data cells.")
        !resolve val cwm.foundation.expressions.ExpressionNode formula;
      }

      @GenModel(documentation="Subclass of Essbase Partition representing Replicated Partitions.")
      class ReplicatedPartition extends Partition {
      }

      @GenModel(documentation="Time balance tag for an Essbase Accounts Dimension member (e.g., attribute instance
values include: \"None\", \"First\", \"Last\", \"Average\").")
      class TimeBalance extends cwm.resource.multidimensional.DimensionedObject {
      }

      @GenModel(documentation="Subclass of Essbase Partition representing Transparent Partitions.")
      class TransparentPartition extends Partition {
      }

      @GenModel(documentation="This is a tag specifying that a derived (calculated) Accounts member needs to be re-computed following the global calculation of an Essbase Database.

This is done to provide a derived Accounts member that?s dependent on other account members with a final, correct value, following the sequential calculation of both the Accounts and Time Dimensions (e.g., Profit % Sales).")
      class TwoPassCalculation extends cwm.resource.multidimensional.DimensionedObject {
      }

      @GenModel(documentation="An Essbase user-defined attribute.")
      class UDA extends cwm.resource.multidimensional.DimensionedObject {
      }

      @GenModel(documentation="Variance reporting tag for an Essbase Accounts Dimension (e.g., attribute instance values include: \"NonExpense\", \"Expense\").")
      class VarianceReporting extends cwm.resource.multidimensional.DimensionedObject {
      }

      @GenModel(documentation="Subclass of Essbase Partition representing Linked Partitions.")
      class LinkedPartition extends Partition {
      }

    }

    @GenModel(documentation="The Oracle Express package is an extension of the Multidimensional package. It represents the physical data model for an Oracle Express Database.

The classes in this package can be used as either sources or targets of data in the data warehouse, and are available to provide a physical implementation of the OLAP data model.

The Express package depends on the following packages:

    org.omg::CWM::ObjectModel::Core
    org.omg::CWM::Foundation::SoftwareDeployment
    org.omg::CWM::Resource::Multidimensional

OCL Representation of Express Constraints

[C-1] An AggMap must be owned by a Database
context AggMap
inv: self.namespace->size = 1 and
self.namespace.oclIsKindOf(Database)

[C-2] A Model must be owned by a Database
context Model
inv: self.namespace->size = 1 and
self.namespace.oclIsKindOf(Database)

[C-3] A Program must be owned by a Database
context Program
inv: self.namespace->size = 1 and
self.namespace.oclIsKindOf(Database)

[C-4] A Worksheet must be owned by a Database
context Wor ksheet
inv: self.namespace->size = 1 and
self.namespace.oclIsKindOf(Database)
")
    @namespace(uri="http:///orgomg/cwmx/resource/express.ecore", prefix="orgomg.cwmx.resource.express")
    package express {
      @GenModel(documentation="This represents a physical Express dimension.")
      abstract class Dimension extends cwm.resource.multidimensional.Dimension {

        @GenModel(documentation="Identifies the Express Relations that reference the Dimension.")
        ref Relation[*]#referenceDimension relation;

        @GenModel(documentation="Identifies the Worksheets using the Dimension as a column dimension.")
        ref Worksheet[*]#columnDimension columnDimensionInWorksheet;

        @GenModel(documentation="Identifies the Worksheets using the Dimension as a row dimension.")
        ref Worksheet[*]#rowDimension rowDimensionInWorksheet;

        @GenModel(documentation="Identifies the Express ValueSets that reference a Dimension.")
        ref ValueSet[*]#referenceDimension valueSet;

        @GenModel(documentation="Identifies the AggMapComponent.")
        ref AggMapComponent[*]#dimension aggMapComponent;
      }

      @GenModel(documentation="This represents a physical Express database.")
      class Database extends cwm.resource.multidimensional.Schema {
      }

      @GenModel(documentation="This represents a physical Express conjoint. This is a type of physical dimension that may be used to provide more efficient storage for sparse cubes.")
      class Conjoint extends Dimension {

        @GenModel(documentation="Indicates the type of algorithm Express should use for loading and accessing the values of the Conjoint Dimension. Valid values are HASH, BTREE, NOHASH.")
        attr cwm.objectmodel.core.String searchAlgorithm;

        @GenModel(documentation="If specified, this defines the type of page space to be allocated to data relating specific values of the Conjoint to values of its base Dimensions:

    OWNSPACE specifies that the data will be stored in private page space.
    SHAREDSPACE specifies that the data will be stored in the database?s global page space.")
        attr cwm.objectmodel.core.String pageSpace;
      }

      @GenModel(documentation="This represents a physical Express program. The interface to the Program may be documented as an Operation associated with the Program.")
      class Program extends cwm.foundation.softwaredeployment.Component {

        @GenModel(documentation="An Express representation of the Program.")
        attr cwm.objectmodel.core.String program;

        @GenModel(documentation="If present, this specifies that when the Program is called as a function it returns a value of the named Dimension.")
        attr cwm.objectmodel.core.String returnDimension;
      }

      @GenModel(documentation="This represents a physical Express model.")
      class Model extends cwm.foundation.softwaredeployment.Component {

        @GenModel(documentation="An Express representation of the content of the Model.")
        attr cwm.objectmodel.core.String content;
      }

      @GenModel(documentation="This represents a physical Express variable.")
      class Variable extends cwm.resource.multidimensional.DimensionedObject {

        @GenModel(documentation="The type of storage to use for the Variable. The valid values are: TEMP, INPLACE, PERMANENT.")
        attr cwm.objectmodel.core.String storageType;

        @GenModel(documentation="If specified, this defines the type of page space in which data associated with the Variable will be stored:

    OWNSPACE specifies that the data will be stored in private page space associated with the Variable.
    SHAREDSPACE specifies that the data will be stored in the database?s global page space.")
        attr cwm.objectmodel.core.String pageSpace;

        @GenModel(documentation="If specified, this defines a fixed width, in bytes, for the storage area for each value of a Variable. Fixed widths can be specified only for dimensioned TEXT and INTEGER Variables.")
        attr cwm.objectmodel.core.Integer width;
      }

      @GenModel(documentation="This represents a physical Express formula.")
      class Formula extends cwm.resource.multidimensional.DimensionedObject {

        @GenModel(documentation="The calculation to be performed to produce values when you use the Formula. It can be any valid Express expression, including a constant or the name of a Variable.")
        attr cwm.objectmodel.core.String expression;
      }

      @GenModel(documentation="This represents a physical Express value set.")
      class ValueSet extends cwm.resource.multidimensional.DimensionedObject {

        @GenModel(documentation="If set, this indicates that values in the ValueSet are only temporary, and will be discarded at the end of each Express session.")
        attr cwm.objectmodel.core.Boolean isTemp;

        @GenModel(documentation="Identifies the Dimension whose values are to be stored in the ValueSet.")
        ref Dimension[1]#valueSet referenceDimension;
      }

      @GenModel(documentation="This represents a reference from one or more Dimensions to another Dimension.")
      class Relation extends cwm.resource.multidimensional.DimensionedObject {

        @GenModel(documentation="If set, this indicates that values of the Relation are only temporary, and will be discarded at the end of each Express session.")
        attr cwm.objectmodel.core.Boolean isTemp;

        @GenModel(documentation="This identifies the type of page space in which data associated with the Relation will be stored:

    OWNSPACE specifies that the data will be stored in private page space associated with the Relation.
    SHAREDSPACE specifies that the data will be stored in the database?s global page space.")
        attr cwm.objectmodel.core.String pageSpace;

        @GenModel(documentation="Identifies the Dimension referenced by the Relation.")
        ref Dimension[1]#relation referenceDimension;

        @GenModel(documentation="Identifies the AggMapComponent.")
        ref AggMapComponent[*]#relation aggMapComponent;
      }

      @GenModel(documentation="This represents a physical Express worksheet.")
      class Worksheet extends cwm.objectmodel.core.Class {

        @GenModel(documentation="If set, this indicates that values in the Worksheet are only temporary, and will be discarded at the end of each Express session.")
        attr cwm.objectmodel.core.Boolean isTemp;

        @GenModel(documentation="Identifies a Dimension used as the column dimension of the Worksheet.")
        ref Dimension#columnDimensionInWorksheet columnDimension;

        @GenModel(documentation="Identifies a Dimension used as the row dimension of the Worksheet.")
        ref Dimension#rowDimensionInWorksheet rowDimension;
      }

      @GenModel(documentation="This represents a physical Express composite.")
      class Composite extends Dimension {

        @GenModel(documentation="Indicates the type of algorithm Express should use for loading and accessing the values of the Composite Dimension. The valid values are HASH, BTREE.")
        attr cwm.objectmodel.core.String searchAlgorithm;

        @GenModel(documentation="If specified, this defines the type of page space to be allocated to data relating specific values of the Composite to values of its base Dimensions:

    OWNSPACE specifies that the data will be stored in private page space.
    SHAREDSPACE specifies that the data will be stored in the database?s global page space.")
        attr cwm.objectmodel.core.String pageSpace;
      }

      @GenModel(documentation="This represents an Express simple dimension.")
      class SimpleDimension extends Dimension {

        @GenModel(documentation="If specified, this defines a fixed width, in bytes, for the storage area for each value of the SimpleDimension. Fixed widths can be specified for TEXT dimensions only. Valid width values are 1 through 256.")
        attr cwm.objectmodel.core.Integer width;

        @GenModel(documentation="If set, indicates that the SimpleDimension is a time dimension.")
        attr cwm.objectmodel.core.Boolean isTime;

        @GenModel(documentation="This may be used for SimpleDimensions whose data type is WEEK or MONTH, to define time periods that span a multiple number of weeks or months.  With the WEEK data type, multiple can be an integer from 2 to 52. With the MONTH data type, multiple can be 2, 3, 4, or 6.")
        attr cwm.objectmodel.core.Integer multiple;

        @GenModel(documentation="This may be used for any time data type except DAY, to specify the beginning phase of the Dimension.
For single weeks, beginningPhase can be a day of the week or a date. For multiple weeks, beginningPhase must be a date. For months, quarters, or years, beginningPhase must be a month, expressed as a month name or as a date.")
        attr cwm.objectmodel.core.String beginningPhase;

        @GenModel(documentation="This may be used for any time data type except DAY, to specify the ending phase of the Dimension. For single weeks, endingPhase can be a day of the week or a date. For multiple weeks, endingPhase must be a date. For months, quarters, or years, endingPhase must be a month, expressed as a month name or as a date.")
        attr cwm.objectmodel.core.String endingPhase;

        @GenModel(documentation="Indicates the type of algorithm Express should use for loading and accessing the values of the SimpleDimension. The valid values are HASH, BTREE.")
        attr cwm.objectmodel.core.String searchAlgorithm;

        @GenModel(documentation="If specified, this defines the type of page space to be allocated to values of the SimpleDimension:

    OWNSPACE specifies that the data will be stored in private page space.
    SHAREDSPACE specifies that the data will be stored in the database?s global page space.")
        attr cwm.objectmodel.core.String pageSpace;

        @GenModel(documentation="Identifies an AliasDimension that is based on the SimpleDimension.")
        ref AliasDimension[*]#baseDimension aliasDimension;

        @GenModel(documentation="Identifies the data type for the SimpleDimension.")
        ref cwm.objectmodel.core.Classifier[1]#simpleDimension dataType;
      }

      @GenModel(documentation="This represents an Express alias dimension.")
      class AliasDimension extends Dimension {

        @GenModel(documentation="Identifies the SimpleDimension on which an AliasDimension is based.")
        ref SimpleDimension[1]#aliasDimension baseDimension;
      }

      @GenModel(documentation="This represents an Express aggregation map.")
      class AggMap extends cwm.objectmodel.core.Class {

        @GenModel(documentation="Identifies an AggMapComponent that forms part of the AggMap.")
        val AggMapComponent[*]#aggMap aggMapComponent;
      }

      @GenModel(documentation="This represents a component of an Express aggregation map.")
      class AggMapComponent extends cwm.objectmodel.core.ModelElement {

        @GenModel(documentation="A text expression indicating the type of aggregate operation.")
        attr cwm.objectmodel.core.String aggOperator;

        @GenModel(documentation="Identifies the Relation used by the AggMapComponent.")
        ref Relation#aggMapComponent relation;

        @GenModel(documentation="Identifies the Dimension associated with the AggMapComponent.")
        ref Dimension[1]#aggMapComponent dimension;

        @GenModel(documentation="Identifies the PreComputeClause associated with the AggMapComponent.")
        val PreComputeClause#aggMapComponent computeClause;

        @GenModel(documentation="Identifies the AggMap.")
        transient ref AggMap[1]#aggMapComponent aggMap;
      }

      @GenModel(documentation="This represents a pre-compute clause for an Express aggregation map.")
      class PreComputeClause extends cwm.objectmodel.core.ModelElement {

        @GenModel(documentation="The status of the dimension to aggregate.")
        attr cwm.objectmodel.core.Any statusList;

        @GenModel(documentation="Identifies the AggMapComponent.")
        transient ref AggMapComponent[1]#computeClause aggMapComponent;
      }

    }

  }

  @namespace(uri="http:///orgomg/cwmx/analysis.ecore", prefix="orgomg.cwmx.analysis")
  package analysis {
    @GenModel(documentation="The InformationSet package contains the metamodel of information sets that is an extension of the OLAP package.

An important aspect of data warehousing is the collection of data from external resources using, for example, application generated reports, questionnaires or surveys. To allow for inter-operability of tools supporting data collection, the metadata identifying the data to be collected must be defined, together with metadata that can be used to ensure accuracy and validity of data.

The InformationSet package is designed to enable interchange of common metadata about InformationSet structures, rules (e.g. validation, calculation), and, possibly, visual renderings.

The characteristics of the InformationSet are:

    the definition of logical structures that define the data to be collected can be both single and multi-dimensional (e.g. value of export by country and product)

    data can be derived both from either from non-human sources or from human sources (e.g. questionnaire, report form).

    instruments for data collection need to be designed in such a way that relevant and accurate data is collected, and in some instances this means that the designer needs control over the visual rendering of the collection instrument. Validation and Navigation within the InformationSet is also required in order to facilitate the collection/retrieval of accurate data.

The InformationSet package contains metamodel elements that support the following functions:

    Semantic definition of the InformationSet and its constituent parts
    Visual rendering supporting different media
    Validation, navigation and calculation based on data values entered/retrieved
    Via OLAP, the links to Nomenclatures (LevelBasedHierarchy) that give the valid codes and multi lingual labels for the Dimensions The InformationSet is a domain specific extension of the OLAP model with some additional classes to support specific requirements of the InformationSet (e.g. validation, rendering). All information to be collected can be identified in terms of the OLAP model, thus supporting the definition of both multidimensional and unidimensional Segments (the OLAP Cube).

In addition to the definition of multi-dimensional structures that comprise the logical InformationSet, there is a need to:

    ensure accuracy of the data by applying validation and navigation expressions
    derive values from other values in the InformationSet
    provide visual rendering capability to support data collection using visual media such as forms or screens

The InformationSet package depends on the following packages:

    org.omg::CWM::ObjectModel::Core
    org.omg::CWM::Foundation::BusinessInformation
    org.omg::CWM::Foundation::Expressions
    org.omg::CWM::Analysis::OLAP
    org.omg::CWM::Analysis::InformationVisualization

The core classes in the InformationSet package (InformationSet, Segment, SegmentRegion) are derived from the OLAP package classes of Schema, Cube, and CubeRegion. This means that each part of an InformationSet (the Segment) is defined in terms of a multidimensional structure of Dimensions.

Rule, InfoSetAdministration, and InfoSetDate are derived from ModelElement.

InformationSet is the logical container of all elements comprising the InformationSet metamodel. It is the root element of the metamodel hierarchy and marks the entry point for navigating the metamodel.

OCL Representation of InformationSet Constraints

[C-1] One instance of Rule can be associated with only one of InformationSet, Segment, SegmentRegion.
context Rule
inv: self.informationSet->isEmpty xor self.segment->isEmpty xor self.segmentRegion->
isEmpty")
    @namespace(uri="http:///orgomg/cwmx/analysis/informationset.ecore", prefix="orgomg.cwmx.analysis.informationset")
    package informationset {
      @GenModel(documentation="InformationSet contains all elements comprising an InformationSet database model.")
      class InformationSet extends cwm.analysis.olap.Schema {

        @GenModel(documentation="The version of an Information Set.")
        attr cwm.objectmodel.core.String version;

        @GenModel(documentation="The Rule for an InformationSet.")
        ref Rule[*]#informationSet rule;

        @GenModel(documentation="Administrative details for an InformationSet.")
        val InfoSetAdministration[*]#informationSet infoSetAdmin;
      }

      @GenModel(documentation="Segment represents a multidimensional structure. A Segment is defined by a collection of unique Dimensions from the InformationSet. Each unique combination of members in the Cartesian product of the Segment?s Dimensions identifies precisely one data cell within the multidimensional structure.

Note that a logical segment is \"defined\" by a collection of unique Dimensions from the InformationSet, and is \"described\" by a collection of one or more Segment Regions.")
      class Segment extends cwm.analysis.olap.Cube {

        @GenModel(documentation="Specifies the sequence of the SegmentRegion.")
        !resolve val cwm.objectmodel.core.ProcedureExpression regionSequence;

        @GenModel(documentation="The Rule for a Segment")
        ref Rule[*]#segment rule;
      }

      @GenModel(documentation="SegmentRegion represents a sub-set of a Segment. A SegmentRegion may be used for exposing a subset of the dimensionality of a Segment. The Member Selections comprising a SegmentRegion always collectively define a subset of the total dimensionality of the associated Segment.")
      class SegmentRegion extends cwm.analysis.olap.CubeRegion {

        @GenModel(documentation="The Rules for a SegmentRegion.")
        ref Rule[*]#segmentRegion rule;
      }

      @GenModel(documentation="This is a rule that performs one or more of the following:

1) Defines the validation required for data extracted from the data resource part of the InformationSet, Segment or SegmentRegion. This can include the requirement or otherwise of other Segment or SegmentRegions based on the value of the data extracted from this Segment or SegmentRegion.

2) Defines a calculation that can be used to derive data values, based on data values that are part of the InformationSet, Segment or SegmentRegion.")
      class Rule extends cwm.objectmodel.core.ModelElement {

        @GenModel(documentation="This is the rule, which can be an expression or an expression tree.")
        !resolve val cwm.foundation.expressions.ExpressionNode ruleExpression;

        @GenModel(documentation="This allows the Rule to be categorized - for example validation, calculation.")
        attr cwm.objectmodel.core.String type;

        @GenModel(documentation="The InformationSet for a Rule")
        ref InformationSet#rule informationSet;

        @GenModel(documentation="The Segment for a Rule")
        ref Segment#rule segment;

        @GenModel(documentation="The SegmentRegion for a Rule.")
        ref SegmentRegion#rule segmentRegion;
      }

      @GenModel(documentation="This class represents administrative details of an Information Set.")
      class InfoSetAdministration extends cwm.objectmodel.core.ModelElement {

        @GenModel(documentation="The priority of an Information Set.")
        attr cwm.objectmodel.core.String priority;

        @GenModel(documentation="If true, an acknowledgement is requested.")
        attr cwm.objectmodel.core.Boolean acknowledgement;

        @GenModel(documentation="InformationSet for adminstrative details.")
        transient ref InformationSet[1]#infoSetAdmin informationSet;

        @GenModel(documentation="Date for administration details.")
        ref InfoSetDate[*]#infoSetAdmin date;
      }

      @GenModel(documentation="This class represents dates relevant to an InformationSet such as date of dissemination
or receipt. It can have different formats.")
      class InfoSetDate extends cwm.objectmodel.core.ModelElement {

        @GenModel(documentation="Type of date, e.g. date of creation, validity period.")
        attr cwm.objectmodel.core.String type;

        @GenModel(documentation="Format of date, time or period.")
        attr cwm.objectmodel.core.String format;

        @GenModel(documentation="A date, time or period.")
        attr cwm.objectmodel.core.String dateTime;

        @GenModel(documentation="Adminstration details owning the date.")
        ref InfoSetAdministration[+]#date infoSetAdmin;
      }

    }

    @GenModel(documentation="The CWM Information Reporting metamodel extends the CWM Information Visualization metamodel for the purpose of defining metadata representing formatted reports.

The Information Reporting package depends on the following packages:

    org.omg::CWM::ObjectModel::Core
    org.omg::CWM::Foundation::DataTypes
    org.omg::CWM::Analysis::Transformation
    org.omg::CWM::Analysis::InformationVisualization

Report is a subclass of InformationVisualization::RenderedObject that represents a formatted report. Reports are comprised of instances of ReportGroup, which is also a subclass of RenderedObject. Thus, a Report is composed from ReportGroups, and ReportGroups may be composed recursively from other ReportGroups. Ultimately, the recursive definition of a ReportGroup must terminate with one or more ReportFields as leaf-level components. ReportField represents single-valued attributes of the Report that are individually mapped to data sources (e.g., report queries) and rendered (i.e., formatted) by associated instances of InformationVisualization::Rendering.

Related Reports may be grouped together into a ReportPackage, a subclass of formationVisualization::RenderedObjectSet. A Report may also have a related ReportExecution, which is a subclass of TranformationMap that relates the Report to both its data sources and procedures required to run the Report. Each ReportGroup may also specify a separate QueryExpression which is evaluated to yield the contents of fields within the ReportGroup. This enables the specification of both derived, as well as retrieved, data values for report fields.

Note that the Information Reporting metamodel makes extensive use of associations and attributes inherited from Information Visualization. For example, the formula attribute inherited from RenderedObject would be used by an instance of ReportGroup to indicate its positioning within the overall report layout. The inherited association \"CompositesReferenceComponents\" is used to compose Reports from ReportGroups, as well as to compose ReportGroups recursively from other ReportGroups and ReportFields. The inherited association \"NeighborsReferenceNeighbors\" may be used to specify topological relationships between instances of ReportGroup at the same level of composition.

OCL Representation of Information Reporting Constraints

[C-1] Reports generally do not have neighbor relationships with other reports.
context Report
inv: self.neighbor->isEmpty
inv: self.referencingNeighbor->isEmpty

[C-2] A ReportField is associated with precisely one ReportGroup.
context ReportField inv:
self.composite->size = 1

[C-3] A ReportField may not have components.
context ReportField inv:
self.component->isEmpty

[C-4] A ReportGroup is associated with precisely one Report.
context ReportGroup inv:
self.composite->size = 1

")
    @namespace(uri="http:///orgomg/cwmx/analysis/informationreporting.ecore", prefix="orgomg.cwmx.analysis.informationreporting")
    package informationreporting {
      @GenModel(documentation="Report is a subclass of RenderedObject that defines a two-dimensional, formatted report. A Report may be rendered as a printed report, in HTML, or as a dynamic, online report.")
      class Report extends cwm.analysis.informationvisualization.RenderedObject {
      }

      @GenModel(documentation="ReportAttribute is a subclass of UML Attribute that generally defines a ReportField. Note that ReportAttributes may be re-used in the definitions of multiple ReportFields.")
      class ReportAttribute extends cwm.objectmodel.core.Attribute {
      }

      @GenModel(documentation="ReportExecution is a subclass of TransformationMap that defines any necessary mappings and procedures for actually generating an instance of a Report.")
      class ReportExecution extends cwm.analysis.transformation.TransformationMap {
      }

      @GenModel(documentation="ReportField defines a specific field within a ReportGroup.")
      class ReportField extends cwm.analysis.informationvisualization.RenderedObject {
      }

      @GenModel(documentation="ReportGroup defines a grouping of fields on a report.")
      class ReportGroup extends cwm.analysis.informationvisualization.RenderedObject {

        @GenModel(documentation="Specifies the type of a ReportGroup")
        attr ReportGroupType groupType;

        @GenModel(documentation="QueryExpressions referenced by the ReportGroup.")
        ref cwm.foundation.datatypes.QueryExpression[*]#reportGroup reportQuery;
      }

      @GenModel(documentation="Defines ReportGroup types.")
      enum ReportGroupType {

        @GenModel(documentation="Header group type.")
        header = 0;

        @GenModel(documentation="Footer group type.")
        footer = 1;

        @GenModel(documentation="Detail group type.")
        detail = 2;

        @GenModel(documentation="Other group type.")
        other = 3;
      }

      @GenModel(documentation="Defines a grouping of related reports.")
      class ReportPackage extends cwm.analysis.informationvisualization.RenderedObjectSet {
      }

    }

  }

  @namespace(uri="http:///orgomg/cwmx/management.ecore", prefix="orgomg.cwmx.management")
  package management {
  }

  @GenModel(documentation="CWMXComplete is a package that invokes all other CWM and CWMX packages.  It does this by declaring the CWMComplete package to be its superclass (via the rose2mof.supertypes property on the MOF tab) and listing all of the other CWMX metamodel packages in declaration order in the uml2mof.clusteredImport property of the MOF tab.  

CWMXComplete is included as a convenience for software that wants to generate the entire CWMX package.  It is non-normative, is not included in any normative CWM dtd file, and is not documented in either volume of the CWM specification.")
  @namespace(uri="http:///orgomg/cwmx/cwmxcomplete.ecore", prefix="orgomg.cwmx.cwmxcomplete")
  package cwmxcomplete {
  }

}

@namespace(uri="http:///orgomg/cwmmip.ecore", prefix="orgomg.cwmmip")
package cwmmip {
  @GenModel(documentation="UnitOfInterchange is a subclass of CWM Namespace that contains the complete CWM instance (model/metadata) being interchanged.")
  class UnitOfInterchange extends cwm.objectmodel.core.Namespace {
    ref InterchangePattern#unitOfInterchange interchangePattern;
  }

  @GenModel(documentation="InterchangePattern formally describes a CWM Metadata Interchange pattern. Such a pattern may describe the content of one or more instances of UnitOfInterchange referenced by InterchangePattern.")
  class InterchangePattern extends cwm.objectmodel.core.Element {

    @GenModel(documentation="The name of the interchange pattern.")
    attr cwm.objectmodel.core.String name;

    @GenModel(documentation="The version of the interchange pattern.")
    attr cwm.objectmodel.core.String version;

    @GenModel(documentation="A URI identifying a human-readable pattern specfication document that describes the interchange pattern.")
    attr cwm.objectmodel.core.String uri;

    @GenModel(documentation="Identifies the structural classification of the pattern: Micro Pattern, Domain Pattern, Macro Pattern.")
    attr cwm.objectmodel.core.String classification;

    @GenModel(documentation="Identifies the usage category of the pattern: Mapping, Typing, Extension, Interpretation, Generation, Structural.")
    attr cwm.objectmodel.core.String category;

    @GenModel(documentation="An object-valued array of type Projection that describes the metamodel graph subset defining the semantic context of the pattern. If this attribute contains more than one value, then the complete projection of the pattern is the graph union of multiple projection object values. This attribute has a multiplicity of 1..*.")
    !resolve val Projection projection;
    ref UnitOfInterchange[*]#interchangePattern unitOfInterchange;
    ref InterchangePattern[*]#compositePattern componentPattern;
    ref InterchangePattern[*]#componentPattern compositePattern;
  }

  @GenModel(documentation="ModeledSemanticContext is a subclass of SemanticContext that adds references to instances of MOF ModelElements and MOF Associations, as well as an association to MOF ModelElements as a means of specifying anchor classes. Constraints may be specified within ModelSemanticContext via the inherited SemanticContext::constraint attribute.

Note that this class generally supports the construction of \"explicitly modeled\" pattern definitions; that is, pattern definitions composed of MOF metaclass instances (or MOF metaobjects), rather than simply logical class names.")
  class ModeledSemanticContext extends SemanticContext {
    ref mof.model.Association[*]#modeledProjection mofAssociation;
    ref mof.model.ModelElement[*]#modeledProjection mofElement;
    ref mof.model.ModelElement[*]#modeledSemanticContext mofAnchorElement;
  }

  @GenModel(documentation="Projection is an abstract base class that models the semantic context of the pattern, where by semantic context we mean a well-defined subset of the CWM metamodel graph.")
  abstract class Projection extends cwm.objectmodel.core.Element {
  }

  @GenModel(documentation="SemaniticContext is a concrete subclass of Projection that specifies a projection by naming the CWM model elements and associations comprising the projection, along with any constraints on those elements.")
  class SemanticContext extends Projection {

    @GenModel(documentation="Element contains the names of the CWM metamodel classes comprising the Projection, expressed as string-based, logical names. This attribute has a multiplicity of 0..*. These logical names may refer to elements from multiple CWM metamodel packages.")
    attr cwm.objectmodel.core.String element;

    @GenModel(documentation="Association contains the names of CWM associations comprising the Projection, expressed as string-based logical names. This attribute has a multiplicity of 0..*. These logical names may refer to associations from any number of CWM packages, including associations that span packages.")
    attr cwm.objectmodel.core.String association;

    @GenModel(documentation="Constraint is a collection of pattern constraints that apply to elements and associations comprising the Projection. This attribute has a multiplicity of 0..*.")
    !resolve val PatternConstraint constraint;

    @GenModel(documentation="AnchorElement names CWM metamodel elements from the Projection that have some distinguished meaning. Generally, these elements are thought of as root objects of the metamodel Projection graph and are used as starting points for navigating the graph. This attribute has a multiplicity of 0..*. Although a Projection may have multiple anchor points, in practice, most Projections will usually have a single anchor point.")
    attr cwm.objectmodel.core.String anchorElement;
  }

  class Element {
  }

  @GenModel(documentation="GraphSubset is a concrete subclass of Projection that allows a projection to be specified by an expression which, when evaluated, describes some physical sub-graph of the CWM UML model.")
  class GraphSubset extends Projection {

    @GenModel(documentation="Element is the logical name of a CWM metamodel element (usually a package or class) comprising the physical projection.")
    attr cwm.objectmodel.core.String element;

    @GenModel(documentation="DeepCopy is a Boolean attribute which, when true, implies that all connected elements and their attributes, within the boundaries of the specified package, are to be included in the pattern projection.")
    attr cwm.objectmodel.core.Boolean deepCopy;

    @GenModel(documentation="CopyDepth is an integer value that specifies the number of graph edges to traverse when establishing the physical graph projection, in cases when deepCopy is false.")
    attr cwm.objectmodel.core.Integer copyDepth;

    @GenModel(documentation="AggregationsOnly is a Boolean attribute which, when true, specifies that only composite elements and their components are to be included in the physical graph projection.")
    attr cwm.objectmodel.core.Boolean aggregationsOnly;

    @GenModel(documentation="IncludeAssociations is a Boolean attribute which, when true, specifies that associations are to be included in the physical graph projection.")
    attr cwm.objectmodel.core.Boolean includeAssociations;
  }

  @GenModel(documentation="PatternConstraint is used to define constraints against the metamodel Projection. There is no requirement to use any particular constraint language. However, if OCL is used, the OCL expression contained by PatternConstraint::body must be a valid OCL expression relative to the modeling context of the Projection.")
  class PatternConstraint extends cwm.objectmodel.core.Element {

    @GenModel(documentation="Constraint expressed as a textual string in some constraint language.")
    attr cwm.objectmodel.core.String body;

    @GenModel(documentation="Specfies the names of the constraint language used.")
    attr cwm.objectmodel.core.String language;
  }

  @GenModel(documentation="ModeledGraphSubset is a subclass of GraphSubset that adds a reference to a single instance of MOF ModelElement.

Note that this class generally supports the construction of \"explicitly modeled\" pattern definitions; that is, pattern definitions composed of MOF metaclass instances (or MOF metaobjects), rather than simply logical class names.")
  class ModeledGraphSubset extends GraphSubset {
    ref mof.model.ModelElement#modeledGraphSubset mofElement;
  }

  @GenModel(documentation="Restriction is a subclass of PatternConstraint that imposes structural constraints on an instance of a Projection. The resulting structure is then regarded as being invariant with regard to other values that might be supplied in the construction of the pattern instance (e.g., values of certain class attributes).")
  class Restriction extends PatternConstraint {
  }

  @GenModel(documentation="BindingParameter is a subclass of PatternConstraint that typically asserts values (or value ranges) for class attributes. BindingParameters do not influence structure, but influence content instead.")
  class BindingParameter extends PatternConstraint {
  }

}

@namespace(uri="http:///orgomg/mof.ecore", prefix="orgomg.mof")
package mof {
  @namespace(uri="http:///orgomg/mof/model.ecore", prefix="orgomg.mof.model")
  package model {
    class ModelElement {
      ref cwmmip.ModeledGraphSubset[*]#mofElement modeledGraphSubset;
      ref cwmmip.ModeledSemanticContext[*]#mofElement modeledProjection;
      ref cwmmip.ModeledSemanticContext[*]#mofAnchorElement modeledSemanticContext;
    }

    class Association {
      ref cwmmip.ModeledSemanticContext[*]#mofAssociation modeledProjection;
    }

  }

}

