operation Application populateClasses() {
    for (classForm in self.classForms.select(f|f.autogenerated == true)) {
        delete classForm;
    }
    self.clearAutogeneratedLocales();
    for (module in self.modules) {
        for (eClass in module.eClasses) {
            var theClass = self.getTopLevelClass(eClass);
            theClass.~module = module;
            self.getClass(theClass);
        }
    }
    for (eClass in self.~eClasses.values()) {
        eClass.~subTypes = self.getSubTypes(eClass);
    }
    
    for (theClass in self.~eClasses.values()) {
        self.getClassForm(theClass);
    }
    self.classForms = self.classForms.sortBy(f| f.name);    
    self.generateClassesLocale();
}

@cached
operation getDomainPackages() {
    return domain!EPackage.all();
}

@cached
operation getDomainPackage(nsPrefix) {
    var ePackage = getDomainPackages().selectOne(p|p.nsPrefix == nsPrefix);
    if (not ePackage.isDefined()) {
        throw "EPackage " + nsPrefix + " not found";
    }
    return ePackage;
}

@cached
operation getDomainClass(qName) {
    var parts = qName.split("[.]");
    var ePackage = getDomainPackage(parts.at(0));
    var eClass = ePackage.getEClassifier(parts.at(1));
    if (not eClass.isDefined() or not eClass.isKindOf(EClass)) {
        throw "EClass " + qName + " not found";
    }
    return eClass;
}

operation Application generateClassesLocale() {
    var classes = self.locales.selectOne(l|l.name == 'classes');
    if (not classes.isDefined()) {
        classes = new LocNS;
        self.locales.add(classes);
        classes.name = 'classes';
        classes.autogenerated = true;
    }
    for (eClass in self.~eClasses.values()) {
        var package = classes.addNS(eClass.ePackage.nsPrefix);
        var class = package.addNS(eClass.name);
        if (class.autogenerated) {
            var sname = class.addString('caption');
            sname.addTranslation('en', eClass.name);
            sname.addTranslation('ru', eClass.name);
            var pname = class.addString('caption_plural');
            pname.addTranslation('en', 'List of ' + eClass.getCaption('en'));
            pname.addTranslation('ru', 'Список ' + eClass.getCaption('ru'));
            var attrs = class.addNS('attrs');
            if (attrs.autogenerated) {
	            for (feature in eClass.getEAllStructuralFeatures()) {
	                var featureNS = attrs.addNS(feature.name);
	                if (featureNS.autogenerated) {
	                    var featureS = featureNS.addString('caption');
	                    featureS.addTranslation('en', feature.getCaption('en'));
	                    featureS.addTranslation('ru', feature.getCaption('ru'));
	                    var placeholder = featureNS.addString('placeholder');
	                    placeholder.addTranslation('en', "Enter " + feature.getCaption('en') + "...");
	                    placeholder.addTranslation('ru', "Введите " + feature.getCaption('ru') + "...");
	                    var help = featureNS.addString('help');
	                    help.addTranslation('en', "");
	                    help.addTranslation('ru', "");
	                }
	            }
            }
            var ops = class.addNS('ops');
            if (ops.autogenerated) {
	            for (op in eClass.getEOperations()) {
	                var opNS = ops.addNS(op.name);
                    if (opNS.autogenerated) {
	                    var opS = opNS.addString('caption');
	                    opS.addTranslation('en', op.getCaption('en'));
	                    opS.addTranslation('ru', op.getCaption('ru'));
	                    var paramsNS = opNS.addNS("params");
	                    for (param in op.getEParameters()) {
		                    var paramNS = paramsNS.addNS(param.name);
		                    if (paramNS.autogenerated) {
			                    var paramS = paramNS.addString('caption');
			                    paramS.addTranslation('en', param.getCaption('en'));
			                    paramS.addTranslation('ru', param.getCaption('ru'));
		                    }
	                    }
                    }
	            }
            }
            var groups = class.addNS('groups');
            if (groups.autogenerated) {
                for (group_ in eClass.~form.fields.select(f|f.isKindOf(FieldSet))) {
                    var groupNS = groups.addNS(group_.name);
                    if (groupNS.autogenerated) {
                        var groupS = groupNS.addString('caption');
                        groupS.addTranslation('en', captionFromCamel(group_.name));
                        groupS.addTranslation('ru', captionFromCamel(group_.name));
                    }
                }
            }
        }
    }
}

operation LocNS addNS(name) {
    var sname = self.embedded.selectOne(ns|ns.name == name);
    if (not sname.isDefined()) {
	    sname = new LocNS;
	    self.embedded.add(sname);
	    sname.name = name;
	    sname.autogenerated = true;
    }
    return sname;
}

operation LocNS addString(name) {
    var sname = self.strings.selectOne(s|s.name == name);
    if (not sname.isDefined()) {
        sname = new LocString;
        self.strings.add(sname);
        sname.name = name;
    }
    return sname;
}

operation LocString addTranslation(language, name) {
    var tr = self.translations.selectOne(tr|tr.language == language);
    if (not tr.isDefined()) {
	    tr = new Translation;
	    self.translations.add(tr);
	    tr.language = language;
    }
    tr.name = name;
    return tr;
}

operation Application clearAutogeneratedLocales() {
    clearNSList(self.locales);
}

operation clearNSList(nsList) {
    for (ns in nsList.clone()) {
        clearNSList(ns.embedded);
        if (ns.autogenerated and ns.embedded.size() == 0) {
            delete ns;
        }
    }
}

operation Application getTopLevelClass(eClass){
    if (not self.~topClasses.isDefined()) {
        self.~topClasses = Map{};
    }
    if (self.~topClasses.containsKey(eClass.getQName())) {
        return self.~topClasses.get(eClass.getQName());
    }
    self.~topClasses.put(eClass.getQName(), eClass);
    return eClass;
}

operation Application getPackage(ePackage){
    if (not self.~ePackages.isDefined()) {
        self.~ePackages = Map{};
    }
    if (self.~ePackages.containsKey(ePackage.nsPrefix)) {
        return self.~ePackages.get(ePackage.nsPrefix);
    }
    self.~ePackages.put(ePackage.nsPrefix, ePackage);
    for (eClass: EClass in ePackage.getEClassifiers()) {
        self.getClass(eClass);
    }
    return ePackage;
}

@cached
operation Application getClass(eClass){
    if (not self.~eClasses.isDefined()) {
        self.~eClasses = Map{};
    }
    if (self.~eClasses.containsKey(eClass.getQName())) {
        return self.~eClasses.get(eClass.getQName());
    }
    self.~eClasses.put(eClass.getQName(), eClass);
    for (superType in eClass.getEAllSuperTypes()) {
        self.getClass(superType);
    }
    for (reference in eClass.getEAllReferences()) {
        self.getClass(reference.getEReferenceType());
    }
    self.getPackage(eClass.ePackage);
    return eClass;
}

@cached
operation Application getSubTypes(eClass) {
    var subTypes = Map{};
    for (subType: EClass in self.~eClasses.values()) {
        if (not subType.isAbstract() and eClass.isSuperTypeOf(subType)) {
            subTypes.put(subType.getQName(), subType);
        }
    }
    return subTypes.values().sortBy(c|c.name);
}

operation EClass getSubTypes() {
    return self.~subTypes;
}

@cached
operation Application getClassForm(aClass) {
    var eClass = self.getClass(aClass);
    if (not eClass.~form.isDefined()) {
        var form = self.classForms.selectOne(f|f.eClass.getQName() == eClass.getQName());
        if (form == null) {
            form = new ClassForm;
            self.classForms.add(form);
            form.eClass = eClass;
            form.autogenerated = true;
            self.populateDefault(form);
        }
        eClass.~form = form;
    }
    return eClass.~form; 
}

operation Application populateDefault(classForm) {
    var eClass = classForm.eClass;
    classForm.name = eClass.ePackage.nsPrefix + '_' + eClass.name + '_Form';
    for (name in eClass.getEAllOperations().collect(o|o.name)) {
        var action = new Action;
        action.name = name;
        classForm.actions.add(action);
    }
    for (sf in eClass.getEAllStructuralFeatures().select(sf|not sf.isKindOf(EReference) or not sf.isContainer())) {
        var field = new Field;
        classForm.fields.add(field);
        field.name = sf.name;
    }
    var columnCount = 0;
    for (sf in eClass.getEAllStructuralFeatures().select(sf|(sf.getUpperBound() == 1) and (not sf.isKindOf(EReference) or not sf.isContainer())).select(sf|sf.getAnnotation("mspace.ui", "password", "false") == "false")) {
        if (sf.isKindOf(EReference) and sf.isContainment()) {
            var refClass = sf.getEReferenceType();
            for (sf2 in refClass.getEAllAttributes().select(sf|(sf.getUpperBound() == 1)).select(sf|sf.getAnnotation("mspace.ui", "password", "false") == "false")) {
	            var column = new Column;
	            column.name = sf.name + '.' + sf2.name;
	            columnCount = columnCount + 1;
	            column.visible = columnCount <= 5;
	            classForm.columns.add(column);
            }
        }
        else {
		    var column = new Column;
		    column.name = sf.name;
		    columnCount = columnCount + 1;
		    column.visible = columnCount <= 5;
		    classForm.columns.add(column);
        }
    }
    if (true) {
        var column = new Column;
        column.name = 'e_id';
        column.visible = false;
        classForm.columns.add(column);
    }
    if (true) {
        var column = new Column;
        column.name = '_type_';
        column.visible = false;
        classForm.columns.add(column);
    }
}

operation copyPath(from, to) {
    copy(new Native("java.io.File")(from), new Native("java.io.File")(to));
}

operation copyDirectory(source, target) {
    if (not target.exists()) {
        target.mkdir();
    }

    for (f in source.list()) {
        copy(new Native("java.io.File")(source, f), new Native("java.io.File")(target, f));
    }
}

operation copy(sourceLocation, targetLocation) {
    if (sourceLocation.isDirectory()) {
        copyDirectory(sourceLocation, targetLocation);
    } else {
        copyFile(sourceLocation, targetLocation);
    }
}

operation copyFile(sourceLocation, targetLocation) {
    var is = new Native("java.io.FileInputStream")(sourceLocation);
    var os = new Native("java.io.FileOutputStream")(targetLocation);
    var rbc = Native("java.nio.channels.Channels").newChannel(is);
    os.getChannel().transferFrom(rbc, 0l, 9223372036854775807l);
    rbc.close();
    is.close();
}

@cached
operation EClass getQName() {
    return self.ePackage.nsPrefix + '.' + self.name;
}

@cached
operation EClass getCName() {
    return self.ePackage.nsPrefix.firstToUpperCase() + self.name;
}

@cached
operation EClass getDisplayFieldName() {
    var f = self.getDisplayFeature();
    if (f.isDefined()) return f.name;
    return "_type_";
}

@cached
operation EClass getDisplayFeature() {
    var allFeatures = self.getEAllStructuralFeatures();
    var feature = allFeatures.selectOne(f|f.getAnnotation("mspace.ui", "display", "false") == "true");
    if (feature.isDefined())
        return feature;
    feature = allFeatures.selectOne(f|f.isKindOf(EAttribute) and f.name = "name");
    if (feature.isDefined())
        return feature;
    feature = allFeatures.selectOne(f|f.isKindOf(EAttribute) and f.eAttributeType.name = "EString");
    if (feature.isDefined())
        return feature;
    feature = allFeatures.selectOne(f|f.isKindOf(EAttribute));
    if (feature.isDefined())
        return feature;
    return null;
}

@cached
operation EModelElement getAnnotation(source, key, dflt) {
    for (a in self.eAnnotations.select(a|a.source == source)) {
        var d = a.details.select(d|d.key == key).first();
        if (d.isDefined()) {
            return d.value;
        }
    }
    return dflt;
}

operation captionFromCamel(s) {
    return s.firstToUpperCase().split("(?<=\\p{javaLowerCase})(?=\\p{javaUpperCase})").concat(" ");
}

@cached
operation ENamedElement getCaption(lc) {
    if (lc == "ru") return self.getAnnotation("mspace.ui", "caption", captionFromCamel(self.name));
    return captionFromCamel(self.name);
}

operation EClass findParent(path, eClass) {
  for (r in self.eAllReferences) {
    if (r.eOpposite.isDefined() and r.eOpposite.isContainment) {
        if (r.eReferenceType == eClass or r.eReferenceType.findParent(path, eClass)) {
          path.add(r.name);
          return true;
        }
    }
  }
  return false;
}

operation EClass findCommon(myPath, otherPath, otherClass) {
  if (otherClass.findParent(otherPath, self)) {
    return true;
  }
  for (r in self.eAllReferences) {
    if (r.eOpposite.isDefined() and r.eOpposite.isContainment) {
      if (r.eReferenceType.findCommon(myPath, otherPath, otherClass)) {
        myPath.add(r.name);
        return true;
      }
    }
  }
  return false;
}

@cached
operation EClass readOnly() {
    return self.getAnnotation("mspace.ui", "readOnly", false).asBoolean();
}

@cached
operation EStructuralFeature readOnly() {
    return self.getAnnotation("mspace.ui", "readOnly", false).asBoolean() or self.getEContainingClass().readOnly();
}

@cached
operation EClass attNamesStr() {
    return self.attNames().collect(name|"'" + name + "'").concat(",");
}

@cached
operation EClass attNames() {
    return self.getEAllAttributes().select(a|(a.getUpperBound() == 1)).collect(a|a.name);
}

@cached
operation EParameter getInputType() {
	if (self.getAnnotation("mspace.ui", "file", "false") == "true") return "file";
	if (self.getAnnotation("mspace.ui", "password", "false") == "true") return "password";
	if (self.getAnnotation("mspace.ui", "multiline", "false") == "true") return "textarea";
	return "text";
}
