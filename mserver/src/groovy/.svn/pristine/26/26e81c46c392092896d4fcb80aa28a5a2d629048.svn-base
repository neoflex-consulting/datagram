package MetaServer.sse

import org.apache.commons.logging.Log
import org.apache.commons.logging.LogFactory
import ru.neoflex.meta.model.Database

abstract class Workspace {
    private final static Log log = LogFactory.getLog(Workspace.class)

    static Map getLivyServer(Map workspace) {
        def db = Database.new
        def ws = getWorkspace(workspace, db)

        def livy = ws.cluster?.livyServer
        if (livy == null) {
            livy = db.get(ws.cluster).livyServer
        }

        return livy
    }

    static Map getReferenceConnection(Map workspace) {
        def db = Database.new
        def ws = getWorkspace(workspace, db)

        def referenceConnection = ws.cluster?.referenceConnection
        if (referenceConnection == null) {
            referenceConnection = db.get(ws.cluster).referenceConnection
        }
        if (referenceConnection == null ||
                referenceConnection.driver == null ||
                !(referenceConnection.driver as String).contains("PhoenixDriver")) {
            throw new RuntimeException("No Phoenix jdbc connection found")
        }

        return referenceConnection
    }

    static Map getWorkspace(Map workspace, Database db = null) {
        if (db == null) {
            db = Database.new
        }
        def ws = db.get(workspace)
        if (ws.cluster == null) {
            throw new RuntimeException("Cluster not defined for workspace " + ws.name)
        }
        ws
    }

    static Map getHiveConnection(Map workspace) {
        def db = Database.new
        def ws = getWorkspace(workspace, db)

        def hive = ws.cluster?.hiveConnection
        if (hive == null) {
            hive = db.get(ws.cluster).hiveConnection
        }

        return hive
    }

    static String getHiveMetastoreUri(Map workspace) {
        def db = Database.new
        def ws = getWorkspace(workspace, db)

        def hiveM = ws.cluster?.hiveMetastoreUri
        if (hiveM == null) {
            hiveM = db.get(ws.cluster).hiveMetastoreUri
        }

        return hiveM
    }

    static Map<String, String> getWorkspaceParameters(Map workspace) {
        def db = Database.new
        def ws = db.get(workspace)

        def params = ws.parameters ?: []
        def jobParams = [:]
        params.forEach {p -> jobParams.put(p.name, p.value) }

        return jobParams
    }
}
