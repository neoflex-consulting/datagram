package MetaServer.etl;
import ru.neoflex.meta.utils.Context;
/* protected region MetaServer.etlCoJob.inport on begin */
import org.eclipse.epsilon.common.util.StringProperties
import org.eclipse.epsilon.emc.emf.EmfModel
import ru.neoflex.meta.model.Database;
import org.apache.commons.logging.Log
import org.apache.commons.logging.LogFactory;
import MetaServer.utils.MetaInfo;
import MetaServer.rt.CoordinatorDeployment;
/* protected region MetaServer.etlCoJob.inport end */
class CoJob {
    /* protected region MetaServer.etlCoJob.statics on begin */
    private final static Log logger = LogFactory.getLog(Transformation.class);

    public static Map findOrCreateCoJD(name, Map coJob) {
        def db = Database.new
        def cojd = db.session.createQuery("from rt.CoordinatorDeployment where name = :name").setParameter("name", name).uniqueResult()
        if (cojd == null) {
            println("create new coordinator deployment ${name}")
            def project = coJob.project
            def oozie = Context.current.session.createQuery("from rt.Oozie where project.e_id = ${project?.e_id}").uniqueResult()
            if (oozie == null) {
                oozie = Context.current.session.createQuery("from rt.Oozie where isDefault = true").uniqueResult()
                if (oozie == null) {
                    throw new RuntimeException("default Oozie not found")
                }
            }
            def deployments = []
            Workflow.collectWfTransformations(coJob.action.workflow, []).each {Transformation.collectTrDeployments(it, deployments)}
            cojd = db.instantiate("rt.CoordinatorDeployment", [name: name, project: Project.findOrCreateProject(), oozie: oozie, coordinator: coJob, deployments: deployments.unique {"${it._type_}|${it.e_id}"}, debug: true, slideSize: 400, rejectSize: 1000, fetchSize: 1000, partitionNum: 1, persistOnDisk: true, master: "local", numExecutors: 1, executorCores: 1])
            db.save(cojd)
        }
        return cojd
    }

    public static Object validateModel(Map entity) {
        def fileName = "/pim/etl/coord.evl"
        def emfModel = new EmfModel();
        def properties = new StringProperties()
        properties.put(EmfModel.PROPERTY_NAME, "src")
        properties.put(EmfModel.PROPERTY_MODEL_URI, "hibernate://?dsname=teneo&query1=from etl.CoJob where e_id=${entity.e_id}")
        properties.put(EmfModel.PROPERTY_METAMODEL_URI, "http://www.neoflex.ru/meta/etl")
        properties.put(EmfModel.PROPERTY_READONLOAD, "true")
        emfModel.load(properties, "" );
        def problems = []
        Context.current.getContextSvc().epsilonSvc.executeEvl(fileName, [:], [emfModel], problems)
        return [result: (problems.find {it.isCritique == false} == null), problems: problems]
    }

    public static Object validateScripts(Map entity) {
        def coJob = new Database("teneo").get("etl.CoJob", (Long)entity.e_id)
        def problems = []
        def workflow = coJob.action.workflow
        return Workflow.validateScripts(workflow)
    }
    /* protected region MetaServer.etlCoJob.statics end */

    public static Object validate(Map entity, Map params = null) {
    /* protected region MetaServer.etlCoJob.validate on begin */
        def retModel = validateModel(entity)
        def retScripts = validateScripts(entity)
        def ret = [result: retModel.result && retScripts.result, problems: retModel.problems + retScripts.problems]
        for (problem in ret.problems) {
            logger.warn(problem)
        }
        return ret
    /* protected region MetaServer.etlCoJob.validate end */
    }

    public static Object dependencies(Map entity, Map params = null) {
    /* protected region MetaServer.etlCoJob.dependencies on begin */
        def deps = MetaInfo.getAllDeps(entity).collect {[_type_: it._type_, name: it.name, e_id: it.e_id]}
        println(deps)
        return deps
    /* protected region MetaServer.etlCoJob.dependencies end */
    }

    public static Object install(Map entity, Map params = null) {
    /* protected region MetaServer.etlCoJob.install on begin */
        def cojd = findOrCreateCoJD("autogenerated_co_" + entity.name, Database.new.get(entity))
        Context.current.commit()
        return CoordinatorDeployment.install(cojd, params)
    /* protected region MetaServer.etlCoJob.install end */
    }

    public static Object runit(Map entity, Map params = null) {
    /* protected region MetaServer.etlCoJob.runit on begin */
        def cojd = findOrCreateCoJD("autogenerated_co_" + entity.name, Database.new.get(entity))
        Context.current.commit()
        return CoordinatorDeployment.generateAndRun(cojd, params)
    /* protected region MetaServer.etlCoJob.runit end */
    }
}
